{"config":{"lang":["de"],"separator":"[\\s\\-,:!=\\[\\]()\"/]+|(?!\\b)(?=[A-Z][a-z])|\\.(?!\\d)|&[lg]t;","pipeline":["stemmer","stopWordFilter","trimmer"]},"docs":[{"location":"Sicherheit/auth/","title":"\ud83d\udd10 Authentifizierung (Auth)","text":"<p>Authentifizierung ist ein zentraler Bestandteil der IT-Sicherheit. Sie stellt sicher, dass eine Person oder ein System wirklich derjenige ist, der er vorgibt zu sein.</p>"},{"location":"Sicherheit/auth/#was-ist-authentifizierung","title":"\ud83e\udde9 Was ist Authentifizierung?","text":"<p>Authentifizierung (Auth) ist der Prozess, bei dem die Identit\u00e4t eines Benutzers, Ger\u00e4ts oder Systems \u00fcberpr\u00fcft wird \u2013 in der Regel vor dem Zugriff auf gesch\u00fctzte Ressourcen.</p> <p>Sie beantwortet die Frage: \u27a1\ufe0f \"Wer bist du \u2013 und kannst du das beweisen?\"</p>"},{"location":"Sicherheit/auth/#authentifizierung-vs-autorisierung","title":"\ud83d\udcd8 Authentifizierung vs. Autorisierung","text":"Begriff Bedeutung Authentifizierung Wer bist du? (Identit\u00e4tspr\u00fcfung) Autorisierung Was darfst du? (Zugriffsrechte nach Login)"},{"location":"Sicherheit/auth/#klassische-authentifizierungsfaktoren","title":"\ud83d\udd11 Klassische Authentifizierungsfaktoren","text":"<p>Die Sicherheit steigt mit der Anzahl kombinierter Faktoren. Man spricht von \"Multi-Faktor-Authentifizierung (MFA)\".</p> Faktor-Typ Beispiel Wissen (Etwas, das man wei\u00df) Passwort, PIN Besitz (Etwas, das man hat) Smartphone, Token, Karte Sein (Etwas, das man ist) Fingerabdruck, Gesicht, Iris Ort (Wo man ist) Standortdaten Zeit (Wann man ist) Zeitfenster-basiert (z.\u202fB. TANs)"},{"location":"Sicherheit/auth/#authentifizierungsmethoden-im-web","title":"\ud83d\udee0\ufe0f Authentifizierungsmethoden im Web","text":""},{"location":"Sicherheit/auth/#1-passwortbasierte-auth","title":"1. \ud83d\udd12 Passwortbasierte Auth","text":"<ul> <li>Klassischster Ansatz: Benutzername + Passwort</li> <li>Sicherheitsrisiko bei:</li> <li>Wiederverwendung</li> <li>Einfachen Passw\u00f6rtern</li> <li>Kein Rate-Limit</li> </ul> <p>\u2705 Verst\u00e4rken durch: - Hashing (z.\u202fB. bcrypt) - Salting - MFA</p>"},{"location":"Sicherheit/auth/#2-token-basierte-auth","title":"2. \ud83d\udd11 Token-basierte Auth","text":"<ul> <li>Moderne Methode bei Web-APIs</li> <li>Server gibt nach Login ein Token zur\u00fcck (z.\u202fB. JWT)</li> <li>Dieses Token wird bei jedem weiteren Request mitgeschickt</li> </ul> <p>Vorteile: - Kein Session-Tracking notwendig - Skalierbar, mobilfreundlich</p> <pre><code>GET /api/user\nAuthorization: Bearer eyJhbGciOiJIUzI1NiIs...\n</code></pre>"},{"location":"Sicherheit/auth/#3-oauth-20-openid-connect","title":"3. \ud83e\udde9 OAuth 2.0 / OpenID Connect","text":"<ul> <li>Delegierte Authentifizierung</li> <li>Erm\u00f6glicht Login \u00fcber Drittanbieter (Google, GitHub, Facebook)</li> <li>Token-System mit Rollen und G\u00fcltigkeit</li> </ul> <p>\u27a1\ufe0f Benutzer gibt Login nicht direkt auf deiner Seite ein</p>"},{"location":"Sicherheit/auth/#4-zwei-faktor-authentifizierung-2fa","title":"4. \ud83d\udcf1 Zwei-Faktor-Authentifizierung (2FA)","text":"<ul> <li>Kombiniert Passwort mit zus\u00e4tzlichem Faktor</li> <li>Einmalpasswort (OTP via App oder SMS)</li> <li>YubiKey oder \u00e4hnliches Hardware-Token</li> </ul> <p>Erh\u00f6ht Sicherheit drastisch!</p>"},{"location":"Sicherheit/auth/#authentifizierung-in-der-praxis","title":"\ud83e\uddea Authentifizierung in der Praxis","text":"Einsatzgebiet Typische Methode Web-Anwendungen Passwort, Token, OAuth Unternehmensnetzwerke Smartcards, AD-Login Mobile Apps Biometrie, Token, OAuth APIs API Key, JWT, HMAC, OAuth"},{"location":"Sicherheit/auth/#risiken-bei-authentifizierung","title":"\u26a0\ufe0f Risiken bei Authentifizierung","text":"<ul> <li>Phishing \u2013 gestohlene Login-Daten</li> <li>Brute-Force \u2013 automatisches Ausprobieren</li> <li>Credential Stuffing \u2013 Wiederverwendung gehackter Daten</li> <li>Man-in-the-Middle \u2013 Abh\u00f6ren unverschl\u00fcsselter Kommunikation</li> </ul> <p>\u2705 Ma\u00dfnahmen: - HTTPS \u00fcberall - Rate-Limiting - MFA - Session-Timeouts - Passwort-Richtlinien - Device Binding</p>"},{"location":"Sicherheit/auth/#passwort-management-tipps","title":"\ud83d\udd10 Passwort-Management-Tipps","text":"<ul> <li>Verwende lange, zuf\u00e4llige Passw\u00f6rter (mind. 12 Zeichen)</li> <li>Nutze einen Passwortmanager</li> <li>\u00c4ndere Passw\u00f6rter bei Datenlecks</li> <li>Kein Wiederverwenden von Passw\u00f6rtern</li> </ul>"},{"location":"Sicherheit/auth/#zusammenfassung","title":"\ud83e\udde0 Zusammenfassung","text":"Thema Wichtigster Punkt Ziel der Authentifizierung Nachweis der Identit\u00e4t Sichere Methoden MFA, Token, OAuth Risiken Phishing, Datenlecks, schwache Passw\u00f6rter Schutzma\u00dfnahmen HTTPS, Passwortmanager, 2FA, Session-Management"},{"location":"Sicherheit/cors/","title":"\ud83c\udf10 CORS \u2013 Cross-Origin Resource Sharing","text":"<p>CORS ist ein Sicherheitsmechanismus im Web, der kontrolliert, ob und wie Inhalte zwischen unterschiedlichen Urspr\u00fcngen (Domains) ausgetauscht werden d\u00fcrfen.</p>"},{"location":"Sicherheit/cors/#was-ist-ein-origin","title":"\ud83e\udde9 Was ist ein \u201eOrigin\u201c?","text":"<p>Ein Origin besteht aus:</p> <ul> <li>Protokoll (<code>http</code>, <code>https</code>)</li> <li>Domain (<code>example.com</code>)</li> <li>Port (<code>:80</code>, <code>:443</code>, etc.)</li> </ul> <p>\ud83d\udc49 Zwei Seiten mit unterschiedlichen Origins:</p> <pre><code>https://example.com       \u2260     http://example.com\nhttps://api.example.com   \u2260     https://example.com\n</code></pre>"},{"location":"Sicherheit/cors/#was-blockiert-cors","title":"\ud83d\udeab Was blockiert CORS?","text":"<p>Standardm\u00e4\u00dfig verbietet der Browser Webanwendungen, Anfragen an einen anderen Origin zu senden (z.\u202fB. von <code>meineseite.de</code> zu <code>api.fremddomain.de</code>), au\u00dfer der Zielserver erlaubt das explizit.</p> <p>Dies sch\u00fctzt den Benutzer vor Cross-Site-Scripting-Angriffen (XSS) und Session Hijacking.</p>"},{"location":"Sicherheit/cors/#wie-funktioniert-cors","title":"\u2705 Wie funktioniert CORS?","text":"<p>CORS funktioniert \u00fcber HTTP-Header. Wenn eine Webseite eine cross-origin-Anfrage stellt (z.\u202fB. per <code>fetch()</code>), dann pr\u00fcft der Browser:</p> <ol> <li>Was sagt der Zielserver?</li> <li>Gibt es den Header:</li> </ol> <pre><code>Access-Control-Allow-Origin: https://meineseite.de\n</code></pre> <ol> <li>Wenn ja \u2192 Anfrage erlaubt    Wenn nein \u2192 Anfrage geblockt durch den Browser</li> </ol>"},{"location":"Sicherheit/cors/#beispiel-erlaubte-anfrage","title":"\ud83d\udd27 Beispiel: Erlaubte Anfrage","text":"<pre><code>GET /daten\nHost: api.example.com\nOrigin: https://meineseite.de\n</code></pre> <p>Antwort:</p> <pre><code>Access-Control-Allow-Origin: https://meineseite.de\n</code></pre> <p>\u27a1\ufe0f Der Browser l\u00e4sst die Antwort durch.</p>"},{"location":"Sicherheit/cors/#beispiel-geblockte-anfrage","title":"\u274c Beispiel: Geblockte Anfrage","text":"<p>Wenn der Zielserver diesen Header nicht zur\u00fcckgibt, blockiert der Browser die Antwort \u2013 auch wenn die Anfrage technisch gesendet wurde.</p>"},{"location":"Sicherheit/cors/#preflight-anfrage-options","title":"\ud83d\udd04 Preflight-Anfrage (OPTIONS)","text":"<p>Bei \u201ekomplizierten\u201c Anfragen (z.\u202fB. <code>PUT</code>, <code>DELETE</code>, oder eigene Header) schickt der Browser vorher eine OPTIONS-Anfrage:</p> <pre><code>OPTIONS /api/benutzer\nOrigin: https://app.meinefirma.de\nAccess-Control-Request-Method: PUT\nAccess-Control-Request-Headers: Content-Type\n</code></pre> <p>\u27a1\ufe0f Erst wenn der Server darauf antwortet mit:</p> <pre><code>Access-Control-Allow-Origin: https://app.meinefirma.de\nAccess-Control-Allow-Methods: PUT\nAccess-Control-Allow-Headers: Content-Type\n</code></pre> <p>\u2026wird die eigentliche Anfrage ausgef\u00fchrt.</p>"},{"location":"Sicherheit/cors/#wichtige-cors-header","title":"\ud83d\udce6 Wichtige CORS-Header","text":"Header Bedeutung <code>Access-Control-Allow-Origin</code> Wer darf zugreifen? (<code>*</code> = alle) <code>Access-Control-Allow-Methods</code> Welche Methoden sind erlaubt? (<code>GET</code>, <code>POST</code>, <code>PUT</code>, ...) <code>Access-Control-Allow-Headers</code> Welche Header d\u00fcrfen gesendet werden? <code>Access-Control-Allow-Credentials</code> D\u00fcrfen Cookies/Mitglieder-Infos gesendet werden? <code>Access-Control-Expose-Headers</code> Welche Response-Header d\u00fcrfen sichtbar sein?"},{"location":"Sicherheit/cors/#fetch-mit-cors","title":"\u2699\ufe0f <code>fetch()</code> mit CORS","text":""},{"location":"Sicherheit/cors/#einfache-anfrage","title":"Einfache Anfrage:","text":"<pre><code>fetch(\"https://api.fremdseite.de/daten\")\n  .then(res =&gt; res.json())\n  .then(data =&gt; console.log(data));\n</code></pre>"},{"location":"Sicherheit/cors/#mit-credentials-cookies-etc","title":"Mit Credentials (Cookies etc.):","text":"<pre><code>fetch(\"https://api.fremdseite.de/daten\", {\n  credentials: \"include\"\n});\n</code></pre> <p>\u27a1\ufe0f Server muss dann auch <code>Access-Control-Allow-Credentials: true</code> setzen.</p>"},{"location":"Sicherheit/cors/#tipps-zur-konfiguration","title":"\ud83d\udee0 Tipps zur Konfiguration","text":""},{"location":"Sicherheit/cors/#server-muss-aktiv-cors-erlauben","title":"\u2705 Server muss aktiv CORS erlauben:","text":""},{"location":"Sicherheit/cors/#nodejs-express","title":"Node.js (Express):","text":"<pre><code>const cors = require('cors');\napp.use(cors({ origin: \"https://meineseite.de\" }));\n</code></pre>"},{"location":"Sicherheit/cors/#php","title":"PHP:","text":"<pre><code>header(\"Access-Control-Allow-Origin: https://meineseite.de\");\n</code></pre>"},{"location":"Sicherheit/cors/#apache-htaccess","title":"Apache (<code>.htaccess</code>):","text":"<pre><code>Header set Access-Control-Allow-Origin \"*\"\n</code></pre>"},{"location":"Sicherheit/cors/#sicherheitshinweis","title":"\ud83d\udd10 Sicherheitshinweis","text":"<ul> <li>Niemals einfach <code>Access-Control-Allow-Origin: *</code> UND <code>credentials: true</code> kombinieren!</li> <li>\u00d6ffne deine API nur gezielt f\u00fcr vertrauensw\u00fcrdige Domains.</li> <li>CORS sch\u00fctzt nur den Browser-Nutzer, nicht den Server!</li> </ul>"},{"location":"Sicherheit/cors/#zusammenfassung","title":"\u2705 Zusammenfassung","text":"Thema Erkl\u00e4rung CORS Kontrolliert Zugriff zwischen Domains Origin Kombination aus Protokoll, Domain, Port Warum? Schutz vor unerlaubtem Zugriff / Cross-Origin-Hacking Wer muss handeln? Immer der Server \u2013 nicht der Client! Was ist n\u00f6tig? Korrekte HTTP-Header (<code>Access-Control-*</code>) <p>\ud83d\udcd8 Tipp: CORS-Fehler erscheinen nur im Browser \u2013 in Tools wie Postman funktioniert alles trotzdem!</p>"},{"location":"Sicherheit/csrf/","title":"\ud83d\udee1\ufe0f CSRF \u2013 Cross-Site Request Forgery","text":"<p>CSRF (deutsch: Website-\u00fcbergreifende Anfragenf\u00e4lschung) ist eine Sicherheitsl\u00fccke, bei der ein Angreifer eine unbefugte Aktion im Namen eines eingeloggten Nutzers auf einer vertrauensw\u00fcrdigen Webseite ausl\u00f6st.</p>"},{"location":"Sicherheit/csrf/#was-passiert-bei-einem-csrf-angriff","title":"\ud83e\udde9 Was passiert bei einem CSRF-Angriff?","text":"<ol> <li>Ein Benutzer ist z.\u202fB. bei <code>meinebank.de</code> eingeloggt.</li> <li>Der Angreifer bringt ihn dazu, unbemerkt eine Anfrage an <code>meinebank.de</code> auszul\u00f6sen \u2013 z.\u202fB. durch ein -Tag, Formular oder JavaScript.</li> <li>Die Anfrage enth\u00e4lt g\u00fcltige Cookies oder Tokens, weil der Browser diese automatisch mitsendet.</li> <li>Die Bank f\u00fchrt die Aktion aus, ohne zu wissen, dass sie vom Angreifer stammt.</li> </ol>"},{"location":"Sicherheit/csrf/#beispiel-kontostand-manipulieren","title":"\u26a0\ufe0f Beispiel: Kontostand manipulieren","text":"<pre><code>&lt;!-- In einem sch\u00e4dlichen Blogartikel eingebaut: --&gt;\n&lt;img src=\"https://meinebank.de/ueberweisung?betrag=1000&amp;ziel=angreifer\" /&gt;\n</code></pre> <p>Wenn der Nutzer bei <code>meinebank.de</code> eingeloggt ist, k\u00f6nnte das Geld \u00fcberwiesen werden, ohne dass er etwas merkt!</p>"},{"location":"Sicherheit/csrf/#wie-verhindert-man-csrf","title":"\ud83d\udee0\ufe0f Wie verhindert man CSRF?","text":""},{"location":"Sicherheit/csrf/#1-csrf-tokens-synchronizer-token-pattern","title":"\u2705 1. CSRF-Tokens (Synchronizer Token Pattern)","text":"<ul> <li>Server generiert einen zuf\u00e4lligen, eindeutigen Token</li> <li>Token wird mit jeder Anfrage (z.\u202fB. POST-Formular) mitgeschickt</li> <li>Server pr\u00fcft: ist der Token g\u00fcltig?</li> </ul> <pre><code>&lt;form action=\"/profil\" method=\"post\"&gt;\n  &lt;input type=\"hidden\" name=\"csrf_token\" value=\"xyz123abc\" /&gt;\n  &lt;input type=\"text\" name=\"name\" /&gt;\n  &lt;button type=\"submit\"&gt;Speichern&lt;/button&gt;\n&lt;/form&gt;\n</code></pre> <p>\u27a1\ufe0f Token muss bei jeder Sitzung neu erzeugt werden.</p>"},{"location":"Sicherheit/csrf/#2-samesite-cookies","title":"\u2705 2. SameSite-Cookies","text":"<pre><code>Set-Cookie: sessionid=abc123; SameSite=Strict\n</code></pre> <ul> <li><code>SameSite=Strict</code>: Cookie wird nicht bei Cross-Site-Requests gesendet</li> <li><code>SameSite=Lax</code>: Nur bei einfachen GETs gesendet</li> <li><code>SameSite=None</code>: Nur mit <code>Secure</code>, wird bei allen Anfragen gesendet</li> </ul> <p>\u27a1\ufe0f Browserseitige Verteidigung \u2013 sehr effektiv bei modernen Browsern.</p>"},{"location":"Sicherheit/csrf/#3-vermeide-zustandsverandernde-get-anfragen","title":"\u2705 3. Vermeide zustandsver\u00e4ndernde GET-Anfragen","text":"<ul> <li>Verwende nur POST, PUT oder DELETE f\u00fcr Aktionen wie:</li> <li>Einstellungen \u00e4ndern</li> <li>Daten l\u00f6schen</li> <li>\u00dcberweisungen durchf\u00fchren</li> </ul>"},{"location":"Sicherheit/csrf/#4-token-in-http-header-statt-in-cookies","title":"\u2705 4. Token in HTTP-Header statt in Cookies","text":"<ul> <li>Bei APIs: Authentifizierung via Header (<code>Authorization</code>) statt via Cookie</li> <li>So werden keine sensiblen Daten automatisch vom Browser mitgesendet</li> </ul>"},{"location":"Sicherheit/csrf/#sicherheitsprinzip-origin-referer-prufen","title":"\ud83e\uddea Sicherheitsprinzip: Origin &amp; Referer pr\u00fcfen","text":"<p>Ein Server kann den <code>Origin</code> oder <code>Referer</code> Header pr\u00fcfen:</p> <pre><code>Origin: https://meineseite.de\n</code></pre> <p>\u27a1\ufe0f Stimmt dieser nicht mit der erwarteten Domain \u00fcberein, wird die Anfrage abgelehnt.</p>"},{"location":"Sicherheit/csrf/#was-schutzt-nicht-gegen-csrf","title":"\u274c Was sch\u00fctzt nicht gegen CSRF?","text":"Ma\u00dfnahme Warum nicht sicher? CAPTCHA H\u00e4lt Bots auf \u2013 nicht echte Benutzer mit g\u00fcltigen Cookies Session-Cookies Werden automatisch gesendet \u2013 das ist das Problem Nur POST-Methoden CSRF funktioniert auch mit POST (nicht GET ist besser!) CORS Sch\u00fctzt nur Inhalte, nicht Aktionen per POST"},{"location":"Sicherheit/csrf/#zusammenfassung","title":"\u2705 Zusammenfassung","text":"Thema Erkl\u00e4rung Was ist CSRF? Fremde Seite zwingt Nutzer zu unerw\u00fcnschter Aktion Wie funktioniert es? Automatische Cookie-Weitergabe bei eingeloggten Nutzern Schutzma\u00dfnahmen CSRF-Tokens, SameSite-Cookies, Header-Pr\u00fcfung Gute Praxis Immer serverseitige Validierung implementieren <p>\ud83d\udd10 Moderne Frameworks (z.\u202fB. Django, Laravel, Spring) haben CSRF-Schutz bereits integriert \u2013 aber nur, wenn richtig genutzt!</p> <p>\ud83d\udcd8 Siehe auch: OWASP CSRF Guide</p>"},{"location":"Sicherheit/https/","title":"\ud83d\udd12 HTTPS \u2013 Hypertext Transfer Protocol Secure","text":"<p>HTTPS ist die sichere Version von HTTP, dem Protokoll, \u00fcber das Webseiten mit deinem Browser kommunizieren. Das \"S\" steht f\u00fcr Secure \u2013 also verschl\u00fcsselte und vertrauensw\u00fcrdige Daten\u00fcbertragung.</p>"},{"location":"Sicherheit/https/#was-ist-https","title":"\ud83e\udde9 Was ist HTTPS?","text":"<p>HTTPS kombiniert HTTP mit SSL/TLS-Verschl\u00fcsselung (Secure Sockets Layer / Transport Layer Security). Es sorgt daf\u00fcr, dass Daten verschl\u00fcsselt, authentifiziert und vor Manipulation gesch\u00fctzt \u00fcbertragen werden.</p> <p>\u27a1\ufe0f Ohne HTTPS kann jede Anfrage im Klartext mitgelesen oder ver\u00e4ndert werden \u2013 z.\u202fB. von Angreifern im WLAN, Internetanbietern oder Proxy-Servern.</p>"},{"location":"Sicherheit/https/#warum-ist-https-wichtig","title":"\ud83d\udd10 Warum ist HTTPS wichtig?","text":"Vorteil Erkl\u00e4rung \ud83d\udd12 Verschl\u00fcsselung Niemand kann Daten unterwegs einsehen (z.\u202fB. Passw\u00f6rter, Formulare, etc.) \u2705 Authentifizierung Sicherheit, dass man mit dem \u201eechten\u201c Server spricht \ud83d\udee1 Integrit\u00e4t Schutz vor Manipulation unterwegs \ud83c\udf0d Vertrauensw\u00fcrdigkeit Moderne Browser zeigen Warnungen bei HTTP-Seiten \ud83d\udcc8 SEO-Vorteil Google bevorzugt HTTPS-Webseiten im Ranking"},{"location":"Sicherheit/https/#wie-funktioniert-https","title":"\ud83d\udd27 Wie funktioniert HTTPS?","text":"<ol> <li> <p>Verbindungsaufbau (Handshake):</p> </li> <li> <p>Browser stellt Verbindung zum Server her</p> </li> <li>Server sendet ein SSL-Zertifikat</li> <li>Browser pr\u00fcft: Ist das Zertifikat g\u00fcltig?</li> <li> <p>Danach wird ein Schl\u00fcssel f\u00fcr die Verschl\u00fcsselung ausgetauscht</p> </li> <li> <p>Daten\u00fcbertragung:</p> </li> <li> <p>Alle folgenden Daten sind verschl\u00fcsselt</p> </li> <li>Selbst bei \u201eMan-in-the-Middle\u201c-Angriffen k\u00f6nnen Inhalte nicht gelesen werden</li> </ol>"},{"location":"Sicherheit/https/#was-ist-ein-ssl-tls-zertifikat","title":"\ud83d\udcdc Was ist ein SSL-/TLS-Zertifikat?","text":"<p>Ein Zertifikat:</p> <ul> <li>best\u00e4tigt die Identit\u00e4t des Servers (Domain)</li> <li>enth\u00e4lt einen \u00f6ffentlichen Schl\u00fcssel</li> <li>wird von einer Zertifizierungsstelle (CA) ausgestellt (z.\u202fB. Let's Encrypt, DigiCert)</li> </ul>"},{"location":"Sicherheit/https/#aufbau","title":"Aufbau:","text":"<pre><code>Zertifikat f\u00fcr: www.example.com\nAusgestellt von: Let's Encrypt\nG\u00fcltig bis: 20.12.2025\nSchl\u00fcssel: (RSA/ECDSA Public Key)\n</code></pre>"},{"location":"Sicherheit/https/#https-in-der-praxis","title":"\ud83e\uddea HTTPS in der Praxis","text":"<ul> <li>URL beginnt mit <code>https://</code></li> <li>\ud83d\udd12 Symbol in der Adresszeile</li> <li>Auf Mobilger\u00e4ten meist durch ein Schloss-Symbol erkennbar</li> </ul>"},{"location":"Sicherheit/https/#http-vs-https","title":"\ud83d\udea7 HTTP vs. HTTPS","text":"Eigenschaft HTTP HTTPS Verschl\u00fcsselung \u274c Nein \u2705 Ja Daten sichtbar? \u2705 Ja \u2013 Klartext \u274c Nein \u2013 nur der Server kann lesen Sicherheit \u274c Unsicher \u2705 Sicher Verwendung Veraltet Standard seit Jahren Browser-Warnung \u274c Keine (fr\u00fcher) \u26a0\ufe0f Warnung bei fehlendem HTTPS"},{"location":"Sicherheit/https/#https-einrichten-beispiel-mit-lets-encrypt","title":"\ud83d\udce6 HTTPS einrichten (Beispiel: mit Let's Encrypt)","text":""},{"location":"Sicherheit/https/#1-ssl-zertifikat-kostenlos-anfordern","title":"1. SSL-Zertifikat kostenlos anfordern:","text":"<pre><code>sudo certbot --nginx -d example.com\n</code></pre>"},{"location":"Sicherheit/https/#2-nginx-konfiguration-anpassen","title":"2. NGINX-Konfiguration anpassen:","text":"<pre><code>server {\n  listen 443 ssl;\n  ssl_certificate /etc/letsencrypt/live/example.com/fullchain.pem;\n  ssl_certificate_key /etc/letsencrypt/live/example.com/privkey.pem;\n\n  location / {\n    proxy_pass http://localhost:3000;\n  }\n}\n</code></pre>"},{"location":"Sicherheit/https/#3-automatische-verlangerung-aktivieren","title":"3. Automatische Verl\u00e4ngerung aktivieren:","text":"<pre><code>sudo certbot renew --dry-run\n</code></pre>"},{"location":"Sicherheit/https/#https-in-webentwicklung-apis","title":"\ud83d\udd10 HTTPS in Webentwicklung &amp; APIs","text":"<ul> <li>Fetch / AJAX / REST APIs: sollten immer HTTPS nutzen</li> <li>Cookies mit <code>Secure</code>-Attribut werden nur per HTTPS \u00fcbertragen</li> <li><code>SameSite=None</code> Cookies m\u00fcssen <code>Secure</code> sein!</li> <li>Bei Login-Formularen oder Zahlungsdaten: HTTPS ist Pflicht</li> </ul>"},{"location":"Sicherheit/https/#typische-https-fehler","title":"\u2757 Typische HTTPS-Fehler","text":"Problem L\u00f6sung \u274c Zertifikat abgelaufen Zertifikat neu generieren \u26a0\ufe0f Zertifikat nicht vertrauensw\u00fcrdig Nur Zertifikate von offiziellen CAs nutzen \ud83d\udd01 Mixed Content (Bilder, JS via HTTP) Alle Ressourcen per HTTPS einbinden \ud83d\udd01 Weiterleitung fehlt Weiterleitung von HTTP \u2192 HTTPS einrichten (301-Redirect)"},{"location":"Sicherheit/https/#fazit","title":"\ud83d\udcd8 Fazit","text":"<p>HTTPS ist heute unverzichtbar:</p> <ul> <li>F\u00fcr Vertrauen, Sicherheit, Datenschutz</li> <li>Pflicht f\u00fcr Login-Seiten, Formulare und APIs</li> <li>Wird von Browsern, Google &amp; Nutzern erwartet</li> </ul> <p>\ud83d\udca1 HTTPS sollte standardm\u00e4\u00dfig aktiv sein \u2013 und nicht als \u201eZusatz\u201c behandelt werden!</p>"},{"location":"Sicherheit/https/#weiterfuhrende-links","title":"\ud83d\udd17 Weiterf\u00fchrende Links","text":"<ul> <li>Let\u2019s Encrypt</li> <li>Mozilla TLS-Konfig-Generator</li> <li>Google HTTPS Guidelines</li> </ul>"},{"location":"Sicherheit/xss/","title":"\u26a0\ufe0f XSS \u2013 Cross-Site Scripting","text":"<p>XSS (Cross-Site Scripting) ist eine der h\u00e4ufigsten Sicherheitsl\u00fccken im Web. Dabei gelingt es Angreifern, sch\u00e4dlichen JavaScript-Code in eine Webseite einzuschleusen, der dann im Browser anderer Nutzer ausgef\u00fchrt wird.</p>"},{"location":"Sicherheit/xss/#was-ist-das-ziel-eines-xss-angriffs","title":"\ud83e\udde9 Was ist das Ziel eines XSS-Angriffs?","text":"<ul> <li>Zugriff auf Cookies, Session-Daten oder Tokens</li> <li>Phishing-Formulare einf\u00fcgen</li> <li>Benutzereingaben manipulieren</li> <li>JavaScript-Befehle im Kontext des Opfers ausf\u00fchren</li> <li>Weiterleitung zu gef\u00e4lschten Webseiten</li> </ul>"},{"location":"Sicherheit/xss/#einfaches-beispiel","title":"\ud83e\uddea Einfaches Beispiel","text":"<p>Angreifer speichert folgenden Code in einem Eingabefeld:</p> <pre><code>&lt;script&gt;alert('XSS-Angriff!');&lt;/script&gt;\n</code></pre> <p>Wenn dieser Code ungefiltert auf einer Webseite angezeigt wird, f\u00fchrt der Browser ihn aus \u2013 als w\u00e4re es legitimer Code der Seite.</p>"},{"location":"Sicherheit/xss/#arten-von-xss","title":"\ud83d\udea8 Arten von XSS","text":""},{"location":"Sicherheit/xss/#1-stored-xss-gespeichert","title":"1. Stored XSS (Gespeichert)","text":"<ul> <li>Sch\u00e4dlicher Code wird permanenter Teil der Webseite (z.\u202fB. durch Kommentare, Profile, Nachrichten)</li> <li>Jeder Nutzer sieht den eingeschleusten Code</li> </ul> <p>\ud83d\udc49 Am gef\u00e4hrlichsten!</p>"},{"location":"Sicherheit/xss/#2-reflected-xss-zuruckgespiegelt","title":"2. Reflected XSS (Zur\u00fcckgespiegelt)","text":"<ul> <li>Angriffscode wird per URL eingeschleust und direkt in die Antwort eingebaut</li> <li>Benutzer wird z.\u202fB. durch Link oder E-Mail dazu verleitet, die URL aufzurufen</li> </ul> <p>Beispiel-URL:</p> <pre><code>https://example.com/suche?q=&lt;script&gt;alert('XSS')&lt;/script&gt;\n</code></pre>"},{"location":"Sicherheit/xss/#3-dom-based-xss","title":"3. DOM-Based XSS","text":"<ul> <li>XSS entsteht ausschlie\u00dflich im JavaScript im Browser (nicht im Server-HTML)</li> <li>JavaScript verwendet unsichere Datenquellen wie <code>location.hash</code> oder <code>document.referrer</code></li> </ul> <p>Beispiel:</p> <pre><code>document.body.innerHTML = location.hash;\n</code></pre> <p>Aufruf:</p> <pre><code>https://example.com/#&lt;script&gt;alert('XSS')&lt;/script&gt;\n</code></pre>"},{"location":"Sicherheit/xss/#schutzmanahmen-gegen-xss","title":"\ud83d\udd27 Schutzma\u00dfnahmen gegen XSS","text":""},{"location":"Sicherheit/xss/#1-html-escapen","title":"\u2705 1. HTML escapen","text":"<ul> <li>Wandelt Sonderzeichen wie <code>&lt;</code>, <code>&gt;</code>, <code>\"</code>, <code>'</code> in HTML-Entities um:</li> </ul> Zeichen Escaped <code>&lt;</code> <code>&amp;lt;</code> <code>&gt;</code> <code>&amp;gt;</code> <code>\"</code> <code>&amp;quot;</code> <code>'</code> <code>&amp;#x27;</code> <p>\u27a1\ufe0f Nie direkt Benutzereingaben in HTML einf\u00fcgen ohne Escaping!</p>"},{"location":"Sicherheit/xss/#2-content-security-policy-csp","title":"\u2705 2. Content Security Policy (CSP)","text":"<ul> <li>Verhindert inline-Skripte und blockiert schadhafte Domains</li> </ul> <pre><code>Content-Security-Policy: default-src 'self';\n</code></pre> <p>\u27a1\ufe0f Browser blockiert JavaScript von nicht autorisierten Quellen</p>"},{"location":"Sicherheit/xss/#3-keine-innerhtml-nur-textcontent","title":"\u2705 3. Keine <code>innerHTML</code>, nur <code>textContent</code>","text":"<pre><code>// \u274c Unsicher\nelement.innerHTML = userInput;\n\n// \u2705 Sicher\nelement.textContent = userInput;\n</code></pre>"},{"location":"Sicherheit/xss/#4-eingabefilterung-whitelisting","title":"\u2705 4. Eingabefilterung &amp; Whitelisting","text":"<ul> <li>Eingaben nur erlauben, wenn sie bestimmten Formaten entsprechen (z.\u202fB. nur Buchstaben)</li> <li>Blacklisting ist unsicher! Angreifer finden Umgehungsm\u00f6glichkeiten</li> </ul>"},{"location":"Sicherheit/xss/#5-frameworks-richtig-nutzen","title":"\u2705 5. Frameworks richtig nutzen","text":"<p>Frameworks wie React, Vue oder Angular:</p> <ul> <li>Escapen automatisch Inhalte</li> <li>Verwenden virtuelle DOMs</li> <li>\u2728 Achtung: Direktives HTML (<code>v-html</code>, <code>dangerouslySetInnerHTML</code>) ist gef\u00e4hrlich!</li> </ul>"},{"location":"Sicherheit/xss/#was-schutzt-nicht-gegen-xss","title":"\u274c Was sch\u00fctzt nicht gegen XSS?","text":"Methode Warum nicht ausreichend? HTTPS Sch\u00fctzt nur \u00dcbertragung, nicht Inhalt Server-Schutz (z.\u202fB. .htaccess) Sch\u00fctzt nicht vor clientseitiger Ausf\u00fchrung Nur POST verwenden XSS kann auch \u00fcber POST eingeschleust werden"},{"location":"Sicherheit/xss/#beispiel-fur-sicheren-umgang","title":"\ud83e\uddea Beispiel f\u00fcr sicheren Umgang","text":"<pre><code>&lt;!-- Unsicher --&gt;\n&lt;div id=\"ausgabe\"&gt;&lt;/div&gt;\n\n&lt;script&gt;\n  const userInput = \"&lt;script&gt;alert('XSS')&lt;/script&gt;\";\n  document.getElementById(\"ausgabe\").innerHTML = userInput; // \u274c\n&lt;/script&gt;\n</code></pre> <pre><code>&lt;!-- Sicher --&gt;\n&lt;div id=\"ausgabe\"&gt;&lt;/div&gt;\n\n&lt;script&gt;\n  const userInput = \"&lt;script&gt;alert('XSS')&lt;/script&gt;\";\n  document.getElementById(\"ausgabe\").textContent = userInput; // \u2705\n&lt;/script&gt;\n</code></pre>"},{"location":"Sicherheit/xss/#fazit","title":"\ud83d\udcd8 Fazit","text":"Thema Erkl\u00e4rung Was ist XSS? Schadcode wird durch Nutzer in Webseiten eingeschleust Arten Stored, Reflected, DOM-based Schutz Escaping, CSP, sicheres DOM-Handling, Frameworks nutzen Wichtig! Jede Benutzereingabe ist potenziell gef\u00e4hrlich!"},{"location":"Sicherheit/xss/#weitere-ressourcen","title":"\ud83d\udd17 Weitere Ressourcen","text":"<ul> <li>OWASP XSS Cheat Sheet</li> <li>MDN \u2013 Cross-site scripting</li> </ul> <p>\ud83e\udde0 Tipp: XSS ist die h\u00e4ufigste Schwachstelle im Web \u2013 nimm sie ernst!</p>"},{"location":"css/box-modell/","title":"\ud83d\udce6 CSS Box-Modell \u2013 Aufbau jedes HTML-Elements","text":""},{"location":"css/box-modell/#was-ist-das-box-modell","title":"\ud83e\udde9 Was ist das Box-Modell?","text":"<p>Im CSS-Box-Modell wird jedes HTML-Element als ein Rechteck behandelt, das aus vier Schichten besteht:</p> <pre><code>+----------------------------+\n|       margin (au\u00dfen)      |\n|  +----------------------+  |\n|  |   border (Rand)      |  |\n|  |  +----------------+  |  |\n|  |  | padding (Innen) |  |  |\n|  |  | +------------+ |  |  |\n|  |  | |  content   | |  |  |\n|  |  | +------------+ |  |  |\n|  |  +----------------+  |  |\n|  +----------------------+  |\n+----------------------------+\n</code></pre> <p>Diese Struktur bestimmt, wie viel Platz ein Element einnimmt und wie es mit anderen Elementen interagiert.</p>"},{"location":"css/box-modell/#die-4-bereiche-im-detail","title":"\ud83d\udcd0 Die 4 Bereiche im Detail","text":""},{"location":"css/box-modell/#1-content-inhalt","title":"1. <code>content</code> \u2013 Inhalt","text":"<ul> <li>Der eigentliche Text, Bild oder Inhalt des Elements</li> <li>Breite und H\u00f6he werden per <code>width</code> und <code>height</code> definiert</li> </ul>"},{"location":"css/box-modell/#2-padding-innenabstand","title":"2. <code>padding</code> \u2013 Innenabstand","text":"<ul> <li>Abstand zwischen Inhalt und Rahmen</li> <li>Vergr\u00f6\u00dfert die \"Polsterung\" rund um den Inhalt</li> </ul> <pre><code>padding: 10px;\n</code></pre>"},{"location":"css/box-modell/#3-border-rahmen","title":"3. <code>border</code> \u2013 Rahmen","text":"<ul> <li>Linie um das Element, kann in Breite, Stil und Farbe angepasst werden</li> </ul> <pre><code>border: 2px solid black;\n</code></pre>"},{"location":"css/box-modell/#4-margin-auenabstand","title":"4. <code>margin</code> \u2013 Au\u00dfenabstand","text":"<ul> <li>Abstand zum n\u00e4chsten Element</li> <li>Verhindert \u00dcberlappung, erzeugt Wei\u00dfraum au\u00dfen herum</li> </ul> <pre><code>margin: 20px;\n</code></pre>"},{"location":"css/box-modell/#beispiel","title":"\ud83c\udfaf Beispiel","text":"<pre><code>&lt;div class=\"box\"&gt;Hallo Box&lt;/div&gt;\n</code></pre> <pre><code>.box {\n  width: 200px;\n  height: 100px;\n  padding: 10px;\n  border: 5px solid #007acc;\n  margin: 20px;\n}\n</code></pre> <p>Gesamtabmessung (ohne <code>box-sizing</code>):</p> <pre><code>Breite = 200 + 10*2 (Padding) + 5*2 (Border) = 230px\nH\u00f6he   = 100 + 10*2 + 5*2 = 130px\n</code></pre>"},{"location":"css/box-modell/#box-sizing-steuern","title":"\u2699\ufe0f <code>box-sizing</code> steuern","text":""},{"location":"css/box-modell/#standard-content-box","title":"Standard: <code>content-box</code>","text":"<pre><code>box-sizing: content-box;\n</code></pre> <ul> <li><code>width</code>/<code>height</code> gelten nur f\u00fcr den <code>content</code> </li> <li>Padding + Border kommen oben drauf</li> </ul>"},{"location":"css/box-modell/#modern-border-box-empfohlen","title":"Modern: <code>border-box</code> \u2705 empfohlen","text":"<pre><code>box-sizing: border-box;\n</code></pre> <ul> <li><code>width</code>/<code>height</code> beinhalten content + padding + border</li> <li>Einfacher zu kalkulieren &amp; responsive-friendly</li> </ul> <pre><code>*, *::before, *::after {\n  box-sizing: border-box;\n}\n</code></pre>"},{"location":"css/box-modell/#kurzform-syntax","title":"\ud83d\udd0d Kurzform-Syntax","text":"Eigenschaft Kurzform Beispiel <code>margin</code> <code>margin: 10px 20px;</code> oben/unten + rechts/links <code>padding</code> <code>padding: 5px 15px;</code> oben/unten + rechts/links <code>border</code> <code>border: 1px solid #333;</code> Stil in einem Zug"},{"location":"css/box-modell/#visualisierung-per-browser-devtools","title":"\ud83c\udfa8 Visualisierung per Browser-Devtools","text":"<ul> <li>In Chrome/Firefox: Rechtsklick \u2192 \"Element untersuchen\"</li> <li>In der Box-Modell-Ansicht lassen sich margin, padding, border live beobachten</li> </ul>"},{"location":"css/box-modell/#haufige-fehler","title":"\u274c H\u00e4ufige Fehler","text":"Fehler Empfehlung <code>width</code> ignoriert Padding/Border Nutze <code>box-sizing: border-box</code> Negative <code>margin</code> unerwartet Pr\u00fcfe Layout-Kontext Kein Platz durch 0 <code>padding</code>/<code>margin</code> Immer etwas \"Luft\" einkalkulieren"},{"location":"css/box-modell/#fazit","title":"\ud83d\udcda Fazit","text":"<p>Das Box-Modell ist eine der wichtigsten Grundlagen in CSS. Es bestimmt, wie ein Element gemessen, dargestellt und positioniert wird \u2013 egal ob Button, Container oder Bild.</p>"},{"location":"css/cheatsheet/","title":"\ud83e\uddfe CSS Cheatsheet XXL \u2013 Die ultimative Referenz","text":"<p>Ein vollst\u00e4ndiger \u00dcberblick \u00fcber essentielle und fortgeschrittene CSS-Techniken. Ideal f\u00fcr alle, die produktiv, effizient und professionell gestalten wollen.</p>"},{"location":"css/cheatsheet/#farben-hintergrunde","title":"\ud83c\udfa8 Farben &amp; Hintergr\u00fcnde","text":"Eigenschaft Beispiel <code>color</code> <code>#333</code>, <code>rgb(255, 0, 0)</code>, <code>hsl(0, 50%, 50%)</code> <code>background-color</code> <code>transparent</code>, <code>rgba(0,0,0,0.5)</code> <code>background-image</code> <code>url(\"bild.jpg\")</code>, <code>linear-gradient(...)</code> <code>background-size</code> <code>cover</code>, <code>contain</code>, <code>100% 100%</code> <code>background-position</code> <code>center</code>, <code>top left</code>, <code>50% 50%</code> <code>background-attachment</code> <code>fixed</code>, <code>scroll</code> <code>filter</code> <code>blur(3px)</code>, <code>contrast(120%)</code>, <code>drop-shadow(...)</code>"},{"location":"css/cheatsheet/#schrift-text","title":"\ud83d\udd24 Schrift &amp; Text","text":"Eigenschaft Beispiel <code>font-family</code> <code>\"Open Sans\", sans-serif</code> <code>font-size</code> <code>1rem</code>, <code>clamp(1rem, 4vw, 2rem)</code> <code>font-weight</code> <code>normal</code>, <code>bold</code>, <code>lighter</code>, <code>900</code> <code>font-style</code> <code>italic</code>, <code>oblique</code> <code>letter-spacing</code> <code>0.1em</code>, <code>-0.02em</code> <code>line-height</code> <code>1.5</code>, <code>120%</code> <code>text-align</code> <code>justify</code>, <code>center</code>, <code>right</code> <code>text-decoration</code> <code>underline</code>, <code>line-through</code> <code>text-shadow</code> <code>2px 2px 4px #aaa</code>"},{"location":"css/cheatsheet/#selektoren-css-logik","title":"\ud83e\udde9 Selektoren (CSS-Logik)","text":"Selektor Bedeutung <code>*</code> alles <code>#id</code> Element mit ID <code>.klasse</code> alle mit Klasse <code>element</code> alle Elemente dieses Typs <code>div &gt; p</code> direkte Kind-Elemente <code>ul li</code> alle Nachfahren <code>div + p</code> direktes Geschwisterelement <code>input[type=\"text\"]</code> Attributselektor <code>:not(.hide)</code> Negierung"},{"location":"css/cheatsheet/#pseudo-klassen-elemente","title":"\ud83d\udd00 Pseudo-Klassen &amp; -Elemente","text":"Typ Beispiel <code>:hover</code> bei Mouseover <code>:focus</code> bei aktiver Eingabe <code>:first-child</code> erstes Kind <code>:last-of-type</code> letztes Element dieses Typs <code>::before</code> / <code>::after</code> Inhalte einf\u00fcgen <code>:nth-child(n)</code> gezielter Index"},{"location":"css/cheatsheet/#box-modell-layout","title":"\ud83d\udce6 Box-Modell &amp; Layout","text":"Eigenschaft Beispiel <code>width</code>, <code>height</code> <code>auto</code>, <code>100%</code>, <code>10rem</code> <code>margin</code>, <code>padding</code> <code>margin: 1rem 2rem;</code> <code>border</code> <code>2px solid red</code> <code>box-sizing</code> <code>border-box</code> <code>outline</code> <code>2px dotted red</code> <code>overflow</code> <code>hidden</code>, <code>scroll</code>, <code>auto</code>"},{"location":"css/cheatsheet/#position-display","title":"\ud83d\udcd0 Position &amp; Display","text":"Typ Eigenschaften <code>position</code> <code>static</code>, <code>relative</code>, <code>absolute</code>, <code>fixed</code>, <code>sticky</code> <code>top</code>, <code>right</code> etc. bei positionierten Elementen <code>z-index</code> Stapelreihenfolge <code>display</code> <code>block</code>, <code>inline</code>, <code>flex</code>, <code>grid</code>, <code>none</code>, <code>inline-flex</code> <code>visibility</code> <code>hidden</code>, <code>visible</code>, <code>collapse</code> <code>pointer-events</code> <code>none</code>, <code>auto</code>"},{"location":"css/cheatsheet/#grid-flexbox","title":"\ud83e\uddf1 Grid &amp; Flexbox","text":""},{"location":"css/cheatsheet/#flexbox-1d-layoutsystem","title":"\ud83d\udccf Flexbox \u2013 1D Layoutsystem","text":"Eigenschaft Beispiel <code>display</code> <code>flex</code> <code>flex-direction</code> <code>row</code>, <code>column</code>, <code>row-reverse</code> <code>justify-content</code> <code>flex-start</code>, <code>center</code>, <code>space-between</code>, <code>space-around</code>, <code>space-evenly</code> <code>align-items</code> <code>stretch</code>, <code>center</code>, <code>flex-start</code>, <code>flex-end</code>, <code>baseline</code> <code>align-content</code> F\u00fcr mehrzeilige Container <code>flex-wrap</code> <code>wrap</code>, <code>nowrap</code>, <code>wrap-reverse</code> <code>flex</code> <code>1</code>, <code>2 1 100px</code> (grow, shrink, basis) <code>order</code> <code>1</code>, <code>-1</code> (Reihenfolge \u00e4ndern) <code>gap</code> <code>gap: 1rem;</code>"},{"location":"css/cheatsheet/#flexbox-beispiel","title":"\ud83e\uddea Flexbox Beispiel","text":"<pre><code>.container {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  gap: 1rem;\n}\n.item {\n  flex: 1 1 200px;\n}\n</code></pre>"},{"location":"css/cheatsheet/#css-grid-2d-layoutsystem","title":"\ud83d\udcd0 CSS Grid \u2013 2D Layoutsystem","text":"Eigenschaft Beispiel <code>display</code> <code>grid</code> <code>grid-template-columns</code> <code>repeat(3, 1fr)</code>, <code>200px auto 1fr</code> <code>grid-template-rows</code> <code>auto</code>, <code>100px auto 1fr</code> <code>grid-column</code>, <code>grid-row</code> <code>1 / 3</code>, <code>2 / span 2</code> <code>grid-area</code> benannte Bereiche <code>gap</code> / <code>row-gap</code> / <code>column-gap</code> <code>1rem</code>, <code>2rem</code> <code>grid-template-areas</code> z.\u202fB. <code>\"head head\" \"nav main\" \"foot foot\"</code> <code>place-items</code> <code>center</code>, <code>start</code>, <code>stretch</code>"},{"location":"css/cheatsheet/#grid-beispiel","title":"\ud83e\uddea Grid Beispiel","text":"<pre><code>.container {\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  gap: 1rem;\n}\n\n.item-a {\n  grid-column: 1 / span 2;\n}\n\n.item-b {\n  grid-row: 2 / 4;\n}\n</code></pre>"},{"location":"css/cheatsheet/#flexbox-vs-grid","title":"\ud83c\udd9a Flexbox vs. Grid","text":"Merkmal Flexbox Grid Achsen 1D (nur eine Achse) 2D (Zeile &amp; Spalte) Inhalt/Layout-Logik Inhalt priorisiert Layout priorisiert Reihenfolge mit <code>order</code> mit <code>grid-area</code>/<code>grid-*</code> Typische Anwendung Navigation, UI-Komponenten Seitenlayout, komplexe Rastersysteme"},{"location":"css/cheatsheet/#responsive-design","title":"\ud83d\uddbc Responsive Design","text":"Technik Beispiel Media Query <code>@media (max-width: 768px) { ... }</code> Relative Ma\u00dfe <code>vw</code>, <code>vh</code>, <code>em</code>, <code>rem</code>, <code>%</code> Dynamische Schriftgr\u00f6\u00dfen <code>font-size: clamp(1rem, 2vw, 2rem);</code> Mobile First CSS ab Basis schreiben, Media Queries f\u00fcr gro\u00dfe Screens"},{"location":"css/cheatsheet/#effekte-animationen-ubergange","title":"\ud83c\udf9b Effekte, Animationen &amp; \u00dcberg\u00e4nge","text":"Eigenschaft Beispiel <code>transition</code> <code>all 0.3s ease-in-out;</code> <code>animation</code> <code>slidein 1s infinite;</code> <code>transform</code> <code>scale(1.2)</code>, <code>rotate(5deg)</code>, <code>translateX(10px)</code> <code>@keyframes</code> <code>@keyframes slidein { from {...} to {...} }</code>"},{"location":"css/cheatsheet/#utility-tricks","title":"\ud83e\uddf0 Utility-Tricks","text":"<ul> <li>Zentrierung mit Flex:</li> </ul> <pre><code>.center {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n</code></pre> <ul> <li>Ellipsis f\u00fcr langen Text:</li> </ul> <pre><code>.ellipsis {\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n</code></pre> <ul> <li>Responsives Bild:</li> </ul> <pre><code>img {\n  max-width: 100%;\n  height: auto;\n}\n</code></pre>"},{"location":"css/cheatsheet/#css-custom-properties-variablen","title":"\ud83e\udde0 CSS Custom Properties (Variablen)","text":"<pre><code>:root {\n  --main-color: #0d6efd;\n  --spacing: 1rem;\n}\n\n.button {\n  background-color: var(--main-color);\n  padding: var(--spacing);\n}\n</code></pre> <p>\u2705 Wiederverwendbar, leicht zu pflegen, auch f\u00fcr Themes!</p>"},{"location":"css/cheatsheet/#barrierefreiheit","title":"\u267f Barrierefreiheit","text":"Technik Beispiel <code>aria-label</code> Beschriftung f\u00fcr Screenreader <code>alt</code> Alternativtext f\u00fcr Bilder <code>role</code> <code>role=\"button\"</code>, <code>navigation</code> <code>tabindex</code> Steuerung der Tastaturnavigation <code>:focus-visible</code> Zeigt Fokus nur bei Tastatur"},{"location":"css/cheatsheet/#rechenfunktionen","title":"\ud83e\uddee Rechenfunktionen","text":"Funktion Beispiel <code>calc()</code> <code>width: calc(100% - 2rem);</code> <code>min()</code> / <code>max()</code> <code>min(100%, 600px)</code> <code>clamp()</code> <code>clamp(1rem, 2vw, 2rem)</code>"},{"location":"css/cheatsheet/#sonstiges","title":"\ud83e\uddfe Sonstiges","text":"Eigenschaft Beispiel <code>cursor</code> <code>pointer</code>, <code>move</code>, <code>not-allowed</code> <code>user-select</code> <code>none</code>, <code>text</code>, <code>auto</code> <code>scroll-behavior</code> <code>smooth</code> <code>object-fit</code> <code>cover</code>, <code>contain</code> <code>aspect-ratio</code> <code>16 / 9</code>, <code>1 / 1</code>"},{"location":"css/cheatsheet/#nutzliche-ressourcen","title":"\ud83d\udcda N\u00fctzliche Ressourcen","text":"<ul> <li>MDN Web Docs</li> <li>CSS-Tricks</li> <li>Web.dev \u2013 CSS-Lernen</li> <li>Can I Use?</li> <li>Flexbox Cheat</li> <li>Grid Guide</li> </ul>"},{"location":"css/display-typen/","title":"\ud83e\uddf1 <code>display</code> \u2013 Anzeigeverhalten von Elementen","text":""},{"location":"css/display-typen/#was-ist-display","title":"\ud83e\udde9 Was ist <code>display</code>?","text":"<p>Die CSS-Eigenschaft <code>display</code> legt fest, wie ein HTML-Element im Layout dargestellt wird \u2013 ob als Block, inline, Flex-Container oder sogar unsichtbar. Sie ist eine der grundlegendsten CSS-Eigenschaften, da sie das Verhalten und die Struktur des Layouts ma\u00dfgeblich beeinflusst.</p>"},{"location":"css/display-typen/#ubersicht-wichtiger-display-typen","title":"\ud83d\udd0d \u00dcbersicht wichtiger Display-Typen","text":"Wert Beschreibung <code>block</code> Element beginnt in neuer Zeile, nimmt gesamte Breite ein (<code>&lt;div&gt;</code>, <code>&lt;p&gt;</code>) <code>inline</code> Kein Zeilenumbruch, nur so breit wie n\u00f6tig (<code>&lt;span&gt;</code>, <code>&lt;a&gt;</code>) <code>inline-block</code> Wie <code>inline</code>, aber mit einstellbarer Breite/H\u00f6he <code>none</code> Element wird nicht gerendert <code>flex</code> Aktiviert Flexbox-Layout f\u00fcr Kind-Elemente <code>inline-flex</code> Wie <code>flex</code>, aber bleibt im Inline-Kontext <code>grid</code> Aktiviert Grid-Layout f\u00fcr Kind-Elemente <code>inline-grid</code> Wie <code>grid</code>, aber inline <code>contents</code> Entfernt Box, aber l\u00e4sst Kind-Elemente bestehen <code>table</code> Simuliert Verhalten wie bei HTML-Tabellen"},{"location":"css/display-typen/#block-vs-inline","title":"\ud83e\uddf1 Block vs. Inline","text":""},{"location":"css/display-typen/#display-block","title":"\ud83d\udfe5 <code>display: block</code>","text":"<ul> <li>Beginnt immer auf neuer Zeile</li> <li>Nimmt volle Breite ein</li> <li>H\u00f6he, Breite, Margin &amp; Padding anwendbar</li> </ul> <pre><code>div {\n  display: block;\n}\n</code></pre>"},{"location":"css/display-typen/#display-inline","title":"\ud83d\udfe6 <code>display: inline</code>","text":"<ul> <li>L\u00e4uft im Flie\u00dftext</li> <li>Nimmt nur so viel Breite wie n\u00f6tig</li> <li>H\u00f6he und Breite ignoriert</li> </ul> <pre><code>span {\n  display: inline;\n}\n</code></pre>"},{"location":"css/display-typen/#display-inline-block","title":"\ud83d\udfea <code>display: inline-block</code>","text":"<ul> <li>Hybrid: inline-Verhalten, aber mit Block-Eigenschaften</li> <li>Breite, H\u00f6he, Padding und Margin m\u00f6glich</li> </ul> <pre><code>button {\n  display: inline-block;\n  width: 200px;\n}\n</code></pre>"},{"location":"css/display-typen/#display-none","title":"\ud83d\udeab <code>display: none</code>","text":"<ul> <li>Element wird komplett entfernt</li> <li>Kein Platzverbrauch im Layout</li> <li>Nicht sichtbar, nicht erreichbar f\u00fcr Screenreader</li> </ul> <pre><code>.modal {\n  display: none;\n}\n</code></pre> <p>\ud83d\udc49 Alternative: <code>visibility: hidden</code> (unsichtbar, aber nimmt Platz ein)</p>"},{"location":"css/display-typen/#moderne-layouts-flex-und-grid","title":"\ud83e\uddf0 Moderne Layouts: <code>flex</code> und <code>grid</code>","text":""},{"location":"css/display-typen/#display-flex","title":"\ud83d\udd39 <code>display: flex</code>","text":"<ul> <li>Aktiviert Flexbox-Modell </li> <li>Kind-Elemente k\u00f6nnen flexibel ausgerichtet und verteilt werden</li> </ul> <pre><code>.container {\n  display: flex;\n  justify-content: space-between;\n}\n</code></pre>"},{"location":"css/display-typen/#display-grid","title":"\ud83d\udd39 <code>display: grid</code>","text":"<ul> <li>Aktiviert CSS Grid Layout</li> <li>Ideal f\u00fcr zweidimensionale Strukturen</li> </ul> <pre><code>.container {\n  display: grid;\n  grid-template-columns: 1fr 2fr;\n}\n</code></pre>"},{"location":"css/display-typen/#spezialfalle","title":"\ud83e\uddea Spezialf\u00e4lle","text":""},{"location":"css/display-typen/#contents","title":"\ud83d\udd38 <code>contents</code>","text":"<ul> <li>Das Element selbst verschwindet</li> <li>Seine Kinder erscheinen direkt auf Elternebene</li> </ul> <pre><code>.wrapper {\n  display: contents;\n}\n</code></pre> <p>\u26a0\ufe0f Barrierefreiheit &amp; DOM-Semantik k\u00f6nnen leiden. Mit Vorsicht verwenden!</p>"},{"location":"css/display-typen/#table-table-row-table-cell","title":"\ud83d\udd38 <code>table</code>, <code>table-row</code>, <code>table-cell</code>","text":"<ul> <li>Simulation von Tabellenelementen ohne <code>&lt;table&gt;</code></li> </ul> <pre><code>.container {\n  display: table;\n}\n.row {\n  display: table-row;\n}\n.cell {\n  display: table-cell;\n}\n</code></pre>"},{"location":"css/display-typen/#haufige-fehler","title":"\u274c H\u00e4ufige Fehler","text":"Problem L\u00f6sung Breite/H\u00f6he funktioniert nicht <code>inline</code> \u2192 besser: <code>inline-block</code> Element \u201everschwindet\u201c <code>display: none</code> vs. <code>visibility: hidden</code> unterscheiden Flex/Grid funktioniert nicht Eltern brauchen <code>display: flex</code> / <code>grid</code> <code>display: contents</code> \u2192 Styles gehen verloren Pr\u00fcfen, ob Selektoren/Vererbungen greifen"},{"location":"css/display-typen/#vergleich-sichtbarkeit-vs-display","title":"\ud83d\udc41\ufe0f Vergleich: Sichtbarkeit vs. Display","text":"Eigenschaft Verhalten Platzverbrauch Zugriff durch Screenreader <code>display: none</code> Unsichtbar &amp; aus DOM-Layout \u274c Nein \u274c Nein <code>visibility: hidden</code> Unsichtbar, bleibt im Layout \u2705 Ja \u2705 Ja (aber nicht fokussierbar)"},{"location":"css/display-typen/#fazit","title":"\ud83d\udcda Fazit","text":"<p>Die Wahl des <code>display</code>-Werts bestimmt, wie sich ein Element im Layout verh\u00e4lt. Ob einfache Struktur mit <code>block</code>, Inline-Inhalte oder moderne Flexbox-/Grid-Systeme \u2013 <code>display</code> ist die Grundlage f\u00fcr jedes CSS-Layout.</p>"},{"location":"css/einf%C3%BChrung/","title":"\ud83c\udfa8 Einf\u00fchrung in CSS \u2013 Cascading Style Sheets","text":""},{"location":"css/einf%C3%BChrung/#was-ist-css","title":"\ud83e\udde9 Was ist CSS?","text":"<p>CSS steht f\u00fcr Cascading Style Sheets (auf Deutsch: gestufte Stilvorlagen) und ist die Sprache zur Gestaltung von HTML-Dokumenten. W\u00e4hrend HTML die Struktur und den Inhalt einer Webseite beschreibt, ist CSS daf\u00fcr zust\u00e4ndig, Aussehen, Layout und visuelles Verhalten festzulegen.</p> <p>\ud83d\udccc Trennung von Struktur und Design ist ein zentrales Webentwicklungsprinzip: - HTML = Was ist da? - CSS = Wie sieht es aus?</p>"},{"location":"css/einf%C3%BChrung/#was-kann-css","title":"\ud83d\udce6 Was kann CSS?","text":"<p>CSS steuert z.\u202fB.:</p> <ul> <li>Farben (<code>color</code>, <code>background</code>)</li> <li>Schriftarten und Gr\u00f6\u00dfen (<code>font-family</code>, <code>font-size</code>)</li> <li>Abst\u00e4nde (<code>margin</code>, <code>padding</code>)</li> <li>Layouts (<code>flex</code>, <code>grid</code>)</li> <li>Animationen und \u00dcberg\u00e4nge</li> <li>Sichtbarkeit und Zust\u00e4nde</li> <li>Responsives Design f\u00fcr Mobilger\u00e4te</li> </ul>"},{"location":"css/einf%C3%BChrung/#css-in-html-einbinden","title":"\ud83d\udd17 CSS in HTML einbinden","text":""},{"location":"css/einf%C3%BChrung/#1-externe-datei-empfohlen","title":"1. \ud83d\udcc4 Externe Datei (empfohlen)","text":"<pre><code>&lt;link rel=\"stylesheet\" href=\"style.css\" /&gt;\n</code></pre>"},{"location":"css/einf%C3%BChrung/#2-intern-im-head","title":"2. \ud83e\udde9 Intern im <code>&lt;head&gt;</code>","text":"<pre><code>&lt;style&gt;\n  body {\n    background-color: #f0f0f0;\n  }\n&lt;/style&gt;\n</code></pre>"},{"location":"css/einf%C3%BChrung/#3-inline-im-element-nicht-empfohlen","title":"3. \u270f\ufe0f Inline im Element (nicht empfohlen)","text":"<pre><code>&lt;p style=\"color: red;\"&gt;Dieser Text ist rot.&lt;/p&gt;\n</code></pre>"},{"location":"css/einf%C3%BChrung/#aufbau-einer-css-regel","title":"\ud83e\udde0 Aufbau einer CSS-Regel","text":"<pre><code>selector {\n  eigenschaft: wert;\n}\n</code></pre> <p>Beispiel:</p> <pre><code>h1 {\n  color: blue;\n  font-size: 2rem;\n}\n</code></pre> Teil Bedeutung <code>selector</code> Welches Element soll gestaltet werden? <code>property</code> Was soll ver\u00e4ndert werden (z.\u202fB. Farbe)? <code>value</code> Wie genau (z.\u202fB. rot, 100px)?"},{"location":"css/einf%C3%BChrung/#beispiel-html-css","title":"\ud83d\udcda Beispiel: HTML + CSS","text":"<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"de\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"UTF-8\" /&gt;\n  &lt;title&gt;Meine erste CSS-Seite&lt;/title&gt;\n  &lt;style&gt;\n    body {\n      background-color: #fffbe6;\n      font-family: sans-serif;\n    }\n\n    h1 {\n      color: #2a7ae2;\n    }\n\n    p {\n      font-size: 1.1rem;\n    }\n  &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1&gt;Hallo CSS!&lt;/h1&gt;\n  &lt;p&gt;Das ist ein formatiertes HTML-Dokument mit eingebettetem CSS.&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"css/einf%C3%BChrung/#css-konzepte-im-uberblick","title":"\ud83e\uddf1 CSS-Konzepte im \u00dcberblick","text":"Thema Beschreibung Selektoren W\u00e4hlen HTML-Elemente aus (<code>h1</code>, <code>.klasse</code>, <code>#id</code>) Farben &amp; Einheiten Farbcodes (<code>#fff</code>, <code>rgb()</code>, <code>hsl()</code>), Gr\u00f6\u00dfen in <code>px</code>, <code>em</code> Box-Modell Layoutmodell mit <code>margin</code>, <code>border</code>, <code>padding</code>, <code>content</code> Positionierung <code>static</code>, <code>relative</code>, <code>absolute</code>, <code>fixed</code>, <code>sticky</code> Flexbox &amp; Grid Moderne Layoutsysteme f\u00fcr flexible Designs Pseudo-Klassen z.\u202fB. <code>:hover</code>, <code>:first-child</code>, <code>:nth-of-type()</code> Animationen &amp; Effekte Mit <code>@keyframes</code>, <code>transition</code>, <code>transform</code>, <code>opacity</code> Medienabfragen <code>@media</code> f\u00fcr Responsive Design Variablen <code>--main-color: #333;</code> und <code>var(--main-color)</code> Spezifit\u00e4t &amp; Vererbung Wer \u00fcberschreibt wen? Kaskade &amp; Priorit\u00e4t verstehen"},{"location":"css/einf%C3%BChrung/#vorteile-von-css","title":"\ud83d\udd04 Vorteile von CSS","text":"<p>\u2705 Trennung von Inhalt und Gestaltung \u2705 Wiederverwendbarkeit \u00fcber mehrere Seiten \u2705 Schnellere Ladezeiten (bei externer Datei) \u2705 Verbesserte Wartbarkeit und \u00dcbersichtlichkeit \u2705 Erforderlich f\u00fcr modernes Responsive Webdesign  </p>"},{"location":"css/einf%C3%BChrung/#wichtige-begriffe","title":"\u26a0\ufe0f Wichtige Begriffe","text":"<ul> <li>Kaskade: Die Reihenfolge und Gewichtung von CSS-Regeln</li> <li>Vererbung: Viele Eigenschaften vererben sich an Kind-Elemente</li> <li>Spezifit\u00e4t: Je pr\u00e4ziser ein Selektor, desto \"wichtiger\" seine Regel</li> <li>!important: Erzwingt eine Regel \u2013 aber nur als Notl\u00f6sung verwenden</li> </ul>"},{"location":"css/einf%C3%BChrung/#fazit","title":"\ud83d\udcda Fazit","text":"<p>CSS ist das Herzst\u00fcck jeder modernen Webgestaltung. Es verleiht Webseiten ihren Look, erm\u00f6glicht responsives Verhalten auf allen Ger\u00e4ten und ist ein Muss f\u00fcr eine gute Nutzererfahrung.</p>"},{"location":"css/flexbox/","title":"\ud83d\udce6 CSS Flexbox \u2013 Flexibles Layoutsystem f\u00fcr ein-achsige Ausrichtung","text":""},{"location":"css/flexbox/#was-ist-flexbox","title":"\ud83e\udde9 Was ist Flexbox?","text":"<p>Flexbox (Flexible Box Layout) ist ein modernes CSS-Modul zur dynamischen Anordnung von Elementen in einer Zeile oder Spalte. Es eignet sich besonders f\u00fcr Navigationen, Kartenlayouts, Ausrichtungen und Verteilungen, ohne dass du auf komplizierte Positionierung oder Float-Tricks zur\u00fcckgreifen musst.</p> <p>\ud83d\udccc Flexbox = Einfaches, leistungsf\u00e4higes 1D-Layoutsystem</p>"},{"location":"css/flexbox/#grundstruktur","title":"\ud83d\udcd0 Grundstruktur","text":"<pre><code>&lt;div class=\"container\"&gt;\n  &lt;div class=\"item\"&gt;1&lt;/div&gt;\n  &lt;div class=\"item\"&gt;2&lt;/div&gt;\n  &lt;div class=\"item\"&gt;3&lt;/div&gt;\n&lt;/div&gt;\n</code></pre> <pre><code>.container {\n  display: flex;\n}\n</code></pre> <ul> <li>Elternelement erh\u00e4lt <code>display: flex</code></li> <li>Kind-Elemente werden automatisch nebeneinander dargestellt (horizontal)</li> </ul>"},{"location":"css/flexbox/#hauptachsen-begriffe","title":"\ud83d\udd27 Hauptachsen &amp; Begriffe","text":"Achse Bedeutung Hauptachse (main) Standard: horizontal (row) Kreuzachse (cross) Standard: vertikal Flex-Container Das Element mit <code>display: flex</code> Flex-Items Alle direkten Kinder des Containers"},{"location":"css/flexbox/#container-eigenschaften","title":"\ud83d\udd39 Container-Eigenschaften","text":""},{"location":"css/flexbox/#flex-direction","title":"<code>flex-direction</code>","text":"<p>Bestimmt die Richtung der Hauptachse:</p> <pre><code>flex-direction: row;        /* (default) horizontal von links nach rechts */\nflex-direction: row-reverse;\nflex-direction: column;     /* vertikal von oben nach unten */\nflex-direction: column-reverse;\n</code></pre>"},{"location":"css/flexbox/#flex-wrap","title":"<code>flex-wrap</code>","text":"<p>Erlaubt das Umbrechen von Elementen:</p> <pre><code>flex-wrap: nowrap;         /* (default) alles in einer Zeile */\nflex-wrap: wrap;           /* bricht auf n\u00e4chste Zeile/Spalte um */\nflex-wrap: wrap-reverse;\n</code></pre>"},{"location":"css/flexbox/#justify-content","title":"<code>justify-content</code>","text":"<p>Verteilt Flex-Items entlang der Hauptachse:</p> <pre><code>justify-content: flex-start;    /* (default) linksb\u00fcndig */\njustify-content: flex-end;\njustify-content: center;\njustify-content: space-between;\njustify-content: space-around;\njustify-content: space-evenly;\n</code></pre>"},{"location":"css/flexbox/#align-items","title":"<code>align-items</code>","text":"<p>Ausrichtung entlang der Kreuzachse:</p> <pre><code>align-items: stretch;       /* (default) f\u00fcllt H\u00f6he */\nalign-items: flex-start;\nalign-items: flex-end;\nalign-items: center;\nalign-items: baseline;\n</code></pre>"},{"location":"css/flexbox/#align-content","title":"<code>align-content</code>","text":"<p>Nur bei mehrzeiligen Layouts wirksam (wenn <code>flex-wrap: wrap</code>):</p> <pre><code>align-content: flex-start;\nalign-content: center;\nalign-content: space-between;\n</code></pre>"},{"location":"css/flexbox/#item-eigenschaften","title":"\ud83d\udd38 Item-Eigenschaften","text":""},{"location":"css/flexbox/#flex-grow","title":"<code>flex-grow</code>","text":"<p>Verteilt \u00fcbrigen Platz unter Items:</p> <pre><code>.item {\n  flex-grow: 1; /* w\u00e4chst gleichm\u00e4\u00dfig mit */\n}\n</code></pre>"},{"location":"css/flexbox/#flex-shrink","title":"<code>flex-shrink</code>","text":"<p>Bestimmt, wie stark Elemente schrumpfen d\u00fcrfen:</p> <pre><code>.item {\n  flex-shrink: 1;\n}\n</code></pre>"},{"location":"css/flexbox/#flex-basis","title":"<code>flex-basis</code>","text":"<p>Startgr\u00f6\u00dfe, \u00e4hnlich <code>width</code>/<code>height</code>, vor Verteilung des Rests:</p> <pre><code>.item {\n  flex-basis: 200px;\n}\n</code></pre>"},{"location":"css/flexbox/#kurzform-flex","title":"Kurzform: <code>flex</code>","text":"<pre><code>.item {\n  flex: 1 1 200px; /* grow shrink basis */\n}\n</code></pre>"},{"location":"css/flexbox/#align-self","title":"<code>align-self</code>","text":"<p>Einzelne Items individuell ausrichten (Kreuzachse):</p> <pre><code>.item {\n  align-self: flex-end;\n}\n</code></pre>"},{"location":"css/flexbox/#praxisbeispiel-3-spaltige-verteilung","title":"\ud83c\udfaf Praxisbeispiel: 3-spaltige Verteilung","text":"<pre><code>.container {\n  display: flex;\n  gap: 1rem;\n}\n\n.item {\n  flex: 1;\n  background: #eee;\n  padding: 1rem;\n}\n</code></pre>"},{"location":"css/flexbox/#zentrierung-mit-flexbox","title":"\ud83e\uddea Zentrierung mit Flexbox","text":"<pre><code>.centered {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 100vh;\n}\n</code></pre> <p>\u2705 Sehr einfache vertikale UND horizontale Zentrierung</p>"},{"location":"css/flexbox/#nutzliche-tipps","title":"\ud83d\udca1 N\u00fctzliche Tipps","text":"Ziel Eigenschaft Horizontales Men\u00fc <code>flex-direction: row</code> Spaltenlayout <code>flex-direction: column</code> Gleich hohe Karten <code>align-items: stretch</code> L\u00fccke zwischen Items <code>gap: 1rem;</code> Abstand zwischen Bl\u00f6cken <code>margin</code>/<code>space-between</code> kombinieren"},{"location":"css/flexbox/#haufige-fehler","title":"\u274c H\u00e4ufige Fehler","text":"Fehler Ursache <code>align-items</code> wirkt nicht Nur sichtbar bei unterschiedlich hoher H\u00f6he <code>justify-content</code> funktioniert nicht Flex-Container nicht korrekt definiert Keine Umbr\u00fcche <code>flex-wrap</code> fehlt"},{"location":"css/flexbox/#fazit","title":"\ud83d\udcda Fazit","text":"<p>Flexbox ist das perfekte Werkzeug f\u00fcr 1-dimensionale Layouts \u2013 sei es horizontal oder vertikal. Es ersetzt alte Techniken wie <code>float</code>, <code>inline-block</code> und manuelle Berechnungen.</p>"},{"location":"css/grid/","title":"\ud83e\uddee CSS Grid \u2013 Zweidimensionales Layoutsystem","text":""},{"location":"css/grid/#was-ist-css-grid","title":"\ud83e\udde9 Was ist CSS Grid?","text":"<p>CSS Grid Layout ist ein leistungsstarkes, zweidimensionales Layoutsystem f\u00fcr das Web. Im Gegensatz zu Flexbox (nur Zeile ODER Spalte) erlaubt Grid die gleichzeitige Gestaltung von Reihen und Spalten \u2013 perfekt f\u00fcr komplexe, responsive Layouts.</p> <p>\ud83d\udccc Ideal f\u00fcr Seitenlayouts, Raster, Galerien, Dashboards, Karten-Grids</p>"},{"location":"css/grid/#grundstruktur","title":"\ud83d\udcd0 Grundstruktur","text":"<pre><code>&lt;div class=\"grid\"&gt;\n  &lt;div&gt;1&lt;/div&gt;\n  &lt;div&gt;2&lt;/div&gt;\n  &lt;div&gt;3&lt;/div&gt;\n&lt;/div&gt;\n</code></pre> <pre><code>.grid {\n  display: grid;\n  grid-template-columns: 1fr 1fr 1fr;\n  gap: 1rem;\n}\n</code></pre> <ul> <li><code>display: grid</code> aktiviert Grid-Modus</li> <li><code>grid-template-columns</code> definiert Spalten (hier: drei gleich gro\u00dfe)</li> </ul>"},{"location":"css/grid/#zentrale-eigenschaften","title":"\ud83d\udd27 Zentrale Eigenschaften","text":""},{"location":"css/grid/#grid-template-columns-grid-template-rows","title":"<code>grid-template-columns</code> / <code>grid-template-rows</code>","text":"<p>Definiert die Spalten- und Zeilenstruktur.</p> <pre><code>grid-template-columns: 200px 1fr 2fr;\ngrid-template-rows: auto 100px;\n</code></pre> Wert Bedeutung <code>px</code>/<code>em</code> Feste Breite/H\u00f6he <code>%</code> Prozentanteil am Container <code>fr</code> Anteil am freien Platz <code>auto</code> So gro\u00df wie der Inhalt"},{"location":"css/grid/#gap-abstand","title":"<code>gap</code> (Abstand)","text":"<pre><code>gap: 1rem;\nrow-gap: 2rem;\ncolumn-gap: 0.5rem;\n</code></pre>"},{"location":"css/grid/#repeat-wiederholungen","title":"<code>repeat()</code> \u2013 Wiederholungen","text":"<pre><code>grid-template-columns: repeat(3, 1fr); /* 3 gleich breite Spalten */\n</code></pre>"},{"location":"css/grid/#minmax-flexible-begrenzung","title":"<code>minmax()</code> \u2013 flexible Begrenzung","text":"<pre><code>grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n</code></pre> <ul> <li>Dynamische Spalten, mind. 200px breit, maximal verf\u00fcgbarer Platz</li> </ul>"},{"location":"css/grid/#platzierung-von-elementen","title":"\ud83d\udd39 Platzierung von Elementen","text":""},{"location":"css/grid/#automatisch","title":"Automatisch","text":"<p>Elemente werden automatisch in das Raster eingef\u00fcgt \u2013 Zeile f\u00fcr Zeile.</p>"},{"location":"css/grid/#manuell-mit-grid-column-grid-row","title":"Manuell mit <code>grid-column</code>, <code>grid-row</code>","text":"<pre><code>.item {\n  grid-column: 1 / 3; /* von Spalte 1 bis 3 */\n  grid-row: 2 / 4;\n}\n</code></pre>"},{"location":"css/grid/#kurzform-grid-area","title":"Kurzform: <code>grid-area</code>","text":"<pre><code>grid-area: 2 / 1 / 3 / 4; /* row-start / column-start / row-end / column-end */\n</code></pre>"},{"location":"css/grid/#grid-areas-benannte-bereiche","title":"\ud83e\udded Grid Areas \u2013 benannte Bereiche","text":"<pre><code>.container {\n  display: grid;\n  grid-template-areas:\n    \"header header\"\n    \"nav    main\"\n    \"footer footer\";\n  grid-template-columns: 1fr 3fr;\n  grid-template-rows: auto 1fr auto;\n}\n</code></pre> <pre><code>.header { grid-area: header; }\n.nav    { grid-area: nav; }\n.main   { grid-area: main; }\n.footer { grid-area: footer; }\n</code></pre> <p>\ud83d\udccc Vorteil: Semantisches, visuelles Layout</p>"},{"location":"css/grid/#automatische-platzierung","title":"\ud83d\udd04 Automatische Platzierung","text":""},{"location":"css/grid/#grid-auto-flow","title":"<code>grid-auto-flow</code>","text":"<pre><code>grid-auto-flow: row;       /* Standard: Zeilenweise */\ngrid-auto-flow: column;    /* Spaltenweise */\n</code></pre>"},{"location":"css/grid/#responsive-grid","title":"\ud83c\udf10 Responsive Grid","text":"<pre><code>.grid {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n  gap: 1rem;\n}\n</code></pre> <p>\u2705 Passt die Anzahl der Spalten dynamisch an die Breite an \u2705 Perfekt f\u00fcr Galerien, Cards, Listen</p>"},{"location":"css/grid/#beispiel-32-grid","title":"\ud83c\udfaf Beispiel: 3\u00d72 Grid","text":"<pre><code>.grid {\n  display: grid;\n  grid-template-columns: 1fr 1fr 1fr;\n  grid-template-rows: 100px 100px;\n  gap: 10px;\n}\n</code></pre> <pre><code>&lt;div class=\"grid\"&gt;\n  &lt;div&gt;1&lt;/div&gt;&lt;div&gt;2&lt;/div&gt;&lt;div&gt;3&lt;/div&gt;\n  &lt;div&gt;4&lt;/div&gt;&lt;div&gt;5&lt;/div&gt;&lt;div&gt;6&lt;/div&gt;\n&lt;/div&gt;\n</code></pre>"},{"location":"css/grid/#best-practices","title":"\u2705 Best Practices","text":"Tipp Vorteil Verwende <code>fr</code> statt <code>px</code> Flexibler, besser f\u00fcr Responsive Design Nutze <code>auto-fit</code> + <code>minmax()</code> Automatische Spaltenanzahl Benenne Grid Areas (<code>grid-area</code>) Klarheit im Code Verwende <code>gap</code> statt <code>margin</code> Einheitlich und sicher"},{"location":"css/grid/#haufige-fehler","title":"\u274c H\u00e4ufige Fehler","text":"Problem Ursache / L\u00f6sung Elemente \u00fcberlappen sich Fehlerhafte <code>grid-column</code> / <code>row</code> Werte Kein Platz im Layout Container hat keine definierte Breite Unterschiedlich hohe Spalten <code>align-items: stretch</code> setzen"},{"location":"css/grid/#fazit","title":"\ud83d\udcda Fazit","text":"<p>CSS Grid ist das ideale Werkzeug f\u00fcr strukturierte, responsive, zweidimensionale Layouts. Es ist leistungsf\u00e4higer und klarer als fr\u00fchere Methoden wie Tabellen oder <code>float</code>-basierte Layouts.</p>"},{"location":"css/gridvsflexbox/","title":"\u2694\ufe0f CSS Grid vs. Flexbox \u2013 Wann nutze ich was?","text":""},{"location":"css/gridvsflexbox/#warum-vergleichen","title":"\ud83e\udde9 Warum vergleichen?","text":"<p>Sowohl Flexbox als auch CSS Grid sind moderne Layoutsysteme in CSS. Sie l\u00f6sen viele Probleme der klassischen Layoutmethoden (<code>float</code>, <code>table</code>, <code>inline-block</code>) \u2013 jedoch mit unterschiedlichen Ans\u00e4tzen und Einsatzbereichen.</p>"},{"location":"css/gridvsflexbox/#ubersicht","title":"\ud83d\udd0d \u00dcbersicht","text":"Kriterium Flexbox CSS Grid Achsen 1D: nur Zeile ODER Spalte 2D: Zeile UND Spalte gleichzeitig Ausrichtung sequentiell tabellarisch / rasterartig Layout-Typ Inhaltsbasiert (Content-first) Strukturbasiert (Layout-first) Elementreihenfolge leicht steuerbar mit <code>order</code> auch steuerbar mit <code>grid-area</code> Responsives Verhalten sehr einfach etwas komplexer, aber leistungsf\u00e4hig Gitterstruktur nicht m\u00f6glich nativ mit <code>grid-template-*</code>, <code>fr</code>, etc. Nesting-Unterst\u00fctzung sehr gut sehr gut Browserunterst\u00fctzung \u2705 Sehr gut \u2705 Sehr gut (seit 2017)"},{"location":"css/gridvsflexbox/#wann-solltest-du-flexbox-verwenden","title":"\ud83c\udfaf Wann solltest du Flexbox verwenden?","text":"<p>\u2705 Reihen oder Spalten \u2705 Dynamische Inhaltselemente \u2705 Navigationen, Toolbars, Buttons \u2705 Zentrierung in einer Richtung \u2705 Wenn du keine exakte Spaltenstruktur brauchst</p>"},{"location":"css/gridvsflexbox/#beispiel","title":"Beispiel:","text":"<pre><code>nav {\n  display: flex;\n  justify-content: space-between;\n}\n</code></pre>"},{"location":"css/gridvsflexbox/#wann-solltest-du-css-grid-verwenden","title":"\ud83c\udfaf Wann solltest du CSS Grid verwenden?","text":"<p>\u2705 Komplexe Layouts mit Zeilen UND Spalten \u2705 Raster f\u00fcr Bilder, Artikel, Dashboard-Widgets \u2705 Genaue Positionierung \u00fcber Gridlinien \u2705 Wenn das Layout im Vordergrund steht (nicht der Inhalt)</p>"},{"location":"css/gridvsflexbox/#beispiel_1","title":"Beispiel:","text":"<pre><code>.container {\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  grid-template-rows: auto auto;\n}\n</code></pre>"},{"location":"css/gridvsflexbox/#kombinieren-von-grid-und-flex","title":"\ud83e\udde0 Kombinieren von Grid und Flex","text":"<p>Flexbox und Grid erg\u00e4nzen sich hervorragend. Ein typischer Anwendungsfall:</p> <pre><code>&lt;div class=\"grid-container\"&gt;\n  &lt;div class=\"card\"&gt;\n    &lt;div class=\"card-header\"&gt;\u2026&lt;/div&gt;\n    &lt;div class=\"card-body\"&gt;\u2026&lt;/div&gt;\n    &lt;div class=\"card-footer\"&gt;\u2026&lt;/div&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n</code></pre> <pre><code>.grid-container {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n}\n\n.card {\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n}\n</code></pre> <p>\u27a1\ufe0f Grid f\u00fcr das \u00fcbergeordnete Layout \u27a1\ufe0f Flexbox innerhalb von Komponenten</p>"},{"location":"css/gridvsflexbox/#visualer-vergleich","title":"\ud83d\udcca Visualer Vergleich","text":"Feature Flexbox Grid Zentrierung mit 1 Zeile \u2705 Einfach \u2705 M\u00f6glich Galerie mit mehreren Zeilen \ud83d\udd38 Umst\u00e4ndlich \u2705 Optimal Dynamische Spaltenanzahl \ud83d\udd38 Workaround n\u00f6tig \u2705 mit <code>auto-fit</code> Elemente in bestimmter Position \ud83d\udd38 <code>order</code>-basiert \u2705 mit <code>grid-area</code> Layout mit \u201eL\u00fccken\u201c \ud83d\udd38 schwierig \u2705 nat\u00fcrlich"},{"location":"css/gridvsflexbox/#haufige-missverstandnisse","title":"\ud83d\udeab H\u00e4ufige Missverst\u00e4ndnisse","text":"Irrtum Realit\u00e4t \u201eFlexbox ist veraltet wegen Grid\u201c \u274c Beide sind moderne, komplement\u00e4re Tools \u201eGrid ist nur f\u00fcr gro\u00dfe Layouts\u201c \u274c Grid funktioniert auch f\u00fcr kleine Komponenten \u201eGrid ist komplizierter\u201c \ud83d\udd38 Anfangs ja, aber bietet mehr Kontrolle"},{"location":"css/gridvsflexbox/#fazit","title":"\ud83d\udcda Fazit","text":"Wenn du brauchst \u2026 Nutze \u2026 einfache, lineare Ausrichtung \u2705 Flexbox komplexe, strukturierte Raster \u2705 Grid maximale Kontrolle \u00fcber Platzierung \u2705 Grid schnelle, mobile-first Struktur \u2705 Flexbox <p>\ud83d\udca1 Tipp: Beginne mit dem Layout (Grid), verfeinere Inhalte mit Flexbox</p>"},{"location":"css/layoutstrategie/","title":"\ud83e\udded CSS-Layoutstrategien \u2013 Moderne Seitenstrukturen aufbauen","text":""},{"location":"css/layoutstrategie/#was-sind-layoutstrategien","title":"\ud83e\udde9 Was sind Layoutstrategien?","text":"<p>Layoutstrategien beschreiben, wie Inhalte auf einer Webseite r\u00e4umlich organisiert werden. Mit CSS hast du heute eine Vielzahl an Tools zur Verf\u00fcgung, um einfache bis hochkomplexe Layouts flexibel und responsiv umzusetzen.</p> <p>\ud83d\udccc Fr\u00fcher war <code>float</code> Standard \u2013 heute dominieren Flexbox, Grid und responsive Einheiten.</p>"},{"location":"css/layoutstrategie/#ubersicht-moderner-layouttechniken","title":"\ud83d\udce6 \u00dcbersicht moderner Layouttechniken","text":"Technik Verwendung Besonderheiten <code>display: flex</code> 1-dimensionale Ausrichtung (Zeile/Spalte) einfach, flexibel, horizontale Strukturen <code>display: grid</code> 2-dimensionale Rasterlayouts (Zeile + Spalte) perfekt f\u00fcr komplexe Layouts <code>position</code> Absolute Platzierung einzelner Elemente gezielt, aber unflexibel f\u00fcr Responsive <code>float</code> Alte Methode zur \u201eSeitenspalten\u201c-Erstellung veraltet, schwer kontrollierbar <code>inline-block</code> Flie\u00dfende Boxen nebeneinander geeignet f\u00fcr Navigationen/Buttons Media Queries Reaktion auf Bildschirmgr\u00f6\u00dfe Basis f\u00fcr Responsive Design"},{"location":"css/layoutstrategie/#1-flexbox-layout-in-einer-richtung","title":"\ud83d\udd39 1. Flexbox \u2013 Layout in einer Richtung","text":"<pre><code>.container {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n</code></pre> <ul> <li>Horizontale oder vertikale Ausrichtung</li> <li>Gleichm\u00e4\u00dfiger Abstand, Zentrierung, Reihenfolge steuerbar</li> <li>Ideal f\u00fcr Navigationen, Cards, Buttonleisten</li> </ul> <p>\ud83d\udc49 Siehe auch: <code>flex-direction</code>, <code>flex-wrap</code>, <code>gap</code>, <code>align-self</code></p>"},{"location":"css/layoutstrategie/#2-grid-2-dimensionale-layouts","title":"\ud83d\udd38 2. Grid \u2013 2-dimensionale Layouts","text":"<pre><code>.container {\n  display: grid;\n  grid-template-columns: 1fr 2fr;\n  gap: 1rem;\n}\n</code></pre> <ul> <li>Arbeitet mit Zeilen UND Spalten</li> <li>Perfekt f\u00fcr Seitenraster, Galerien, Layout mit Sidebar</li> </ul> <p>\ud83d\udc49 Begriffe wie <code>grid-template-areas</code>, <code>auto-fit</code>, <code>repeat()</code>, <code>minmax()</code> helfen beim Optimieren</p>"},{"location":"css/layoutstrategie/#3-positionierung-gezielte-platzierung","title":"\ud83d\udd38 3. Positionierung \u2013 gezielte Platzierung","text":"<pre><code>.element {\n  position: absolute;\n  top: 20px;\n  right: 10px;\n}\n</code></pre> <ul> <li>Eignet sich f\u00fcr Popups, Overlays, Tooltips</li> <li>Mit <code>relative</code>-Elternelement kombinieren</li> <li>\u26a0\ufe0f Nicht responsive von Natur aus</li> </ul>"},{"location":"css/layoutstrategie/#4-float-legacy","title":"\ud83d\udd38 4. Float (Legacy)","text":"<pre><code>.sidebar {\n  float: left;\n  width: 30%;\n}\n</code></pre> <ul> <li>Fr\u00fcher f\u00fcr Spalten genutzt</li> <li>Muss mit <code>clearfix</code> behoben werden</li> <li>\u2757 Heute nicht mehr empfohlen \u2013 besser: Flex/Grid</li> </ul>"},{"location":"css/layoutstrategie/#5-inline-block","title":"\ud83d\udd38 5. Inline-Block","text":"<pre><code>nav a {\n  display: inline-block;\n  margin-right: 1rem;\n}\n</code></pre> <ul> <li>Elemente in einer Zeile, aber wie Bl\u00f6cke steuerbar</li> <li>Kein Zeilenumbruch wie <code>block</code>, aber <code>width</code>, <code>padding</code>, etc. m\u00f6glich</li> </ul>"},{"location":"css/layoutstrategie/#6-responsive-design-mit-media-queries","title":"\ud83c\udf10 6. Responsive Design mit Media Queries","text":"<pre><code>@media (max-width: 768px) {\n  .container {\n    flex-direction: column;\n  }\n}\n</code></pre> <ul> <li>Anpassung an Bildschirmbreite, H\u00f6he, Ger\u00e4tetyp</li> <li>Basis f\u00fcr Mobile-First-Designs</li> </ul> <p>\ud83d\udc49 Unterst\u00fctzt auch <code>prefers-color-scheme</code>, <code>orientation</code>, u.v.m.</p>"},{"location":"css/layoutstrategie/#weitere-bausteine","title":"\ud83d\udd27 Weitere Bausteine","text":"Technik Beschreibung <code>gap</code>, <code>row-gap</code> Abst\u00e4nde zwischen Flex/Grid-Elementen <code>min-content</code>, <code>max-content</code> Inhalte optimal dimensionieren <code>clamp()</code> Dynamische Gr\u00f6\u00dfen zwischen min/max + fluid <code>aspect-ratio</code> Verh\u00e4ltnisse f\u00fcr responsive Medien und Container <code>container queries</code> Layout basierend auf Elterngr\u00f6\u00dfe (modern)"},{"location":"css/layoutstrategie/#typische-layoutmuster","title":"\ud83c\udfaf Typische Layoutmuster","text":"Name Umsetzung Header \u2013 Main \u2013 Footer Flex/Block/Grid Zwei-Spalten-Layout Grid (<code>grid-template-columns: auto 1fr</code>) Kartenraster / Gallery Grid + <code>auto-fit</code>, <code>minmax()</code> Zentrierung Flex (<code>justify-content</code>, <code>align-items: center</code>) Sticky Header/Footer <code>position: sticky/fixed</code> + <code>z-index</code>"},{"location":"css/layoutstrategie/#best-practices","title":"\u2705 Best Practices","text":"<ul> <li>Mobile First: Layout f\u00fcr kleine Viewports, dann aufw\u00e4rts erweitern</li> <li>Vermeide <code>float</code> \u2013 setze auf moderne Techniken</li> <li>Nutze <code>gap</code> statt <code>margin</code> f\u00fcr konsistente Abst\u00e4nde</li> <li>Trenne Struktur (<code>HTML</code>) und Stil (<code>CSS</code>) klar</li> <li>Verwende Semantik + ARIA-Rollen f\u00fcr Barrierefreiheit</li> </ul>"},{"location":"css/layoutstrategie/#haufige-fehler","title":"\u274c H\u00e4ufige Fehler","text":"Fehler Empfehlung Kein Responsives Layout Media Queries &amp; flexible Einheiten verwenden Scrollprobleme bei <code>position</code> Kontext und <code>overflow</code> pr\u00fcfen Float ohne Clear Besser: <code>flex</code>, sonst <code>clear: both</code> verwenden"},{"location":"css/layoutstrategie/#fazit","title":"\ud83d\udcda Fazit","text":"<p>CSS bietet eine Vielzahl leistungsstarker Layoutstrategien \u2013 von einfachen Bl\u00f6cken bis hin zu hochdynamischen Grid-Systemen. Mit Flexbox, Grid und Media Queries lassen sich moderne Webseiten effizient, responsiv und zug\u00e4nglich gestalten.</p>"},{"location":"css/position/","title":"\ud83d\udccd CSS-Positionierung \u2013 Elemente gezielt platzieren","text":""},{"location":"css/position/#was-bedeutet-positionierung-in-css","title":"\ud83e\udde9 Was bedeutet \u201ePositionierung\u201c in CSS?","text":"<p>Mit CSS-Positionierung steuerst du pr\u00e4zise, wo ein Element auf der Seite erscheinen soll \u2013 unabh\u00e4ngig vom normalen Dokumentfluss. Die zentrale Eigenschaft daf\u00fcr ist:</p> <pre><code>position: static | relative | absolute | fixed | sticky;\n</code></pre> <p>Jeder Wert ver\u00e4ndert das Verhalten eines Elements in Bezug auf seine Umgebung.</p>"},{"location":"css/position/#ubersicht-positionierungsarten","title":"\ud83d\udd38 \u00dcbersicht: Positionierungsarten","text":"Wert Beschreibung <code>static</code> Standard-Layout, im normalen HTML-Fluss <code>relative</code> Verschiebung relativ zur urspr\u00fcnglichen Position <code>absolute</code> Position relativ zum n\u00e4chstgelegenen positionierten Vorfahren <code>fixed</code> Fixiert im Viewport (z.\u202fB. immer sichtbar) <code>sticky</code> Mischung aus <code>relative</code> und <code>fixed</code> \u2013 klebt bei Scroll"},{"location":"css/position/#static-standard","title":"\ud83d\udd39 <code>static</code> (Standard)","text":"<pre><code>position: static;\n</code></pre> <ul> <li>Standardwert f\u00fcr alle Elemente</li> <li>Keine Verschiebung m\u00f6glich mit <code>top</code>, <code>left</code>, etc.</li> <li>Orientiert sich am normalen Dokumentenfluss</li> </ul>"},{"location":"css/position/#relative","title":"\ud83d\udd39 <code>relative</code>","text":"<pre><code>position: relative;\ntop: 10px;\nleft: 20px;\n</code></pre> <ul> <li>Element bleibt im Layoutfluss  </li> <li>Wird visuell verschoben, ohne Nachbarelemente zu beeinflussen  </li> <li>Bezugsrahmen ist die eigene Originalposition</li> </ul>"},{"location":"css/position/#absolute","title":"\ud83d\udd39 <code>absolute</code>","text":"<pre><code>position: absolute;\ntop: 0;\nleft: 0;\n</code></pre> <ul> <li>Entfernt das Element aus dem normalen Fluss  </li> <li>Bezieht sich auf das n\u00e4chste \u00fcbergeordnete Element mit <code>position</code> \u2260 <code>static</code> </li> <li>Falls kein solches vorhanden ist, bezieht es sich auf <code>&lt;html&gt;</code></li> </ul> <p>\u2705 Kombiniere mit <code>position: relative;</code> beim Container f\u00fcr saubere Kontrolle</p> <pre><code>&lt;div class=\"container\"&gt;\n  &lt;div class=\"box\"&gt;Ich bin absolut positioniert&lt;/div&gt;\n&lt;/div&gt;\n</code></pre> <pre><code>.container {\n  position: relative;\n}\n\n.box {\n  position: absolute;\n  bottom: 0;\n  right: 0;\n}\n</code></pre>"},{"location":"css/position/#fixed","title":"\ud83d\udd39 <code>fixed</code>","text":"<pre><code>position: fixed;\ntop: 0;\nleft: 0;\n</code></pre> <ul> <li>Bezieht sich immer auf den Viewport (Fenster)  </li> <li>Scrollt nicht mit \u2013 ideal f\u00fcr Sticky-Navigationsleisten, Buttons o.\u00c4.</li> <li>Praktisch f\u00fcr: Cookie-Hinweise, Header, \u201eZur\u00fcck nach oben\u201c-Links</li> </ul>"},{"location":"css/position/#sticky","title":"\ud83d\udd39 <code>sticky</code>","text":"<pre><code>position: sticky;\ntop: 0;\n</code></pre> <ul> <li>Klebt am angegebenen Rand (<code>top</code>, <code>left</code>...)  </li> <li>Beginnt wie <code>relative</code>, wird aber beim Scrollen <code>fixed</code> </li> <li>Nur innerhalb des \u00fcbergeordneten Containers sichtbar  </li> <li>Container muss eine definierte H\u00f6he besitzen</li> </ul> <p>\u26a0\ufe0f Funktioniert nur bei scrollbarem Elternbereich \u2013 ideal f\u00fcr Abschnittsnavigationen oder Tabellen\u00fcberschriften</p>"},{"location":"css/position/#zusatzliche-positions-eigenschaften","title":"\ud83d\udcd0 Zus\u00e4tzliche Positions-Eigenschaften","text":"Eigenschaft Bedeutung <code>top</code> Abstand von der oberen Kante <code>right</code> Abstand von der rechten Kante <code>bottom</code> Abstand von der unteren Kante <code>left</code> Abstand von der linken Kante <code>z-index</code> Stapelreihenfolge (h\u00f6herer Wert = vorne)"},{"location":"css/position/#beispiel-sticky-navbar","title":"\ud83c\udfaf Beispiel: Sticky Navbar","text":"<pre><code>&lt;header class=\"sticky-header\"&gt;\n  &lt;h1&gt;Meine Website&lt;/h1&gt;\n&lt;/header&gt;\n</code></pre> <pre><code>.sticky-header {\n  position: sticky;\n  top: 0;\n  background: white;\n  z-index: 1000;\n  box-shadow: 0 2px 5px rgba(0,0,0,0.1);\n}\n</code></pre>"},{"location":"css/position/#haufige-fehler","title":"\u274c H\u00e4ufige Fehler","text":"Fehler Besser <code>absolute</code> ohne <code>relative</code>-Eltern Immer ein Kontext-Element mit <code>position: relative</code> <code>sticky</code> funktioniert nicht Eltern-Element braucht definierte H\u00f6he <code>z-index</code> hat keine Wirkung Nur bei <code>position</code> \u2260 <code>static</code> wirksam"},{"location":"css/position/#wann-verwende-ich-was","title":"\ud83e\udde0 Wann verwende ich was?","text":"Ziel Empfohlene Positionierung Normales Layout <code>static</code> (Standard) Leichte Verschiebung <code>relative</code> \u00dcberlagerung / Layer <code>absolute</code> + <code>z-index</code> Immer sichtbar, Viewport-fixiert <code>fixed</code> Kleben bei Scroll <code>sticky</code>"},{"location":"css/position/#fazit","title":"\ud83d\udcda Fazit","text":"<p>Die CSS-Positionierung ist ein zentrales Werkzeug zur Gestaltung moderner Layouts, UI-Komponenten und responsiver Interfaces. Wer ihre Unterschiede kennt, kann pr\u00e4zise, flexible und performante Designs erstellen \u2013 vom Sticky Header bis zum Modalfenster.</p>"},{"location":"css/responsive/","title":"\ud83d\udcf1 Responsive Design \u2013 Flexible Gestaltung f\u00fcr alle Ger\u00e4te","text":""},{"location":"css/responsive/#was-ist-responsive-design","title":"\ud83e\udde9 Was ist Responsive Design?","text":"<p>Responsive Webdesign bezeichnet den Ansatz, Webseiten so zu gestalten, dass sie sich automatisch an verschiedene Bildschirmgr\u00f6\u00dfen und Ger\u00e4tetypen anpassen \u2013 vom Smartphone \u00fcber Tablet bis zum Desktop.</p> <p>\ud83d\udccc Ziel: Eine Website \u2013 viele Ger\u00e4te \u2013 immer gut benutzbar</p>"},{"location":"css/responsive/#warum-ist-responsive-design-wichtig","title":"\ud83d\udd0d Warum ist Responsive Design wichtig?","text":"<ul> <li>\ud83d\udcf1 Mobile Nutzung dominiert das Web (&gt;60\u202f% aller Aufrufe)</li> <li>\ud83d\udda5\ufe0f Ein Layout muss auf gro\u00dfen wie kleinen Displays funktionieren</li> <li>\ud83c\udf10 Vermeidung separater Mobilversionen (z.\u202fB. <code>m.domain.de</code>)</li> <li>\u2705 Besseres Nutzererlebnis &amp; SEO-Ranking bei Google</li> </ul>"},{"location":"css/responsive/#technische-grundlagen","title":"\ud83d\udd27 Technische Grundlagen","text":"Technik Beschreibung \u2705 Flexible Layouts mit Prozentwerten, <code>em</code>, <code>rem</code>, <code>fr</code>, <code>auto</code> \u2705 Media Queries reagieren auf Breite, H\u00f6he, Ger\u00e4t, Ausrichtung \u2705 Relative Einheiten statt fixer Pixel: <code>%, vw, em, rem</code> \u2705 Mobile First Design beginnt bei kleinen Viewports \u2705 Bilder/Videos anpassen mit <code>max-width: 100%</code>, <code>aspect-ratio</code>"},{"location":"css/responsive/#mobile-first-vs-desktop-first","title":"\ud83d\udcd0 Mobile-First vs. Desktop-First","text":""},{"location":"css/responsive/#mobile-first-empfohlen","title":"Mobile-First (empfohlen)","text":"<ol> <li>Basislayout f\u00fcr kleine Ger\u00e4te</li> <li>Dann Layout-Erweiterung per <code>@media (min-width: ...)</code></li> </ol> <pre><code>body {\n  font-size: 16px;\n}\n\n@media (min-width: 768px) {\n  body {\n    font-size: 18px;\n  }\n}\n</code></pre>"},{"location":"css/responsive/#desktop-first-alterer-ansatz","title":"Desktop-First (\u00e4lterer Ansatz)","text":"<ol> <li>Design f\u00fcr gro\u00dfe Viewports</li> <li>Verkleinerung per <code>@media (max-width: ...)</code></li> </ol>"},{"location":"css/responsive/#media-queries-herzstuck-der-responsivitat","title":"\ud83d\udd38 Media Queries \u2013 Herzst\u00fcck der Responsivit\u00e4t","text":"<pre><code>@media (max-width: 600px) {\n  .sidebar {\n    display: none;\n  }\n}\n</code></pre> Beispiel Bedeutung <code>max-width: 768px</code> Nur bei kleinen Bildschirmen <code>min-width: 1024px</code> Nur bei gro\u00dfen Viewports <code>orientation: landscape</code> Nur bei Querformat <code>prefers-color-scheme: dark</code> Systemdarkmode ber\u00fccksichtigen <code>hover: none</code> Ger\u00e4te ohne Hoverf\u00e4higkeit (Touch)"},{"location":"css/responsive/#layout-techniken","title":"\ud83e\uddf1 Layout-Techniken","text":"Technik Vorteil \u2705 <code>flexbox</code> F\u00fcr Spalten, Navigation, Listen etc. \u2705 <code>grid</code> F\u00fcr Raster, Cards, komplexe Layouts \u2705 <code>auto-fit</code> + <code>minmax()</code> Automatisch anpassbare Grid-Spalten <pre><code>.container {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n  gap: 1rem;\n}\n</code></pre>"},{"location":"css/responsive/#responsive-bilder-und-medien","title":"\ud83d\udcf7 Responsive Bilder und Medien","text":"<pre><code>img, video {\n  max-width: 100%;\n  height: auto;\n  display: block;\n}\n</code></pre> <p>\ud83d\udccc Vermeide feste Gr\u00f6\u00dfen in <code>px</code>, nutze <code>%</code>, <code>vw</code>, <code>clamp()</code></p>"},{"location":"css/responsive/#viewport-meta-tag-im-html","title":"\ud83e\uddea Viewport-Meta-Tag im HTML","text":"<p>Ohne dieses Tag sind mobile Layouts meist unbrauchbar:</p> <pre><code>&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /&gt;\n</code></pre>"},{"location":"css/responsive/#dynamische-einheiten","title":"\ud83d\udd04 Dynamische Einheiten","text":"Einheit Beschreibung <code>%</code> Relativ zum Elternelement <code>vw</code> Viewport-Breite (1vw = 1\u202f% der Bildschirmbreite) <code>vh</code> Viewport-H\u00f6he <code>clamp()</code> Dynamische Werte mit Grenzen: <code>clamp(min, ideal, max)</code> <p>Beispiel:</p> <pre><code>h1 {\n  font-size: clamp(1.2rem, 4vw, 3rem);\n}\n</code></pre>"},{"location":"css/responsive/#best-practices","title":"\u2705 Best Practices","text":"<ul> <li>\ud83d\udccf Verwende relativ skalierbare Einheiten</li> <li>\ud83d\udca1 Arbeite Mobile First mit <code>min-width</code>-Abfragen</li> <li>\ud83e\uddea Nutze DevTools zum Testen von Breakpoints</li> <li>\ud83d\udeab Vermeide feste H\u00f6hen oder feste <code>px</code>-Werte</li> <li>\ud83c\udfa8 Nutze <code>aspect-ratio</code> f\u00fcr Medienboxen</li> <li>\ud83e\uddf0 Erg\u00e4nze mit <code>container queries</code> (z.\u202fB. <code>@container</code>)</li> </ul>"},{"location":"css/responsive/#haufige-fehler","title":"\u274c H\u00e4ufige Fehler","text":"Problem L\u00f6sung Website \u201espringt\u201c bei Resize mit <code>box-sizing: border-box</code> stabilisieren Bilder \u00fcberlaufen <code>max-width: 100%</code> nicht vergessen Inhalte zu gro\u00df auf Mobilger\u00e4ten Viewport-Tag fehlt Unflexible Breakpoints Dynamische <code>clamp()</code> statt fixe <code>px</code>"},{"location":"css/responsive/#fazit","title":"\ud83d\udcda Fazit","text":"<p>Responsive Design ist kein Zusatz \u2013 es ist Pflicht in der modernen Webentwicklung. Mit den richtigen Tools wie Media Queries, Flex/Grid, dynamischen Einheiten und einem Mobile-First-Ansatz baust du Websites, die \u00fcberall gut aussehen und funktionieren.</p>"},{"location":"css/selektoren/","title":"\ud83c\udfaf CSS-Selektoren \u2013 Elemente gezielt ansprechen","text":""},{"location":"css/selektoren/#was-sind-selektoren","title":"\ud83e\udde9 Was sind Selektoren?","text":"<p>Selektoren bestimmen, welche HTML-Elemente durch eine CSS-Regel angesprochen und gestaltet werden. Sie sind das Fundament jeder Stilregel und erm\u00f6glichen sowohl einfache als auch hochkomplexe Auswahlstrukturen.</p> <p>\ud83d\udccc Ein CSS-Selektor ist wie ein \u201eZielsystem\u201c \u2013 er bestimmt, was gestaltet wird.</p>"},{"location":"css/selektoren/#einfache-selektoren","title":"\ud83d\udd39 Einfache Selektoren","text":"Typ Beispiel Bedeutung Element-Selektor <code>p</code> Alle <code>&lt;p&gt;</code>-Elemente Klassen-Selektor <code>.highlight</code> Alle Elemente mit <code>class=\"highlight\"</code> ID-Selektor <code>#logo</code> Das Element mit <code>id=\"logo\"</code> Universalselektor <code>*</code> Alle Elemente"},{"location":"css/selektoren/#beispiel","title":"Beispiel:","text":"<pre><code>p {\n  color: gray;\n}\n\n.highlight {\n  background-color: yellow;\n}\n\n#logo {\n  font-size: 2rem;\n}\n</code></pre>"},{"location":"css/selektoren/#kombinierte-selektoren","title":"\ud83d\udd38 Kombinierte Selektoren","text":""},{"location":"css/selektoren/#1-mehrere-elemente-gleichzeitig","title":"1. Mehrere Elemente gleichzeitig","text":"<pre><code>h1, h2, h3 {\n  font-family: sans-serif;\n}\n</code></pre>"},{"location":"css/selektoren/#2-nachbarschaft-und-hierarchie","title":"2. Nachbarschaft und Hierarchie","text":"Selektor Beschreibung <code>div p</code> Alle <code>&lt;p&gt;</code> innerhalb eines <code>&lt;div&gt;</code> <code>div &gt; p</code> Nur direkte Kinder <code>&lt;p&gt;</code> von <code>&lt;div&gt;</code> <code>p + span</code> Direkt danach folgendes <code>&lt;span&gt;</code> <code>p ~ span</code> Alle <code>&lt;span&gt;</code> auf derselben Ebene nach <code>&lt;p&gt;</code>"},{"location":"css/selektoren/#attribut-selektoren","title":"\ud83d\udd39 Attribut-Selektoren","text":"Syntax Bedeutung <code>[type]</code> Alle Elemente mit einem <code>type</code>-Attribut <code>[type=\"email\"]</code> Nur <code>type=\"email\"</code> <code>[href^=\"https\"]</code> beginnt mit <code>https</code> <code>[alt$=\".png\"]</code> endet mit <code>.png</code> <code>[data-info*=\"produkt\"]</code> enth\u00e4lt den Teilstring <code>produkt</code>"},{"location":"css/selektoren/#beispiel_1","title":"Beispiel:","text":"<pre><code>input[type=\"text\"] {\n  border: 1px solid #ccc;\n}\n</code></pre>"},{"location":"css/selektoren/#pseudo-klassen","title":"\ud83d\udd38 Pseudo-Klassen","text":"<p>Sprechen Zust\u00e4nde oder Positionen von Elementen an:</p> Selektor Beschreibung <code>:hover</code> Beim \u00dcberfahren mit der Maus <code>:focus</code> Element ist im Fokus (z.\u202fB. beim Tippen) <code>:first-child</code> Erstes Kindelement eines Elternteils <code>:last-of-type</code> Letztes Element vom gleichen Typ <code>:not(selector)</code> Negiert andere Selektoren"},{"location":"css/selektoren/#beispiel_2","title":"Beispiel:","text":"<pre><code>a:hover {\n  color: red;\n}\n\nul li:first-child {\n  font-weight: bold;\n}\n</code></pre>"},{"location":"css/selektoren/#pseudo-elemente","title":"\ud83d\udd38 Pseudo-Elemente","text":"<p>F\u00fcgen virtuelle Teile zu Elementen hinzu:</p> Pseudo-Element Funktion <code>::before</code> F\u00fcgt vor dem Inhalt etwas hinzu <code>::after</code> F\u00fcgt nach dem Inhalt etwas hinzu <code>::first-letter</code> Erste Buchstabe eines Blocks <code>::selection</code> Markierte Textstelle"},{"location":"css/selektoren/#beispiel_3","title":"Beispiel:","text":"<pre><code>p::before {\n  content: \"\ud83d\udd39 \";\n  color: blue;\n}\n</code></pre>"},{"location":"css/selektoren/#spezifitat-und-kaskade","title":"\u2696\ufe0f Spezifit\u00e4t und Kaskade","text":"Selektortyp Spezifit\u00e4t Element 0,0,1 Klasse 0,1,0 ID 1,0,0 Inline-Styles 1,0,0,0 <p>Je h\u00f6her die Spezifit\u00e4t, desto \"m\u00e4chtiger\" die Regel bei Konflikten.</p>"},{"location":"css/selektoren/#haufige-fehler","title":"\u274c H\u00e4ufige Fehler","text":"Fehler Empfehlung <code>#id.class</code> statt <code>#id .class</code> Leerzeichen beachten: selektiert Kind, nicht Kombination <code>h1 h2</code> erwartet Hierarchie Nur g\u00fcltig, wenn <code>&lt;h2&gt;</code> im <code>&lt;h1&gt;</code> ist <code>p:after</code> statt <code>p::after</code> Moderne Syntax ist doppelt gekennzeichnet"},{"location":"css/selektoren/#fazit","title":"\ud83d\udcda Fazit","text":"<p>CSS-Selektoren erm\u00f6glichen gezielte, flexible und m\u00e4chtige Gestaltungsm\u00f6glichkeiten. Vom simplen <code>h1</code> bis hin zu komplexen <code>[data-role^=\"btn\"]:not(.disabled):hover</code> \u2013 wer Selektoren beherrscht, beherrscht CSS.</p>"},{"location":"css/tips%26tricks/","title":"\ud83c\udfa9 CSS Tipps &amp; Tricks \u2013 Praktische Helfer f\u00fcr sauberes Webdesign","text":""},{"location":"css/tips%26tricks/#warum-css-tricks","title":"\ud83e\udde9 Warum CSS-Tricks?","text":"<p>CSS ist einfach zu lernen \u2013 aber schwer zu meistern. Mit diesen Alltagstricks, Best Practices und Helferlein kannst du sauberen, responsiven und wartbaren Code schreiben, der auch bei komplexen Layouts nicht auseinanderf\u00e4llt.</p>"},{"location":"css/tips%26tricks/#allgemeine-best-practices","title":"\ud83c\udfaf Allgemeine Best Practices","text":""},{"location":"css/tips%26tricks/#1-box-sizing-border-box-immer-verwenden","title":"1. <code>box-sizing: border-box</code> \u2013 Immer verwenden!","text":"<pre><code>*, *::before, *::after {\n  box-sizing: border-box;\n}\n</code></pre> <p>\u2705 Breite &amp; H\u00f6he beinhalten <code>padding</code> und <code>border</code> \u2192 leichter zu kontrollieren</p>"},{"location":"css/tips%26tricks/#2-zentrierung-mit-flexbox-horizontal-vertikal","title":"2. Zentrierung mit Flexbox (Horizontal + Vertikal)","text":"<pre><code>.center {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n</code></pre> <p>\u2705 Der universelle Trick zur perfekten Zentrierung</p>"},{"location":"css/tips%26tricks/#3-root-css-variablen-nutzen","title":"3. <code>:root</code> + CSS-Variablen nutzen","text":"<pre><code>:root {\n  --main-color: #007acc;\n  --spacing: 1.5rem;\n}\n\n.button {\n  background-color: var(--main-color);\n  padding: var(--spacing);\n}\n</code></pre> <p>\u2705 Einheitliches Design, einfache \u00c4nderungen, besser skalierbar</p>"},{"location":"css/tips%26tricks/#4-lucken-lieber-mit-gap-statt-margin","title":"4. L\u00fccken lieber mit <code>gap</code> statt <code>margin</code>","text":"<pre><code>.container {\n  display: flex;\n  gap: 1rem;\n}\n</code></pre> <p>\u2705 Kein \"margin collapsing\", keine negativen Seitenabst\u00e4nde \u2013 ideal f\u00fcr moderne Layouts</p>"},{"location":"css/tips%26tricks/#5-bilder-responsiv-machen","title":"5. Bilder responsiv machen","text":"<pre><code>img {\n  max-width: 100%;\n  height: auto;\n  display: block;\n}\n</code></pre> <p>\u2705 Kein \u00dcberlaufen \u2013 ideal f\u00fcr responsive Designs</p>"},{"location":"css/tips%26tricks/#6-versteckte-inhalte-barrierefrei-entfernen","title":"6. Versteckte Inhalte barrierefrei entfernen","text":"<pre><code>.hidden {\n  position: absolute;\n  width: 1px;\n  height: 1px;\n  overflow: hidden;\n  clip: rect(0, 0, 0, 0);\n}\n</code></pre> <p>\u2705 F\u00fcr Screenreader sichtbar, f\u00fcr visuelle Darstellung unsichtbar</p>"},{"location":"css/tips%26tricks/#7-scrollbar-vermeiden-bei-100-hohen","title":"7. Scrollbar vermeiden bei 100%-H\u00f6hen","text":"<pre><code>html, body {\n  height: 100%;\n  margin: 0;\n}\n</code></pre> <p>\u2705 Verhindert unn\u00f6tigen Scrollbar durch <code>body</code>-Standardmarge</p>"},{"location":"css/tips%26tricks/#8-flieende-schriftgroen-mit-clamp","title":"8. Flie\u00dfende Schriftgr\u00f6\u00dfen mit <code>clamp()</code>","text":"<pre><code>h1 {\n  font-size: clamp(1.5rem, 4vw, 3rem);\n}\n</code></pre> <p>\u2705 Reagiert auf Viewportbreite \u2013 responsive ohne Media Query</p>"},{"location":"css/tips%26tricks/#9-aspect-ratio-fur-medienboxen","title":"9. <code>aspect-ratio</code> f\u00fcr Medienboxen","text":"<pre><code>.video {\n  aspect-ratio: 16 / 9;\n  width: 100%;\n}\n</code></pre> <p>\u2705 Kein \u201ePadding-Hack\u201c mehr n\u00f6tig \u2013 funktioniert f\u00fcr Bilder, Videos, <code>div</code>s</p>"},{"location":"css/tips%26tricks/#10-scroll-behavior-smooth-fur-weiches-scrollen","title":"10. <code>scroll-behavior: smooth</code> f\u00fcr weiches Scrollen","text":"<pre><code>html {\n  scroll-behavior: smooth;\n}\n</code></pre> <p>\u2705 Sanftes Scrollen zu Ankern ohne JavaScript</p>"},{"location":"css/tips%26tricks/#bonus-tricks","title":"\ud83e\uddf0 Bonus-Tricks","text":""},{"location":"css/tips%26tricks/#schatten-tiefe","title":"Schatten &amp; Tiefe","text":"<pre><code>.card {\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);\n}\n</code></pre>"},{"location":"css/tips%26tricks/#text-overflow-mit","title":"Text-Overflow mit <code>\u2026</code>","text":"<pre><code>.ellipsis {\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n</code></pre>"},{"location":"css/tips%26tricks/#kein-text-highlight-z-b-bei-buttons","title":"Kein Text-Highlight (z.\u202fB. bei Buttons)","text":"<pre><code>button {\n  user-select: none;\n}\n</code></pre>"},{"location":"css/tips%26tricks/#animation-beim-laden","title":"Animation beim Laden","text":"<pre><code>.fade-in {\n  animation: fade 1s ease-in;\n}\n@keyframes fade {\n  from { opacity: 0; }\n  to   { opacity: 1; }\n}\n</code></pre>"},{"location":"css/tips%26tricks/#tools-die-dir-helfen","title":"\u2705 Tools, die dir helfen","text":"<ul> <li>https://caniuse.com/ \u2013 Feature-Unterst\u00fctzung pr\u00fcfen</li> <li>https://css-tricks.com/ \u2013 Tutorials &amp; Hacks</li> <li>https://web.dev/ \u2013 Google Dev Best Practices</li> <li>https://layout.bradwoods.io/ \u2013 Flex/Grid Cheatsheet</li> </ul>"},{"location":"css/tips%26tricks/#fazit","title":"\ud83d\udcda Fazit","text":"<p>Diese CSS-Tricks helfen dir, effizient, wartbar und modern zu arbeiten. Wenn du sie regelm\u00e4\u00dfig einsetzt, entwickelst du robuste Layouts, die auch unter Zeitdruck und auf vielen Ger\u00e4ten sauber funktionieren.</p>"},{"location":"data_science/einf%C3%BChrung/","title":"Alle Data Science Themen werden gerade geschrieben! :)","text":""},{"location":"data_science/matplotlib/einf%C3%BChrung/","title":"Hier entsteht Wissen!","text":""},{"location":"data_science/numpy/einf%C3%BChrung/","title":"Hier entsteht Wissen!","text":""},{"location":"data_science/pandas/einf%C3%BChrung/","title":"Hier entsteht Wissen!","text":""},{"location":"data_science/scikitlearn/einf%C3%BChrung/","title":"Hier entsteht Wissen!","text":""},{"location":"datenbank/einf%C3%BChrung/","title":"Alles \u00fcber datenbanken","text":""},{"location":"datenbank/SQL/einf%C3%BChrung/","title":"Hier wird SQL behandelt!","text":""},{"location":"datenbank/noSQL/einf%C3%BChrung/","title":"Hier wird noSQL behandelt!","text":""},{"location":"deeplearning/einf%C3%BChrung/","title":"Ich bin dran!","text":""},{"location":"deeplearning/cnn/einf%C3%BChrung/","title":"Hier entsteht Wissen!","text":""},{"location":"deeplearning/neuronalenetze/einf%C3%BChrung/","title":"Hier entsteht Wissen!","text":""},{"location":"deeplearning/pytorch/einf%C3%BChrung/","title":"Hier entsteht Wissen!","text":""},{"location":"deeplearning/rnn/einf%C3%BChrung/","title":"Hier entsteht Wissen!","text":""},{"location":"deeplearning/tensorflow/einf%C3%BChrung/","title":"Hier entsteht Wissen!","text":""},{"location":"fastapi/einf%C3%BChrung/","title":"Backend Entwicklung mit FastAPI ist dran! :)","text":""},{"location":"fastapi/REST/einf%C3%BChrung/","title":"Hier wirst du alles \u00fcber rest erfahren.","text":""},{"location":"html/basics/","title":"\ud83e\uddf1 Grundstruktur eines HTML-Dokuments","text":"<p>Ein HTML-Dokument folgt einer festen Grundstruktur. Diese Struktur hilft dem Browser, die Inhalte korrekt darzustellen und zu interpretieren.</p>"},{"location":"html/basics/#beispiel-grundgerust","title":"\ud83d\udcc4 Beispiel: Grundger\u00fcst","text":"<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"de\"&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"UTF-8\" /&gt;\n    &lt;title&gt;Meine Webseite&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;h1&gt;Willkommen!&lt;/h1&gt;\n    &lt;p&gt;Dies ist meine erste HTML-Seite.&lt;/p&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"html/basics/#erklarung-der-bestandteile","title":"\ud83d\udd0d Erkl\u00e4rung der Bestandteile","text":"Element Beschreibung <code>&lt;!DOCTYPE html&gt;</code> Gibt an, dass es sich um ein HTML5-Dokument handelt. Wichtig f\u00fcr die Browserdarstellung. <code>&lt;html lang=\"de\"&gt;</code> Wurzel-Tag des Dokuments. Das Attribut <code>lang=\"de\"</code> gibt die Sprache (Deutsch) an. <code>&lt;head&gt;</code> Enth\u00e4lt Meta-Informationen, die nicht direkt sichtbar sind, z.\u202fB. Titel, Zeichencodierung, Stylesheets, Skripte. <code>&lt;meta charset=\"UTF-8\"&gt;</code> Gibt die Zeichenkodierung an. UTF-8 ist Standard und unterst\u00fctzt alle Zeichen. <code>&lt;title&gt;</code> Der Titel der Seite \u2013 wird im Tab des Browsers angezeigt. <code>&lt;body&gt;</code> Der sichtbare Inhalt der Webseite (Text, Bilder, Links etc.) <code>&lt;h1&gt;</code>, <code>&lt;p&gt;</code> usw. Strukturierende Tags f\u00fcr \u00dcberschriften, Abs\u00e4tze usw. \u2013 sie erscheinen direkt im Browserfenster."},{"location":"html/basics/#zusatzliche-hinweise","title":"\u2705 Zus\u00e4tzliche Hinweise","text":"<ul> <li>Nur ein <code>&lt;html&gt;</code>-, <code>&lt;head&gt;</code>- und <code>&lt;body&gt;</code>-Tag pro Dokument erlaubt.</li> <li>Der <code>&lt;head&gt;</code> enth\u00e4lt keine sichtbaren Inhalte \u2013 daf\u00fcr ist ausschlie\u00dflich der <code>&lt;body&gt;</code> da.</li> <li>Die Einhaltung dieser Struktur verbessert Kompatibilit\u00e4t, Barrierefreiheit und SEO.</li> </ul>"},{"location":"html/basics/#tipps","title":"\ud83d\udca1 Tipps","text":"<ul> <li>Immer <code>&lt;!DOCTYPE html&gt;</code> verwenden, damit der Browser im sogenannten Standards-Modus rendert.</li> <li>Achte auf saubere Einr\u00fcckung \u2013 das erh\u00f6ht die Lesbarkeit.</li> <li>Nutze <code>lang=\"...\"</code> f\u00fcr Sprachdefinition \u2013 wichtig f\u00fcr Suchmaschinen und Screenreader.</li> </ul>"},{"location":"html/csp/","title":"\ud83d\udd10 Content Security Policy (CSP) \u2013 Schutz vor XSS &amp; Co.","text":""},{"location":"html/csp/#was-ist-csp","title":"\ud83e\udde9 Was ist CSP?","text":"<p>Content Security Policy (CSP) ist eine Sicherheitsfunktion, mit der du festlegen kannst, welche Inhalte (Skripte, Styles, Bilder usw.) auf deiner Webseite erlaubt sind. Ziel ist es, Cross-Site Scripting (XSS), Code Injection, Clickjacking und andere Angriffe zu verhindern.</p> <p>CSP wird in der Regel per HTTP-Header gesetzt, kann aber auch \u00fcber ein <code>&lt;meta&gt;</code>-Tag eingebunden werden (nicht empfohlen f\u00fcr vollst\u00e4ndige Richtlinien).</p>"},{"location":"html/csp/#beispiel-einfache-csp-uber-http-header","title":"\u2705 Beispiel: Einfache CSP \u00fcber HTTP-Header","text":"<pre><code>Content-Security-Policy: default-src 'self'\n</code></pre> <p>\u27a1 Bedeutet: Nur Ressourcen vom gleichen Ursprung (Domain) d\u00fcrfen geladen werden.</p>"},{"location":"html/csp/#einbindung-per-html-meta-tag-nur-basisrichtlinien","title":"\ud83d\udd27 Einbindung per HTML <code>&lt;meta&gt;</code>-Tag (nur Basisrichtlinien)","text":"<pre><code>&lt;meta http-equiv=\"Content-Security-Policy\" content=\"default-src 'self'; script-src 'self'\" /&gt;\n</code></pre> <p>\u26a0\ufe0f Achtung: Nicht alle CSP-Funktionen sind \u00fcber <code>&lt;meta&gt;</code> verf\u00fcgbar \u2013 HTTP-Header wird empfohlen.</p>"},{"location":"html/csp/#die-wichtigsten-direktiven","title":"\ud83d\udcda Die wichtigsten Direktiven","text":"Direktive Bedeutung <code>default-src</code> Standard-Quelle f\u00fcr alle Ressourcen <code>script-src</code> F\u00fcr JavaScript-Dateien und Inline-Skripte <code>style-src</code> F\u00fcr CSS-Dateien und Inline-Styles <code>img-src</code> F\u00fcr Bilder <code>font-src</code> F\u00fcr Schriftarten <code>connect-src</code> F\u00fcr XHR, Fetch, WebSockets <code>media-src</code> F\u00fcr Video/Audio-Dateien <code>frame-src</code> F\u00fcr <code>&lt;iframe&gt;</code>-Inhalte <code>object-src</code> F\u00fcr <code>&lt;object&gt;</code>, <code>&lt;embed&gt;</code>, <code>&lt;applet&gt;</code> <code>base-uri</code> F\u00fcr das <code>&lt;base&gt;</code>-Tag <code>form-action</code> Wo Formulare abgeschickt werden d\u00fcrfen <code>frame-ancestors</code> Wer die Seite per <code>&lt;iframe&gt;</code> einbetten darf <code>report-uri</code> URL f\u00fcr CSP-Verletzungsberichte (deprecated) <code>report-to</code> Neuere Methode f\u00fcr Reporting-API"},{"location":"html/csp/#praxisbeispiele","title":"\ud83e\uddea Praxisbeispiele","text":""},{"location":"html/csp/#1-nur-eigene-ressourcen-erlauben","title":"1. \ud83d\udd10 Nur eigene Ressourcen erlauben","text":"<pre><code>Content-Security-Policy: default-src 'self'\n</code></pre> <p>\u27a1 Keine externen Skripte, Fonts, Styles erlaubt.</p>"},{"location":"html/csp/#2-bestimmte-domains-erlauben","title":"2. \ud83c\udf10 Bestimmte Domains erlauben","text":"<pre><code>Content-Security-Policy: \n  default-src 'self';\n  img-src 'self' https://cdn.example.com;\n  script-src 'self' https://apis.example.com;\n</code></pre> <p>\u27a1 Skripte und Bilder d\u00fcrfen zus\u00e4tzlich von definierten Domains geladen werden.</p>"},{"location":"html/csp/#3-dynamisches-laden-mit-unsafe-inline-unsafe-eval-vermeiden","title":"3. \ud83d\udd04 Dynamisches Laden mit <code>unsafe-inline</code> / <code>unsafe-eval</code> (\u26a0\ufe0f vermeiden!)","text":"<pre><code>Content-Security-Policy: \n  script-src 'self' 'unsafe-inline';\n</code></pre> <p>\u26a0\ufe0f Verwendet unsichere Inline-Skripte \u2013 nur im Notfall einsetzen, z.\u202fB. bei alten Projekten.</p>"},{"location":"html/csp/#4-csp-mit-berichtsfunktion","title":"4. \ud83d\udce3 CSP mit Berichtsfunktion","text":"<pre><code>Content-Security-Policy: \n  default-src 'self';\n  report-uri /csp-violation-report\n</code></pre> <p>\u27a1 Wenn Verst\u00f6\u00dfe auftreten, werden JSON-Berichte an den Server gesendet. Alternative f\u00fcr moderne Browser: <code>report-to</code> verwenden.</p>"},{"location":"html/csp/#tipps-fur-sicheres-setup","title":"\ud83e\udde0 Tipps f\u00fcr sicheres Setup","text":"<ul> <li>Kein <code>unsafe-inline</code> oder <code>unsafe-eval</code> verwenden \u2013 au\u00dfer du wei\u00dft genau, was du tust.</li> <li>Nutze Nonces oder Hashes, um gezielt einzelne Inline-Skripte freizugeben.</li> <li>Starte mit CSP in \"Report-Only\" Modus, um Verst\u00f6\u00dfe zu protokollieren, ohne Inhalte zu blockieren.</li> </ul>"},{"location":"html/csp/#beispiel-report-only","title":"Beispiel: Report-Only","text":"<pre><code>Content-Security-Policy-Report-Only: default-src 'self'; report-uri /csp-report\n</code></pre>"},{"location":"html/csp/#verwendung-von-nonces-empfohlen","title":"\ud83d\udd10 Verwendung von Nonces (empfohlen)","text":"<pre><code>&lt;script nonce=\"abc123\"&gt;console.log(\"Sicherer Inline-Script\");&lt;/script&gt;\n</code></pre> <pre><code>Content-Security-Policy: script-src 'nonce-abc123'\n</code></pre> <p>\u27a1 Nur das Inline-Script mit dem passenden <code>nonce</code> darf ausgef\u00fchrt werden.</p>"},{"location":"html/csp/#tools-validierung","title":"\ud83d\udee0 Tools &amp; Validierung","text":"<ul> <li>CSP Evaluator (Google)</li> <li>Mozilla CSP Guide</li> <li>Report URI \u2013 Visualisierung von CSP-Verst\u00f6\u00dfen</li> </ul>"},{"location":"html/csp/#fazit","title":"\ud83d\udcda Fazit","text":"<p>CSP ist ein leistungsstarkes Werkzeug, um deine Website vor h\u00e4ufigen Web-Angriffen zu sch\u00fctzen. Richtig eingesetzt, verhindert es das Nachladen unerw\u00fcnschter Inhalte und das Ausf\u00fchren von sch\u00e4dlichem JavaScript.</p> <p>Es lohnt sich, etwas Zeit in die Konfiguration zu investieren \u2013 gerade bei modernen Webanwendungen und \u00f6ffentlichen Plattformen.</p>"},{"location":"html/einf%C3%BChrung/","title":"Was ist HTML?","text":"<p>HTML steht f\u00fcr HyperText Markup Language und ist die standardisierte Auszeichnungssprache zur Strukturierung von Inhalten im Web. Sie bildet das Grundger\u00fcst jeder Webseite und definiert, welche Inhalte auf einer Seite stehen und wie sie strukturiert sind \u2013 zum Beispiel \u00dcberschriften, Abs\u00e4tze, Bilder oder Links.</p> <p>HTML allein erzeugt jedoch keine optisch ansprechende oder interaktive Webseite \u2013 daf\u00fcr werden CSS (Cascading Style Sheets) f\u00fcr das Design und JavaScript f\u00fcr dynamisches Verhalten verwendet.</p>"},{"location":"html/einf%C3%BChrung/#grundidee-von-html","title":"\ud83e\uddf1 Grundidee von HTML","text":"<p>HTML basiert auf sogenannten Tags (dt. \"Markierungen\"). Diese bestehen aus einem \u00f6ffnenden und einem schlie\u00dfenden Element, z.\u202fB.:</p> <pre><code>&lt;p&gt;Dies ist ein Absatz&lt;/p&gt;\n</code></pre> <p>Das <code>&lt;p&gt;</code> ist ein Absatz-Tag. Es signalisiert dem Browser, dass es sich bei dem Inhalt um einen Absatz handelt. Es gibt Tags f\u00fcr viele verschiedene Zwecke:</p> <ul> <li><code>&lt;h1&gt;</code> bis <code>&lt;h6&gt;</code> \u2013 \u00dcberschriften  </li> <li><code>&lt;a&gt;</code> \u2013 Links  </li> <li><code>&lt;img&gt;</code> \u2013 Bilder  </li> <li><code>&lt;ul&gt;</code> / <code>&lt;li&gt;</code> \u2013 Listen  </li> <li><code>&lt;form&gt;</code> / <code>&lt;input&gt;</code> \u2013 Formulare  </li> <li><code>&lt;div&gt;</code> und <code>&lt;span&gt;</code> \u2013 Layout und Gruppierung  </li> <li>und viele mehr.</li> </ul> <p>Tags k\u00f6nnen auch Attribute enthalten, die zus\u00e4tzliche Informationen bereitstellen:</p> <pre><code>&lt;img src=\"bild.jpg\" alt=\"Beispielbild\" width=\"200\" /&gt;\n</code></pre> <ul> <li><code>src</code> gibt die Bildquelle an  </li> <li><code>alt</code> liefert eine Beschreibung (wichtig f\u00fcr Barrierefreiheit)  </li> <li><code>width</code> definiert die Breite in Pixeln</li> </ul>"},{"location":"html/einf%C3%BChrung/#kurze-geschichte-von-html","title":"\ud83d\udd70\ufe0f Kurze Geschichte von HTML","text":""},{"location":"html/einf%C3%BChrung/#19891990-die-geburt-des-web","title":"1989\u20131990 \u2013 Die Geburt des Web","text":"<p>HTML wurde Ende der 1980er/Anfang der 1990er von Tim Berners-Lee, einem Physiker am CERN, entwickelt. Sein Ziel war es, ein System zu schaffen, mit dem Wissenschaftler Dokumente einfach miteinander teilen konnten. Daraus entstand das World Wide Web.</p> <p>\ud83d\udc49 Das erste HTML-Dokument entstand 1991.</p>"},{"location":"html/einf%C3%BChrung/#1993-html-wird-offentlich","title":"1993 \u2013 HTML wird \u00f6ffentlich","text":"<p>Das erste ver\u00f6ffentlichte HTML-Spezifikationsdokument war der sogenannte HTML Tags Guide von 1993. Damals gab es nur 18 Tags.</p>"},{"location":"html/einf%C3%BChrung/#mitte-1990er-browserkrieg-und-chaos","title":"Mitte 1990er \u2013 Browserkrieg und Chaos","text":"<p>Mit dem Aufkommen von Netscape und Internet Explorer entstand ein \u201eBrowserkrieg\u201c. Beide Firmen f\u00fcgten eigene HTML-Erweiterungen hinzu, was zu Kompatibilit\u00e4tsproblemen f\u00fchrte.</p>"},{"location":"html/einf%C3%BChrung/#1997-w3c-ubernimmt","title":"1997 \u2013 W3C \u00fcbernimmt","text":"<p>Das World Wide Web Consortium (W3C) \u00fcbernahm die Standardisierung und ver\u00f6ffentlichte HTML 4.01 im Jahr 1999. Es war der erste gro\u00dfe Versuch, Ordnung in die vielen Varianten zu bringen.</p>"},{"location":"html/einf%C3%BChrung/#20082014-html5-kommt","title":"2008\u20132014 \u2013 HTML5 kommt","text":"<p>HTML5 wurde \u00fcber Jahre entwickelt und 2014 offiziell abgeschlossen. Es brachte viele moderne Funktionen mit:</p> <ul> <li>Native Audio-/Video-Unterst\u00fctzung  </li> <li><code>&lt;canvas&gt;</code> f\u00fcr Grafik  </li> <li>Semantische Elemente wie <code>&lt;article&gt;</code>, <code>&lt;section&gt;</code>, <code>&lt;nav&gt;</code> </li> <li>Offline-Support (z.\u202fB. durch Service Worker)</li> </ul> <p>\ud83d\udccc Hinweis: HTML5 wird heute als sogenannter Living Standard vom WHATWG (Web Hypertext Application Technology Working Group) weiterentwickelt \u2013 es bleibt also nie \u201estehen\u201c.</p>"},{"location":"html/einf%C3%BChrung/#wichtige-eigenschaften","title":"\ud83d\udccb Wichtige Eigenschaften","text":"<ul> <li>Textbasiert und leicht zu lernen  </li> <li>Semantisch, d.\u202fh. es beschreibt die Bedeutung der Inhalte  </li> <li>Plattformunabh\u00e4ngig und l\u00e4uft in jedem modernen Browser  </li> <li>Funktioniert ideal in Kombination mit CSS und JavaScript </li> <li>Grundlage moderner Webentwicklung</li> </ul> <p>\ud83d\udccc Zusatzwissen: Wenn HTML-Tags fehlen oder falsch verschachtelt sind, versuchen Browser dennoch, die Seite m\u00f6glichst sinnvoll darzustellen \u2013 das nennt man Fehlertoleranz.</p>"},{"location":"html/einf%C3%BChrung/#beispiel-mini-webseite","title":"\ud83d\udcc4 Beispiel: Mini-Webseite","text":"<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"de\"&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"UTF-8\" /&gt;\n    &lt;title&gt;Meine erste HTML-Seite&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;h1&gt;Hallo Welt!&lt;/h1&gt;\n    &lt;p&gt;Dies ist meine erste Webseite mit HTML.&lt;/p&gt;\n    &lt;a href=\"https://example.com\"&gt;Mehr erfahren&lt;/a&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>\ud83d\udc68\u200d\ud83d\udcbb Du kannst HTML direkt im Browser testen oder Tools wie Visual Studio Code, JSFiddle oder CodePen nutzen.</p>"},{"location":"html/einf%C3%BChrung/#bonus-html-code-prufen","title":"\ud83d\udd0d Bonus: HTML-Code pr\u00fcfen","text":"<p>Verwende den offiziellen W3C Markup Validator, um deinen HTML-Code auf Fehler zu \u00fcberpr\u00fcfen und saubere, g\u00fcltige Webseiten zu erstellen.</p>"},{"location":"html/einf%C3%BChrung/#fazit","title":"\ud83d\udcda Fazit","text":"<p>HTML ist das R\u00fcckgrat des Internets. Ohne HTML g\u00e4be es keine Webseiten, keine Blogs, keine Online-Shops. Auch wenn es auf den ersten Blick simpel wirkt, ist es die Grundlage f\u00fcr alles, was im Web passiert.</p> <p>\u2728 Wer Webseiten bauen m\u00f6chte, kommt an HTML nicht vorbei \u2013 es ist das Fundament jeder digitalen Pr\u00e4senz.</p>"},{"location":"html/js/","title":"<code>&lt;script&gt;</code> \u2013 Einbindung von JavaScript","text":""},{"location":"html/js/#funktion","title":"\ud83e\udde9 Funktion","text":"<p>Das <code>&lt;script&gt;</code>-Tag wird in HTML verwendet, um JavaScript-Code in ein HTML-Dokument einzubetten oder zu verlinken. JavaScript ist eine Client-seitige Skriptsprache, mit der man Webseiten interaktiv, dynamisch und reaktiv gestalten kann.</p>"},{"location":"html/js/#grundverwendung","title":"\u2705 Grundverwendung","text":""},{"location":"html/js/#1-internes-skript-direkt-im-html","title":"1. \ud83d\udcc4 Internes Skript (direkt im HTML)","text":"<pre><code>&lt;script&gt;\n  alert(\"Willkommen auf der Seite!\");\n&lt;/script&gt;\n</code></pre> <p>\ud83d\udc49 F\u00fchrt den Code direkt beim Laden der Seite aus.</p>"},{"location":"html/js/#2-externes-skript-uber-datei-einbinden","title":"2. \ud83d\udd17 Externes Skript (\u00fcber Datei einbinden)","text":"<pre><code>&lt;script src=\"main.js\"&gt;&lt;/script&gt;\n</code></pre> <p>\ud83d\udc49 Bindet die Datei <code>main.js</code> ein. Vorteil: Wiederverwendbarkeit und saubere Trennung von Logik und Markup.</p>"},{"location":"html/js/#wichtige-attribute-von-script","title":"\ud83d\udd27 Wichtige Attribute von <code>&lt;script&gt;</code>","text":"Attribut Beschreibung <code>src</code> Pfad zur externen JavaScript-Datei <code>type</code> MIME-Type (meist <code>text/javascript</code>, aber optional) <code>async</code> F\u00fchrt das Skript asynchron aus \u2013 l\u00e4dt parallel zum HTML <code>defer</code> F\u00fchrt das Skript nach dem Parsen des HTML-Dokuments aus <code>crossorigin</code> F\u00fcr CORS (Cross-Origin Resource Sharing) <code>nomodule</code> Skript wird nicht geladen, wenn der Browser Module (<code>type=\"module\"</code>) unterst\u00fctzt <code>integrity</code> Pr\u00fcft die Integrit\u00e4t des geladenen Skripts (Subresource Integrity) <code>referrerpolicy</code> Kontrolle \u00fcber <code>Referer</code>-Header beim Laden des Skripts"},{"location":"html/js/#platzierung-im-html","title":"\ud83d\udea6 Platzierung im HTML","text":""},{"location":"html/js/#im-head","title":"Im <code>&lt;head&gt;</code>","text":"<pre><code>&lt;head&gt;\n  &lt;script src=\"head-script.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n</code></pre> <p>\ud83d\udd34 Problem: Blockiert das Laden der Seite, wenn kein <code>defer</code> oder <code>async</code> verwendet wird.</p>"},{"location":"html/js/#vor-body","title":"Vor <code>&lt;/body&gt;</code>","text":"<pre><code>&lt;body&gt;\n  ...\n  &lt;script src=\"script.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n</code></pre> <p>\ud83d\udfe2 Besser: Wird geladen, nachdem der HTML-Inhalt geparst wurde.</p>"},{"location":"html/js/#defer-vs-async","title":"\u26a1 <code>defer</code> vs. <code>async</code>","text":"Attribut Ausf\u00fchrung Reihenfolge <code>defer</code> Nach dem HTML-Parsing In Dokument-Reihenfolge <code>async</code> Sobald geladen Reihenfolge nicht garantiert <p>Beispiel:</p> <pre><code>&lt;script src=\"modulA.js\" defer&gt;&lt;/script&gt;\n&lt;script src=\"modulB.js\" defer&gt;&lt;/script&gt;\n</code></pre> <p>\u2705 <code>modulA</code> wird vor <code>modulB</code> ausgef\u00fchrt \u2013 Reihenfolge wird eingehalten.</p>"},{"location":"html/js/#typemodule-fur-moderne-javascript-module","title":"\ud83d\udce6 <code>type=\"module\"</code> (f\u00fcr moderne JavaScript-Module)","text":"<pre><code>&lt;script type=\"module\" src=\"app.js\"&gt;&lt;/script&gt;\n</code></pre> <p>\u27a1 Erm\u00f6glicht das Verwenden von ES6-Import/Export, z.\u202fB.:</p> <pre><code>// app.js\nimport { addiere } from './utils.js';\nconsole.log(addiere(2, 3));\n</code></pre>"},{"location":"html/js/#sicherheit-subresource-integrity-sri","title":"\ud83d\udd12 Sicherheit: Subresource Integrity (SRI)","text":"<pre><code>&lt;script\n  src=\"https://cdn.example.com/library.js\"\n  integrity=\"sha384-xyz123\u2026\"\n  crossorigin=\"anonymous\"\n&gt;&lt;/script&gt;\n</code></pre> <p>\u27a1 Stellt sicher, dass das externe Skript nicht manipuliert wurde.</p>"},{"location":"html/js/#beispiele","title":"\ud83e\uddea Beispiele","text":""},{"location":"html/js/#1-javascript-im-html","title":"1. JavaScript im HTML","text":"<pre><code>&lt;script&gt;\n  function begruessen(name) {\n    alert(\"Hallo, \" + name + \"!\");\n  }\n&lt;/script&gt;\n\n&lt;button onclick=\"begruessen('Florian')\"&gt;Sag Hallo&lt;/button&gt;\n</code></pre>"},{"location":"html/js/#2-interaktive-einbindung-z-b-dom-manipulation","title":"2. Interaktive Einbindung (z.\u202fB. DOM-Manipulation)","text":"<pre><code>&lt;script&gt;\n  document.addEventListener(\"DOMContentLoaded\", function () {\n    document.getElementById(\"demo\").textContent = \"Inhalt per JavaScript ge\u00e4ndert!\";\n  });\n&lt;/script&gt;\n\n&lt;p id=\"demo\"&gt;Urspr\u00fcnglicher Inhalt&lt;/p&gt;\n</code></pre>"},{"location":"html/js/#best-practices","title":"\ud83d\udd0d Best Practices","text":"<ul> <li>JavaScript-Dateien modularisieren und auslagern.</li> <li>Nie <code>script</code>-Tags im <code>&lt;head&gt;</code> ohne <code>defer</code> \u2013 sonst wird das Laden blockiert.</li> <li>Kein inline-JS f\u00fcr gro\u00dfe Funktionen \u2013 Trennung von Struktur und Logik!</li> <li>Verwende <code>type=\"module\"</code> f\u00fcr moderne, saubere Projekte.</li> <li>Nutze <code>defer</code> statt <code>async</code>, wenn die Ausf\u00fchrungsreihenfolge entscheidend ist.</li> </ul>"},{"location":"html/js/#barrierefreiheit-performance","title":"\u267f Barrierefreiheit &amp; Performance","text":"<ul> <li>Stelle sicher, dass deine Skripte nicht essenzielle Inhalte ersetzen, die nicht auch ohne JS verf\u00fcgbar sind.</li> <li>JavaScript kann Inhalte dynamisch erzeugen \u2013 achte auf Lesbarkeit f\u00fcr Screenreader.</li> <li>Verwende <code>aria-</code>-Attribute oder <code>role</code>-Zuweisungen bei dynamischen DOM-Manipulationen.</li> </ul>"},{"location":"html/js/#fazit","title":"\ud83d\udcda Fazit","text":"<p>Das <code>&lt;script&gt;</code>-Element ist der Schl\u00fcssel zur Interaktivit\u00e4t im Web. Egal ob du einfache Funktionen oder ganze Anwendungen umsetzt \u2013 korrekt eingesetzte Skripte machen Webseiten lebendig, dynamisch und benutzerfreundlich.</p>"},{"location":"html/link/","title":"<code>&lt;link&gt;</code> \u2013 Verkn\u00fcpfung von externen Ressourcen","text":""},{"location":"html/link/#funktion","title":"\ud83e\udde9 Funktion","text":"<p>Das <code>&lt;link&gt;</code>-Tag wird verwendet, um ein HTML-Dokument mit externen Ressourcen zu verkn\u00fcpfen. Am h\u00e4ufigsten wird es genutzt, um externe CSS-Dateien einzubinden, aber es kann auch Icons, Fonts, Feeds oder Preloads referenzieren.</p> <p>Hinweis: <code>&lt;link&gt;</code> ist ein self-closing Element \u2013 es hat kein schlie\u00dfendes Tag.</p>"},{"location":"html/link/#grundverwendung-fur-stylesheets","title":"\u2705 Grundverwendung f\u00fcr Stylesheets","text":"<pre><code>&lt;head&gt;\n  &lt;link rel=\"stylesheet\" href=\"styles.css\" /&gt;\n&lt;/head&gt;\n</code></pre> <p>Was passiert? \ud83d\udc49 Die CSS-Datei <code>styles.css</code> wird geladen und auf das aktuelle Dokument angewendet.</p>"},{"location":"html/link/#wichtige-attribute","title":"\ud83d\udd27 Wichtige Attribute","text":"Attribut Beschreibung <code>rel</code> Art der Beziehung zwischen HTML-Dokument und Ressource (z.\u202fB. <code>stylesheet</code>, <code>icon</code>, <code>preload</code>) <code>href</code> Pfad zur externen Ressource <code>type</code> MIME-Typ (bei Stylesheets meist <code>text/css</code>, optional) <code>media</code> Definiert, f\u00fcr welches Zielmedium die Ressource gilt (z.\u202fB. <code>screen</code>, <code>print</code>, <code>all</code>) <code>as</code> Typ der Ressource (z.\u202fB. <code>style</code>, <code>script</code>, <code>image</code>) \u2013 wichtig f\u00fcr <code>rel=\"preload\"</code> <code>crossorigin</code> F\u00fcr Cross-Origin Requests (z.\u202fB. bei Fonts/CDNs) <code>integrity</code> Sicherheitspr\u00fcfung \u00fcber SRI (Subresource Integrity)"},{"location":"html/link/#beispiele","title":"\ud83e\uddea Beispiele","text":""},{"location":"html/link/#1-externes-stylesheet-einbinden","title":"1. \ud83c\udfa8 Externes Stylesheet einbinden","text":"<pre><code>&lt;link rel=\"stylesheet\" href=\"styles/main.css\" /&gt;\n</code></pre> <p>\ud83d\udc49 Trennung von Layout (CSS) und Struktur (HTML).</p>"},{"location":"html/link/#2-nur-fur-druckmedien","title":"2. \ud83d\udcc4 Nur f\u00fcr Druckmedien","text":"<pre><code>&lt;link rel=\"stylesheet\" href=\"print.css\" media=\"print\" /&gt;\n</code></pre> <p>\ud83d\udc49 Wird nur beim Drucken der Seite angewendet.</p>"},{"location":"html/link/#3-preload-von-ressourcen","title":"3. \ud83c\udfaf Preload von Ressourcen","text":"<pre><code>&lt;link rel=\"preload\" href=\"fonts/myfont.woff2\" as=\"font\" type=\"font/woff2\" crossorigin=\"anonymous\" /&gt;\n</code></pre> <p>\ud83d\udc49 Sorgt daf\u00fcr, dass die Schriftart fr\u00fchzeitig geladen wird \u2013 verbessert die Ladezeit und Darstellung.</p>"},{"location":"html/link/#4-favicons-einbinden","title":"4. \ud83d\udcce Favicons einbinden","text":"<pre><code>&lt;link rel=\"icon\" href=\"/favicon.ico\" type=\"image/x-icon\" /&gt;\n&lt;link rel=\"apple-touch-icon\" href=\"/apple-touch-icon.png\" /&gt;\n</code></pre> <p>\ud83d\udc49 Wird in der Browser-Tab-Leiste, auf Mobilger\u00e4ten oder in Bookmarks angezeigt.</p>"},{"location":"html/link/#5-web-fonts-z-b-google-fonts","title":"5. \ud83c\udf10 Web Fonts (z.\u202fB. Google Fonts)","text":"<pre><code>&lt;link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css2?family=Roboto&amp;display=swap\" /&gt;\n</code></pre> <p>\ud83d\udc49 L\u00e4dt eine externe Schriftart f\u00fcr die Seite.</p>"},{"location":"html/link/#sicherheit-subresource-integrity-sri","title":"\ud83d\udd12 Sicherheit: Subresource Integrity (SRI)","text":"<pre><code>&lt;link\n  rel=\"stylesheet\"\n  href=\"https://cdn.example.com/lib.css\"\n  integrity=\"sha384-abc123...\"\n  crossorigin=\"anonymous\"\n/&gt;\n</code></pre> <p>\u27a1 Stellt sicher, dass die Ressource nicht manipuliert wurde \u2013 empfohlen bei externen Quellen/CDNs.</p>"},{"location":"html/link/#best-practices","title":"\ud83d\udd25 Best Practices","text":"<ul> <li>Verwende <code>&lt;link rel=\"stylesheet\"&gt;</code> im <code>&lt;head&gt;</code> \u2013 Stylesheets werden parallel zum HTML geladen.</li> <li>Trenne Inhalte (<code>HTML</code>) von Darstellung (<code>CSS</code>) \u2013 erh\u00f6hte Wartbarkeit und Wiederverwendbarkeit.</li> <li>Nutze <code>media=\"print\"</code> f\u00fcr druckspezifisches CSS.</li> <li>Verwende <code>preload</code> f\u00fcr Fonts, gro\u00dfe Bilder oder Skripte mit hoher Priorit\u00e4t.</li> <li>Bei mehreren <code>&lt;link&gt;</code>-Tags: Sortiere nach Wichtigkeit und Medienziel.</li> </ul>"},{"location":"html/link/#gangige-rel-werte-auswahl","title":"\ud83d\udcda G\u00e4ngige <code>rel</code>-Werte (Auswahl)","text":"Wert Zweck <code>stylesheet</code> Externe CSS-Datei <code>icon</code> Favicon f\u00fcr Browser-Tab <code>apple-touch-icon</code> Homescreen-Icon f\u00fcr iOS-Ger\u00e4te <code>preload</code> Ressource vorab laden <code>prefetch</code> Ressource vorbereitend laden f\u00fcr n\u00e4chste Seite <code>dns-prefetch</code> DNS-Lookup f\u00fcr externe Domains <code>alternate</code> Z.\u202fB. alternative Sprache oder Feed (<code>rel=\"alternate\" hreflang=\"en\"</code>)"},{"location":"html/link/#barrierefreiheit","title":"\u267f Barrierefreiheit","text":"<ul> <li><code>&lt;link&gt;</code> selbst hat keine direkte Auswirkung auf die Barrierefreiheit.</li> <li>ABER: Die verkn\u00fcpften Ressourcen (z.\u202fB. ein Kontrast-CSS) k\u00f6nnen die Lesbarkeit stark beeinflussen.</li> <li>CSS-Dateien sollten auf zug\u00e4ngliches Design achten: gute Farbkontraste, skalierbare Schriftgr\u00f6\u00dfen, reduzierte Animationen etc.</li> </ul>"},{"location":"html/link/#fazit","title":"\ud83d\udcda Fazit","text":"<p>Das <code>&lt;link&gt;</code>-Element ist ein zentrales Werkzeug, um HTML-Dokumente mit externen Ressourcen zu verbinden \u2013 insbesondere f\u00fcr Stylesheets, Icons und Performance-Optimierung. In modernen Webprojekten ist <code>&lt;link&gt;</code> ein Muss f\u00fcr strukturierte, wartbare und performante Webseiten.</p>"},{"location":"html/meta/","title":"<code>&lt;meta&gt;</code> \u2013 Metadaten f\u00fcr HTML-Dokumente","text":""},{"location":"html/meta/#funktion","title":"\ud83e\udde9 Funktion","text":"<p>Das <code>&lt;meta&gt;</code>-Element wird im <code>&lt;head&gt;</code> einer HTML-Seite verwendet, um Metadaten bereitzustellen \u2013 also Informationen \u00fcber die Seite, nicht f\u00fcr die Darstellung der Inhalte selbst. Meta-Tags werden von Suchmaschinen, Browsern, Social Media-Plattformen und Diensten wie Screenreadern ausgewertet.</p> <p>\ud83d\udccc <code>&lt;meta&gt;</code> ist ein self-closing Element (kein \u00f6ffnendes und schlie\u00dfendes Tag-Paar).</p>"},{"location":"html/meta/#grundstruktur","title":"\u2705 Grundstruktur","text":"<pre><code>&lt;meta name=\"description\" content=\"Dies ist eine Beispielseite \u00fcber HTML-Meta-Tags.\" /&gt;\n</code></pre>"},{"location":"html/meta/#wichtige-attribute","title":"\ud83d\udd27 Wichtige Attribute","text":"Attribut Beschreibung <code>name</code> Gibt den Namen des Metadateninhalts an (z.\u202fB. <code>description</code>, <code>viewport</code>) <code>content</code> Der eigentliche Inhalt der Metadaten <code>http-equiv</code> Simuliert HTTP-Header (z.\u202fB. <code>refresh</code>, <code>content-type</code>) <code>charset</code> Zeichencodierung (z.\u202fB. UTF-8) \u2013 Sonderform, hat kein <code>content</code>"},{"location":"html/meta/#typische-arten-von-meta-tags","title":"\ud83d\udcda Typische Arten von <code>&lt;meta&gt;</code>-Tags","text":""},{"location":"html/meta/#1-zeichencodierung","title":"\ud83d\udd24 1. Zeichencodierung","text":"<pre><code>&lt;meta charset=\"UTF-8\" /&gt;\n</code></pre> <p>\ud83d\udc49 Pflichtangabe in modernen Webseiten, legt die Zeichencodierung fest (z.\u202fB. f\u00fcr Umlaute, Emojis etc.).</p>"},{"location":"html/meta/#2-viewport-responsive-design","title":"\ud83c\udf10 2. Viewport (Responsive Design)","text":"<pre><code>&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /&gt;\n</code></pre> <p>\ud83d\udc49 Sorgt daf\u00fcr, dass die Seite auf Mobilger\u00e4ten korrekt dargestellt wird. Essentiell f\u00fcr responsive Webseiten.</p>"},{"location":"html/meta/#3-beschreibung-seo","title":"\ud83d\udcdd 3. Beschreibung (SEO)","text":"<pre><code>&lt;meta name=\"description\" content=\"Lerne alles \u00fcber HTML-Meta-Tags, SEO, Sicherheit und mehr.\" /&gt;\n</code></pre> <p>\ud83d\udc49 Wird in den Suchergebnissen von Google als Seitenbeschreibung angezeigt.</p>"},{"location":"html/meta/#4-schlusselworter-veraltet-fur-seo","title":"\ud83d\udd11 4. Schl\u00fcsselw\u00f6rter (veraltet f\u00fcr SEO)","text":"<pre><code>&lt;meta name=\"keywords\" content=\"html, meta, seo, webentwicklung\" /&gt;\n</code></pre> <p>\ud83d\udc49 Wird von modernen Suchmaschinen ignoriert \u2013 fr\u00fcher relevant.</p>"},{"location":"html/meta/#5-autor-copyright","title":"\ud83d\udce3 5. Autor &amp; Copyright","text":"<pre><code>&lt;meta name=\"author\" content=\"Florian Fenzl\" /&gt;\n&lt;meta name=\"copyright\" content=\"\u00a9 2025 solago GmbH\" /&gt;\n</code></pre>"},{"location":"html/meta/#6-seiten-refresh-weiterleitung","title":"\ud83d\udd01 6. Seiten-Refresh / Weiterleitung","text":"<pre><code>&lt;meta http-equiv=\"refresh\" content=\"5; url=https://example.com\" /&gt;\n</code></pre> <p>\ud83d\udc49 Leitet nach 5 Sekunden automatisch weiter \u2013 sollte mit Vorsicht verwendet werden.</p>"},{"location":"html/meta/#7-content-type-veraltet","title":"\ud83c\udf0d 7. Content-Type (veraltet)","text":"<pre><code>&lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /&gt;\n</code></pre> <p>\ud83d\udc49 Wird durch <code>charset</code> ersetzt \u2013 nur noch in Altprojekten notwendig.</p>"},{"location":"html/meta/#8-sicherheit-z-b-content-security-policy","title":"\ud83d\udd12 8. Sicherheit (z.\u202fB. Content Security Policy)","text":"<pre><code>&lt;meta http-equiv=\"Content-Security-Policy\" content=\"default-src 'self'; script-src 'self' https://apis.example.com\" /&gt;\n</code></pre> <p>\ud83d\udc49 Schr\u00e4nkt Ressourcen ein, sch\u00fctzt vor Cross-Site Scripting (XSS). Wird meist serverseitig via HTTP-Header gesetzt, nicht im HTML.</p>"},{"location":"html/meta/#meta-tags-fur-social-media-open-graph-twitter-cards","title":"\ud83d\udcac Meta-Tags f\u00fcr Social Media (Open Graph, Twitter Cards)","text":""},{"location":"html/meta/#open-graph-facebook-linkedin-etc","title":"\ud83d\udfe6 Open Graph (Facebook, LinkedIn, etc.)","text":"<pre><code>&lt;meta property=\"og:title\" content=\"Meine Seite\" /&gt;\n&lt;meta property=\"og:description\" content=\"Beschreibung f\u00fcr Social Media\" /&gt;\n&lt;meta property=\"og:image\" content=\"https://example.com/vorschau.jpg\" /&gt;\n&lt;meta property=\"og:url\" content=\"https://example.com\" /&gt;\n</code></pre>"},{"location":"html/meta/#twitter-cards","title":"\ud83d\udc26 Twitter Cards","text":"<pre><code>&lt;meta name=\"twitter:card\" content=\"summary_large_image\" /&gt;\n&lt;meta name=\"twitter:title\" content=\"Seitentitel\" /&gt;\n&lt;meta name=\"twitter:description\" content=\"Kurze Beschreibung\" /&gt;\n&lt;meta name=\"twitter:image\" content=\"https://example.com/preview.jpg\" /&gt;\n</code></pre> <p>\ud83d\udc49 Sorgt f\u00fcr h\u00fcbsche Vorschauen beim Teilen auf sozialen Netzwerken.</p>"},{"location":"html/meta/#best-practices","title":"\ud83d\udd0d Best Practices","text":"<ul> <li>Immer <code>charset=\"UTF-8\"</code> verwenden \u2013 am besten als erstes Element im <code>&lt;head&gt;</code>.</li> <li>Nutze <code>viewport</code>, damit deine Seite auf Mobilger\u00e4ten funktioniert.</li> <li>Verwende eine klare und pr\u00e4gnante <code>description</code> \u2013 idealerweise 150\u2013160 Zeichen.</li> <li>Vermeide veraltete Tags wie <code>keywords</code>, <code>expires</code>, <code>generator</code>.</li> <li>F\u00fcr professionelle Seiten: erg\u00e4nze Social Media Tags (<code>og:</code>, <code>twitter:</code>) &amp; Sicherheitsrichtlinien (<code>Content-Security-Policy</code>).</li> </ul>"},{"location":"html/meta/#barrierefreiheit","title":"\u267f Barrierefreiheit","text":"<ul> <li>Meta-Tags wie <code>viewport</code> und <code>charset</code> wirken sich indirekt positiv auf die Barrierefreiheit aus.</li> <li>F\u00fcr Screenreader sind Meta-Tags selbst nicht relevant, aber sie helfen bei der technischen Konsistenz der Seite.</li> </ul>"},{"location":"html/meta/#fazit","title":"\ud83d\udcda Fazit","text":"<p>Meta-Tags geh\u00f6ren zu den unsichtbaren, aber entscheidenden Bausteinen jeder Webseite. Sie steuern, wie deine Seite gelesen, dargestellt, interpretiert und geteilt wird \u2013 von Suchmaschinen, Browsern, Social Media-Plattformen und technischen Tools.</p>"},{"location":"html/seo-meta/","title":"\ud83e\udded SEO-Meta-Strategien f\u00fcr HTML-Dokumente","text":""},{"location":"html/seo-meta/#ziel","title":"\ud83e\udde9 Ziel","text":"<p>Meta-Tags sind ein wichtiger Bestandteil der OnPage-SEO. Sie liefern Suchmaschinen, Social Media-Plattformen und Browsern strukturierte Informationen \u00fcber den Inhalt einer Seite \u2013 ohne dass diese im sichtbaren Teil auftauchen. Richtig eingesetzt, helfen sie dabei, das Ranking zu verbessern, die Klickrate (CTR) zu erh\u00f6hen und Inhalte besser zu kontrollieren.</p>"},{"location":"html/seo-meta/#wesentliche-seo-relevante-meta-tags","title":"\ud83d\udd27 Wesentliche SEO-relevante Meta-Tags","text":""},{"location":"html/seo-meta/#1-title-kein-meta-aber-seo-kritisch","title":"1. \ud83d\udcdc <code>&lt;title&gt;</code> (kein <code>&lt;meta&gt;</code>, aber SEO-Kritisch)","text":"<pre><code>&lt;title&gt;Responsive Webdesign \u2013 Tipps &amp; Best Practices&lt;/title&gt;\n</code></pre> <ul> <li>Empfohlene L\u00e4nge: 50\u201360 Zeichen  </li> <li>Einzigartig pro Seite </li> <li>Wird in Suchergebnissen als Hauptlink dargestellt  </li> <li>Wichtigstes Element f\u00fcr Keyword-Platzierung</li> </ul>"},{"location":"html/seo-meta/#2-meta-namedescription","title":"2. \ud83d\udcdd <code>&lt;meta name=\"description\"&gt;</code>","text":"<pre><code>&lt;meta name=\"description\" content=\"Erfahre, wie du mit HTML und CSS ein modernes, responsives Webdesign umsetzt.\" /&gt;\n</code></pre> <ul> <li>Empfohlene L\u00e4nge: 150\u2013160 Zeichen  </li> <li>Beeinflusst nicht das Ranking direkt, aber die Klickrate (CTR) </li> <li>Call-to-Action (CTA) einbauen: \u201eLerne jetzt\u2026\u201c, \u201eEntdecke\u2026\u201c</li> </ul>"},{"location":"html/seo-meta/#3-meta-namerobots","title":"3. \ud83d\udcf5 <code>&lt;meta name=\"robots\"&gt;</code>","text":"<pre><code>&lt;meta name=\"robots\" content=\"index, follow\" /&gt;\n</code></pre> Wert Bedeutung <code>index</code> Seite darf indexiert werden <code>noindex</code> Seite wird nicht indexiert <code>follow</code> Links auf der Seite d\u00fcrfen verfolgt werden <code>nofollow</code> Links werden ignoriert <p>\ud83d\udc49 Verwende <code>noindex</code> bei Admin-Seiten, Logins, Doppelinhalten.</p>"},{"location":"html/seo-meta/#4-meta-nameviewport","title":"4. \ud83d\udcf1 <code>&lt;meta name=\"viewport\"&gt;</code>","text":"<pre><code>&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /&gt;\n</code></pre> <ul> <li>Pflicht f\u00fcr Mobile-SEO</li> <li>Sorgt daf\u00fcr, dass deine Seite responsiv gerendert wird</li> <li>Google priorisiert mobile usability im Ranking (Mobile-First Indexing)</li> </ul>"},{"location":"html/seo-meta/#social-seo-open-graph-twitter-cards","title":"\ud83c\udf10 Social SEO: Open Graph &amp; Twitter Cards","text":""},{"location":"html/seo-meta/#open-graph-facebook-linkedin","title":"Open Graph (Facebook, LinkedIn)","text":"<pre><code>&lt;meta property=\"og:title\" content=\"HTML &amp; SEO \u2013 Dein Leitfaden\" /&gt;\n&lt;meta property=\"og:description\" content=\"Lerne, wie du HTML und Meta-Tags f\u00fcr SEO optimierst.\" /&gt;\n&lt;meta property=\"og:image\" content=\"https://example.com/vorschau.jpg\" /&gt;\n&lt;meta property=\"og:url\" content=\"https://example.com/seo-guide\" /&gt;\n</code></pre>"},{"location":"html/seo-meta/#twitter-cards","title":"Twitter Cards","text":"<pre><code>&lt;meta name=\"twitter:card\" content=\"summary_large_image\" /&gt;\n&lt;meta name=\"twitter:title\" content=\"HTML &amp; SEO \u2013 Dein Leitfaden\" /&gt;\n&lt;meta name=\"twitter:description\" content=\"Praktische Tipps f\u00fcr besseres Ranking durch Meta-Tags.\" /&gt;\n&lt;meta name=\"twitter:image\" content=\"https://example.com/seo-banner.jpg\" /&gt;\n</code></pre> <p>\u27a1 Diese Tags erh\u00f6hen die Klickwahrscheinlichkeit, wenn deine Seite geteilt wird.</p>"},{"location":"html/seo-meta/#strategische-tipps-zur-meta-optimierung","title":"\ud83e\udde0 Strategische Tipps zur Meta-Optimierung","text":""},{"location":"html/seo-meta/#1-jede-seite-einzigartig","title":"\u2705 1. Jede Seite einzigartig","text":"<ul> <li>Jede Unterseite braucht einen eigenen Title und Description</li> <li>Verwende die wichtigsten Keywords nat\u00fcrlich eingebettet</li> </ul>"},{"location":"html/seo-meta/#2-keywords-bewusst-einsetzen","title":"\u2705 2. Keywords bewusst einsetzen","text":"<ul> <li>Keywords am Anfang der <code>title</code> und <code>description</code> verwenden</li> <li>Vermeide Keyword Stuffing \u2013 Schreibe f\u00fcr Menschen, nicht nur f\u00fcr Google</li> </ul>"},{"location":"html/seo-meta/#3-call-to-action-verwenden","title":"\u2705 3. Call-to-Action verwenden","text":"<ul> <li>Mach den Vorteil deiner Seite klickw\u00fcrdig: <p>\u201eFinde heraus, wie\u2026\u201c / \u201eJetzt kostenlos testen\u2026\u201c / \u201eTipps, die du brauchst\u2026\u201c</p> </li> </ul>"},{"location":"html/seo-meta/#4-serp-vorschau-testen","title":"\u2705 4. SERP-Vorschau testen","text":"<ul> <li>Nutze Tools wie:</li> <li>Google SERP Snippet Tool (Mangools)</li> <li>Yoast Preview</li> <li>\u00dcberpr\u00fcfe, wie deine Snippets in Suchergebnissen aussehen</li> </ul>"},{"location":"html/seo-meta/#5-meta-tags-automatisieren-bei-cms","title":"\u2705 5. Meta-Tags automatisieren (bei CMS)","text":"<ul> <li>Bei WordPress z.\u202fB. mit Plugins wie Yoast SEO oder Rank Math</li> <li>F\u00fcr gro\u00dfe Seiten: Template-basierte Generierung der <code>title</code>/<code>description</code></li> </ul>"},{"location":"html/seo-meta/#erweiterte-meta-strategien","title":"\ud83e\uddfe Erweiterte Meta-Strategien","text":""},{"location":"html/seo-meta/#canonical-tags-vermeidung-von-duplicate-content","title":"Canonical Tags (Vermeidung von Duplicate Content)","text":"<pre><code>&lt;link rel=\"canonical\" href=\"https://example.com/seo-guide\" /&gt;\n</code></pre> <p>\u27a1 Signalisiert Google die bevorzugte Version einer Seite.</p>"},{"location":"html/seo-meta/#hreflang-mehrsprachige-seiten","title":"Hreflang (Mehrsprachige Seiten)","text":"<pre><code>&lt;link rel=\"alternate\" href=\"https://example.com/de\" hreflang=\"de\" /&gt;\n&lt;link rel=\"alternate\" href=\"https://example.com/en\" hreflang=\"en\" /&gt;\n</code></pre> <p>\u27a1 Gibt die Sprache und Region f\u00fcr Inhalte an \u2013 wichtig f\u00fcr internationales SEO.</p>"},{"location":"html/seo-meta/#content-type-bei-alteren-html-versionen","title":"Content-Type (bei \u00e4lteren HTML-Versionen)","text":"<pre><code>&lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /&gt;\n</code></pre> <p>\u27a1 Heute meist ersetzt durch:</p> <pre><code>&lt;meta charset=\"UTF-8\" /&gt;\n</code></pre>"},{"location":"html/seo-meta/#fazit","title":"\ud83d\udcda Fazit","text":"<p>SEO beginnt im <code>&lt;head&gt;</code>: Die richtigen Meta-Tags sorgen daf\u00fcr, dass deine Seite indexiert, verstanden, gut dargestellt und geklickt wird. Sie sind schnell eingebaut, haben aber langfristig enorme Wirkung auf deine Sichtbarkeit.</p>"},{"location":"html/style/","title":"<code>&lt;style&gt;</code> \u2013 CSS direkt im HTML-Dokument","text":""},{"location":"html/style/#funktion","title":"\ud83e\udde9 Funktion","text":"<p>Das <code>&lt;style&gt;</code>-Element wird verwendet, um CSS-Code direkt in ein HTML-Dokument einzubetten. Es definiert Gestaltungsregeln f\u00fcr das Aussehen der Webseite, z.\u202fB. Farben, Schriftarten, Abst\u00e4nde und Layout.</p> <p>Es befindet sich typischerweise im <code>&lt;head&gt;</code>-Bereich der Seite und wirkt sich auf alle passenden Elemente im Dokument aus.</p>"},{"location":"html/style/#grundverwendung","title":"\u2705 Grundverwendung","text":"<pre><code>&lt;head&gt;\n  &lt;style&gt;\n    body {\n      background-color: #f2f2f2;\n      font-family: Arial, sans-serif;\n    }\n\n    h1 {\n      color: darkblue;\n      text-align: center;\n    }\n  &lt;/style&gt;\n&lt;/head&gt;\n</code></pre> <p>Was passiert? \ud83d\udc49 Der Hintergrund der Seite wird grau, die Schriftart auf Arial gesetzt, und alle <code>&lt;h1&gt;</code>-Elemente werden blau und zentriert angezeigt.</p>"},{"location":"html/style/#wichtige-attribute","title":"\ud83d\udd27 Wichtige Attribute","text":"Attribut Beschreibung <code>type</code> MIME-Type des Inhalts \u2013 <code>text/css</code> (veraltet, optional) <code>media</code> Zielmedium \u2013 z.\u202fB. <code>screen</code>, <code>print</code>, <code>all</code> <code>scoped</code> Begrenzung des Styles auf ein Elternelement (nicht standardisiert)"},{"location":"html/style/#beispiel-mit-media","title":"Beispiel mit <code>media</code>:","text":"<pre><code>&lt;style media=\"print\"&gt;\n  body {\n    color: black;\n    background: white;\n  }\n&lt;/style&gt;\n</code></pre> <p>\ud83d\udc49 Wird nur angewendet, wenn die Seite gedruckt wird.</p>"},{"location":"html/style/#beispiele","title":"\ud83e\uddea Beispiele","text":""},{"location":"html/style/#1-einfache-globale-gestaltung","title":"1. \ud83c\udfa8 Einfache globale Gestaltung","text":"<pre><code>&lt;style&gt;\n  p {\n    line-height: 1.6;\n    font-size: 1.1rem;\n  }\n\n  a {\n    color: #0077cc;\n    text-decoration: none;\n  }\n\n  a:hover {\n    text-decoration: underline;\n  }\n&lt;/style&gt;\n</code></pre>"},{"location":"html/style/#2-media-queries","title":"2. \ud83d\udcf1 Media Queries","text":"<pre><code>&lt;style&gt;\n  body {\n    font-size: 16px;\n  }\n\n  @media (max-width: 600px) {\n    body {\n      font-size: 14px;\n    }\n  }\n&lt;/style&gt;\n</code></pre> <p>\ud83d\udc49 Passt die Schriftgr\u00f6\u00dfe auf kleineren Bildschirmen an.</p>"},{"location":"html/style/#nachteile-von-style-im-vergleich-zu-externer-css-datei","title":"\ud83d\udeab Nachteile von <code>&lt;style&gt;</code> im Vergleich zu externer CSS-Datei","text":"Problem Erkl\u00e4rung Schwer wiederverwendbar Styles sind auf ein einzelnes Dokument beschr\u00e4nkt Redundanz Mehrere Seiten mit eingebettetem CSS erh\u00f6hen die Dateigr\u00f6\u00dfe Wartung \u00c4nderungen m\u00fcssen in jeder Datei einzeln gemacht werden Caching Externe CSS-Dateien k\u00f6nnen vom Browser zwischengespeichert werden \u2013 eingebettete nicht"},{"location":"html/style/#alternativen","title":"\ud83d\udce6 Alternativen","text":"Methode Vorteile <code>&lt;link rel=\"stylesheet\"&gt;</code> Externe CSS-Datei, wiederverwendbar, wartbar Inline-CSS (<code>style=\"...\"</code>) F\u00fcr Einzelanpassungen direkt im Tag (nicht empfohlen f\u00fcr gr\u00f6\u00dfere Projekte)"},{"location":"html/style/#sicherheit","title":"\ud83d\udd12 Sicherheit","text":"<ul> <li>Das <code>&lt;style&gt;</code>-Tag selbst ist sicher, solange es nicht mit Benutzereingaben manipuliert wird.</li> <li>Niemals benutzerdefinierte Inhalte ungefiltert in <code>&lt;style&gt;</code>-Tags einsetzen.</li> <li>Bei dynamischer CSS-Erzeugung in JavaScript unbedingt auf XSS-Schutz achten!</li> </ul>"},{"location":"html/style/#best-practices","title":"\ud83d\udd25 Best Practices","text":"<ul> <li>Verwende <code>&lt;style&gt;</code> nur f\u00fcr kleine oder seiten-spezifische Stile.</li> <li>Gr\u00f6\u00dfere Projekte sollten mit externen Stylesheets (<code>&lt;link&gt;</code>) arbeiten.</li> <li>Halte CSS getrennt von Struktur (HTML) und Verhalten (JS) \u2013 das erh\u00f6ht Wartbarkeit und Klarheit.</li> <li>Nutze <code>media</code>-Attribute, wenn du spezifische Styles f\u00fcr Druck oder Mobilger\u00e4te brauchst.</li> </ul>"},{"location":"html/style/#barrierefreiheit","title":"\u267f Barrierefreiheit","text":"<ul> <li>Achte auf ausreichende Kontraste (<code>color</code> vs. <code>background-color</code>)</li> <li>Vermeide Layouts, die ausschlie\u00dflich auf Farben oder visuelle Effekte setzen.</li> <li>Verwende relative Einheiten (<code>em</code>, <code>rem</code>, <code>%</code>) statt fester Pixelgr\u00f6\u00dfen \u2013 das erleichtert Zoom und Lesbarkeit.</li> </ul>"},{"location":"html/style/#fazit","title":"\ud83d\udcda Fazit","text":"<p>Das <code>&lt;style&gt;</code>-Element erlaubt dir, direkt im HTML-Dokument CSS-Regeln zu definieren. F\u00fcr kleinere Projekte oder Prototypen ist es praktisch \u2013 f\u00fcr gr\u00f6\u00dfere Webseiten solltest du auf externe Stylesheets setzen, um saubere Trennung von Layout und Inhalt zu gew\u00e4hrleisten.</p>"},{"location":"html/tags/","title":"Einf\u00fchrung in HTML-Tags","text":"<p>Der grundlegende Baustein von HTML sind sogenannte Tags.</p>"},{"location":"html/tags/#was-ist-ein-html-tag","title":"\ud83c\udff7\ufe0f Was ist ein HTML-Tag?","text":"<p>Ein HTML-Tag ist ein Code-Element, das einem Webbrowser mitteilt, wie Inhalte dargestellt werden sollen.</p> <p>Beispiel f\u00fcr ein Tag mit Inhalt:</p> <pre><code>&lt;p&gt;Dies ist ein Absatz.&lt;/p&gt;\n</code></pre> <ul> <li><code>&lt;p&gt;</code> ist der Start-Tag.</li> <li><code>&lt;/p&gt;</code> ist der End-Tag.</li> <li>Der Text dazwischen ist der Inhalt.</li> </ul> <p>Selbstschlie\u00dfende Tags ben\u00f6tigen keinen End-Tag:</p> <pre><code>&lt;img src=\"bild.jpg\" alt=\"Ein Bild\" /&gt;\n&lt;br /&gt;\n</code></pre>"},{"location":"html/tags/#wofur-werden-html-tags-verwendet","title":"\ud83c\udfaf Wof\u00fcr werden HTML-Tags verwendet?","text":"<p>HTML-Tags geben Struktur und Bedeutung f\u00fcr:</p> <ul> <li>Texte: \u00dcberschriften, Abs\u00e4tze, Listen</li> <li>Medien: Bilder, Videos, Audiodateien</li> <li>Links: Navigation zwischen Seiten</li> <li>Formulare: Eingabefelder, Buttons, Auswahlmen\u00fcs</li> <li>Layout: Container und semantische Struktur</li> </ul>"},{"location":"html/tags/#attribute-in-html-tags","title":"\ud83e\udde9 Attribute in HTML-Tags","text":"<p>Tags k\u00f6nnen durch Attribute zus\u00e4tzliche Informationen enthalten.</p>"},{"location":"html/tags/#syntax","title":"Syntax:","text":"<pre><code>&lt;tagname attribut=\"wert\"&gt;Inhalt&lt;/tagname&gt;\n</code></pre> <p>Beispiel:</p> <pre><code>&lt;a href=\"https://example.com\" target=\"_blank\"&gt;Zur Seite&lt;/a&gt;\n</code></pre>"},{"location":"html/tags/#haufige-attribute","title":"H\u00e4ufige Attribute:","text":"Attribut Bedeutung <code>id</code> Einzigartige Kennung <code>class</code> CSS-Klasse(n) f\u00fcr Styling und JS <code>style</code> Inline-CSS <code>title</code> Tooltip-Text beim Hover <code>href</code> Linkziel bei <code>&lt;a&gt;</code> <code>src</code> Quelle (z.\u202fB. bei Bildern, Videos) <code>alt</code> Alternativtext bei Bildern <code>type</code> Typ (z.\u202fB. bei Inputs oder Buttons) <code>name</code> Name von Formularelementen <code>value</code> Vorgabewert oder aktueller Wert <code>target</code> Ziel-Fenster (<code>_blank</code>, <code>_self</code> etc.)"},{"location":"html/tags/#gangige-html-tags-im-uberblick","title":"\ud83d\udd1d G\u00e4ngige HTML-Tags im \u00dcberblick","text":""},{"location":"html/tags/#1-textstrukturierung","title":"1. Textstrukturierung","text":"<pre><code>&lt;h1&gt;Haupt\u00fcberschrift&lt;/h1&gt;\n&lt;h2&gt;Unter\u00fcberschrift&lt;/h2&gt;\n&lt;p&gt;Ein normaler Absatztext.&lt;/p&gt;\n&lt;br /&gt; &lt;!-- Zeilenumbruch --&gt;\n&lt;hr /&gt; &lt;!-- Trennlinie --&gt;\n</code></pre>"},{"location":"html/tags/#2-verlinkung","title":"2. Verlinkung","text":"<pre><code>&lt;a href=\"https://example.com\" target=\"_blank\"&gt;Externer Link&lt;/a&gt;\n</code></pre>"},{"location":"html/tags/#3-bilder-und-medien","title":"3. Bilder und Medien","text":"<pre><code>&lt;img src=\"bild.jpg\" alt=\"Ein sch\u00f6nes Bild\" /&gt;\n\n&lt;video controls&gt;\n  &lt;source src=\"video.mp4\" type=\"video/mp4\" /&gt;\n&lt;/video&gt;\n</code></pre>"},{"location":"html/tags/#4-listen","title":"4. Listen","text":"<pre><code>&lt;ul&gt;\n  &lt;li&gt;Listenpunkt A&lt;/li&gt;\n  &lt;li&gt;Listenpunkt B&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;ol&gt;\n  &lt;li&gt;Erster Punkt&lt;/li&gt;\n  &lt;li&gt;Zweiter Punkt&lt;/li&gt;\n&lt;/ol&gt;\n</code></pre>"},{"location":"html/tags/#5-container-semantik","title":"5. Container &amp; Semantik","text":"<pre><code>&lt;div class=\"wrapper\"&gt;Blockelement f\u00fcr Layout&lt;/div&gt;\n&lt;span class=\"label\"&gt;Inline-Element&lt;/span&gt;\n\n&lt;header&gt;Kopfbereich&lt;/header&gt;\n&lt;footer&gt;Fu\u00dfbereich&lt;/footer&gt;\n&lt;main&gt;Hauptinhalt&lt;/main&gt;\n&lt;article&gt;Artikel&lt;/article&gt;\n&lt;section&gt;Abschnitt&lt;/section&gt;\n&lt;nav&gt;Navigation&lt;/nav&gt;\n</code></pre>"},{"location":"html/tags/#6-formulare","title":"6. Formulare","text":"<pre><code>&lt;form action=\"/submit\" method=\"post\"&gt;\n  &lt;label for=\"email\"&gt;E-Mail:&lt;/label&gt;\n  &lt;input type=\"email\" id=\"email\" name=\"user_email\" /&gt;\n  &lt;button type=\"submit\"&gt;Absenden&lt;/button&gt;\n&lt;/form&gt;\n</code></pre>"},{"location":"html/tags/#tipps-fur-gute-html-nutzung","title":"\u2705 Tipps f\u00fcr gute HTML-Nutzung","text":"<ul> <li>Immer schlie\u00dfen: Verwende immer passende End-Tags.</li> <li>Semantik beachten: Nutze <code>&lt;header&gt;</code>, <code>&lt;main&gt;</code>, <code>&lt;footer&gt;</code> f\u00fcr besseren Code und bessere SEO.</li> <li>Zug\u00e4nglichkeit: Verwende <code>alt</code>-Attribute f\u00fcr Bilder und sprechende <code>label</code>-Texte f\u00fcr Eingabefelder.</li> </ul>"},{"location":"html/daten/listen/","title":"<code>&lt;ul&gt;</code>, <code>&lt;ol&gt;</code>, <code>&lt;li&gt;</code> \u2013 Listen in HTML","text":""},{"location":"html/daten/listen/#funktion","title":"\ud83e\udde9 Funktion","text":"<p>HTML bietet zwei Arten von strukturierten Listen:</p> <ul> <li><code>&lt;ul&gt;</code> \u2013 Ungeordnete Liste: Punkte ohne Reihenfolge (Bullet Points)</li> <li><code>&lt;ol&gt;</code> \u2013 Geordnete Liste: Punkte in nummerierter Reihenfolge</li> <li><code>&lt;li&gt;</code> \u2013 Listenelement: Ein Eintrag in einer Liste, sowohl in <code>&lt;ul&gt;</code> als auch <code>&lt;ol&gt;</code></li> </ul> <p>\ud83d\udccc Listen verbessern die Lesbarkeit, Struktur und Zug\u00e4nglichkeit von Inhalten \u2013 sowohl f\u00fcr Menschen als auch f\u00fcr Suchmaschinen.</p>"},{"location":"html/daten/listen/#verwendung","title":"\u2705 Verwendung","text":""},{"location":"html/daten/listen/#ungeordnete-liste-ul","title":"Ungeordnete Liste (<code>&lt;ul&gt;</code>)","text":"<pre><code>&lt;ul&gt;\n  &lt;li&gt;HTML&lt;/li&gt;\n  &lt;li&gt;CSS&lt;/li&gt;\n  &lt;li&gt;JavaScript&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre> <p>\ud83d\udc49 Wird typischerweise f\u00fcr Aufz\u00e4hlungen ohne feste Reihenfolge genutzt.</p>"},{"location":"html/daten/listen/#geordnete-liste-ol","title":"Geordnete Liste (<code>&lt;ol&gt;</code>)","text":"<pre><code>&lt;ol&gt;\n  &lt;li&gt;Vorbereitung&lt;/li&gt;\n  &lt;li&gt;Programmieren&lt;/li&gt;\n  &lt;li&gt;Testen&lt;/li&gt;\n&lt;/ol&gt;\n</code></pre> <p>\ud83d\udc49 Ideal f\u00fcr Schritt-f\u00fcr-Schritt-Anleitungen oder priorisierte Inhalte.</p>"},{"location":"html/daten/listen/#attribute","title":"\ud83d\udd27 Attribute","text":""},{"location":"html/daten/listen/#ol","title":"<code>&lt;ol&gt;</code>","text":"Attribut Beschreibung <code>type</code> Art der Nummerierung: <code>1</code>, <code>a</code>, <code>A</code>, <code>i</code>, <code>I</code> <code>start</code> Startwert der Nummerierung (z.\u202fB. <code>start=\"3\"</code>) <code>reversed</code> Kehrt die Reihenfolge um (z.\u202fB. 5, 4, 3, ...)"},{"location":"html/daten/listen/#ul","title":"<code>&lt;ul&gt;</code>","text":"Attribut Beschreibung <code>type</code> (veraltet) Bullet-Stil (nicht mehr empfohlen)"},{"location":"html/daten/listen/#li","title":"<code>&lt;li&gt;</code>","text":"Attribut Beschreibung <code>value</code> Eigene Nummerierung (nur in <code>&lt;ol&gt;</code>) <code>class</code>, <code>id</code>, <code>style</code> F\u00fcr individuelles Styling"},{"location":"html/daten/listen/#beispiel-mit-css","title":"\ud83c\udfa8 Beispiel mit CSS","text":"<pre><code>&lt;ul class=\"skills\"&gt;\n  &lt;li&gt;Python&lt;/li&gt;\n  &lt;li&gt;SQL&lt;/li&gt;\n  &lt;li&gt;Scraping&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre> <pre><code>.skills {\n  list-style-type: square;\n  padding-left: 1.5rem;\n}\n\n.skills li {\n  margin-bottom: 0.5rem;\n}\n</code></pre>"},{"location":"html/daten/listen/#erweiterte-varianten","title":"\ud83e\udde0 Erweiterte Varianten","text":""},{"location":"html/daten/listen/#verschachtelte-listen","title":"Verschachtelte Listen","text":"<pre><code>&lt;ul&gt;\n  &lt;li&gt;Frontend\n    &lt;ul&gt;\n      &lt;li&gt;HTML&lt;/li&gt;\n      &lt;li&gt;CSS&lt;/li&gt;\n    &lt;/ul&gt;\n  &lt;/li&gt;\n  &lt;li&gt;Backend\n    &lt;ul&gt;\n      &lt;li&gt;Python&lt;/li&gt;\n      &lt;li&gt;Node.js&lt;/li&gt;\n    &lt;/ul&gt;\n  &lt;/li&gt;\n&lt;/ul&gt;\n</code></pre> <p>\ud83d\udc49 Gut geeignet f\u00fcr hierarchische Inhalte (z.\u202fB. Themenb\u00e4ume, Navigationen)</p>"},{"location":"html/daten/listen/#kombination-mit-nav","title":"Kombination mit <code>&lt;nav&gt;</code>","text":"<pre><code>&lt;nav&gt;\n  &lt;ul&gt;\n    &lt;li&gt;&lt;a href=\"/\"&gt;Start&lt;/a&gt;&lt;/li&gt;\n    &lt;li&gt;&lt;a href=\"/blog\"&gt;Blog&lt;/a&gt;&lt;/li&gt;\n    &lt;li&gt;&lt;a href=\"/kontakt\"&gt;Kontakt&lt;/a&gt;&lt;/li&gt;\n  &lt;/ul&gt;\n&lt;/nav&gt;\n</code></pre> <p>\ud83d\udc49 Ideal f\u00fcr Men\u00fcstrukturen in Navigationen</p>"},{"location":"html/daten/listen/#barrierefreiheit","title":"\u267f Barrierefreiheit","text":"<ul> <li>Listen sind von Natur aus zug\u00e4nglich</li> <li><code>&lt;ol&gt;</code> signalisiert Screenreadern die Reihenfolge der Schritte</li> <li><code>&lt;ul&gt;</code> signalisiert nur Aufz\u00e4hlung, ohne Reihenfolge</li> <li>Bullet-Styles sollten nicht allein zur Bedeutung verwendet werden</li> </ul>"},{"location":"html/daten/listen/#haufige-fehler","title":"\u274c H\u00e4ufige Fehler","text":"Fehler Besser Listen ohne <code>&lt;ul&gt;</code> oder <code>&lt;ol&gt;</code> verwendet Semantische Tags unbedingt verwenden Inline-Listen ohne Sinn Lieber als Flie\u00dftext oder Tabelle darstellen Nur mit <code>&lt;br&gt;</code> anstatt <code>&lt;li&gt;</code> getrennt Struktur immer mit <code>&lt;li&gt;</code> aufbauen"},{"location":"html/daten/listen/#vergleich-ul-vs-ol","title":"\ud83d\udd04 Vergleich: <code>&lt;ul&gt;</code> vs. <code>&lt;ol&gt;</code>","text":"Kriterium <code>&lt;ul&gt;</code> \u2013 ungeordnet <code>&lt;ol&gt;</code> \u2013 geordnet Reihenfolge Nicht wichtig Wichtig / nummeriert Standardstil Bullet Points Zahlen (1, 2, 3, ...) Verwendung Men\u00fcs, Features, Inhalte Anleitungen, Prozesse, Rankings"},{"location":"html/daten/listen/#fazit","title":"\ud83d\udcda Fazit","text":"<p>Listen sind ein zentrales Werkzeug in HTML zur klaren Strukturierung von Inhalten. Ob f\u00fcr Anleitungen, Navigationsmen\u00fcs oder thematische Gliederung: Mit <code>&lt;ul&gt;</code>, <code>&lt;ol&gt;</code> und <code>&lt;li&gt;</code> lassen sich Inhalte semantisch und visuell \u00fcbersichtlich aufbereiten.</p>"},{"location":"html/daten/table/","title":"<code>&lt;table&gt;</code> \u2013 Tabelle zur Datenpr\u00e4sentation","text":""},{"location":"html/daten/table/#funktion","title":"\ud83e\udde9 Funktion","text":"<p>Das <code>&lt;table&gt;</code>-Element wird verwendet, um strukturierte Daten in tabellarischer Form darzustellen. Tabellen sind besonders geeignet f\u00fcr:</p> <ul> <li>Zahlenbasierte Inhalte</li> <li>Vergleichswerte</li> <li>Zeitpl\u00e4ne</li> <li>Kontaktlisten</li> <li>Produktdetails</li> </ul> <p>\ud83d\udccc Tabellen sind semantisch wertvoll, wenn sie zur Darstellung von Daten (nicht Layout!) genutzt werden.</p>"},{"location":"html/daten/table/#grundstruktur-verwendung","title":"\u2705 Grundstruktur &amp; Verwendung","text":"<pre><code>&lt;table&gt;\n  &lt;thead&gt;\n    &lt;tr&gt;&lt;th&gt;Name&lt;/th&gt;&lt;th&gt;Alter&lt;/th&gt;&lt;/tr&gt;\n  &lt;/thead&gt;\n  &lt;tbody&gt;\n    &lt;tr&gt;&lt;td&gt;Anna&lt;/td&gt;&lt;td&gt;30&lt;/td&gt;&lt;/tr&gt;\n    &lt;tr&gt;&lt;td&gt;Ben&lt;/td&gt;&lt;td&gt;28&lt;/td&gt;&lt;/tr&gt;\n  &lt;/tbody&gt;\n  &lt;tfoot&gt;\n    &lt;tr&gt;&lt;td colspan=\"2\"&gt;Ende der Liste&lt;/td&gt;&lt;/tr&gt;\n  &lt;/tfoot&gt;\n&lt;/table&gt;\n</code></pre>"},{"location":"html/daten/table/#struktur-tags-im-detail","title":"\ud83d\udd27 Struktur-Tags im Detail","text":"Tag Bedeutung <code>&lt;table&gt;</code> Das Tabellen-Element als Container <code>&lt;thead&gt;</code> Kopfbereich der Tabelle <code>&lt;tbody&gt;</code> Hauptinhaltsbereich der Tabelle <code>&lt;tfoot&gt;</code> Fu\u00dfzeile der Tabelle <code>&lt;tr&gt;</code> Tabellenreihe (table row) <code>&lt;th&gt;</code> Kopfzelle mit fetter Schrift und semantischer Bedeutung <code>&lt;td&gt;</code> Standardzelle (table data)"},{"location":"html/daten/table/#weitere-attribute","title":"\ud83d\udd27 Weitere Attribute","text":""},{"location":"html/daten/table/#fur-table","title":"F\u00fcr <code>&lt;table&gt;</code>","text":"Attribut Beschreibung <code>border</code> Einfache Rahmenlinie (veraltet) <code>class</code> CSS-Zuweisung <code>style</code> Direktes Styling (z.\u202fB. Breite, Rand) <code>summary</code> (veraltet) Kurzbeschreibung der Tabelle <code>width</code> Breite der Tabelle (nicht empfohlen inline)"},{"location":"html/daten/table/#fur-th-und-td","title":"F\u00fcr <code>&lt;th&gt;</code> und <code>&lt;td&gt;</code>","text":"Attribut Beschreibung <code>colspan</code> Zelle \u00fcber mehrere Spalten strecken <code>rowspan</code> Zelle \u00fcber mehrere Zeilen strecken <code>headers</code> Verkn\u00fcpfung zu einem <code>&lt;th&gt;</code>-Element <code>scope</code> <code>row</code>, <code>col</code> \u2013 Bereich des Spalten-/Zeilenkopfs"},{"location":"html/daten/table/#beispiel-mit-css","title":"\ud83c\udfa8 Beispiel mit CSS","text":"<pre><code>&lt;table class=\"kundenliste\"&gt;\n  &lt;thead&gt;\n    &lt;tr&gt;&lt;th scope=\"col\"&gt;Kunde&lt;/th&gt;&lt;th scope=\"col\"&gt;Land&lt;/th&gt;&lt;/tr&gt;\n  &lt;/thead&gt;\n  &lt;tbody&gt;\n    &lt;tr&gt;&lt;td&gt;Max&lt;/td&gt;&lt;td&gt;Deutschland&lt;/td&gt;&lt;/tr&gt;\n    &lt;tr&gt;&lt;td&gt;Sofia&lt;/td&gt;&lt;td&gt;Schweiz&lt;/td&gt;&lt;/tr&gt;\n  &lt;/tbody&gt;\n&lt;/table&gt;\n</code></pre> <pre><code>.kundenliste {\n  width: 100%;\n  border-collapse: collapse;\n}\n\n.kundenliste th,\n.kundenliste td {\n  border: 1px solid #ddd;\n  padding: 0.8rem;\n  text-align: left;\n}\n\n.kundenliste thead {\n  background-color: #f5f5f5;\n}\n</code></pre>"},{"location":"html/daten/table/#barrierefreiheit-semantik","title":"\u267f Barrierefreiheit &amp; Semantik","text":"<ul> <li>Tabellen sollten semantisch korrekt aufgebaut sein</li> <li><code>&lt;th scope=\"col\"&gt;</code> oder <code>&lt;th scope=\"row\"&gt;</code> hilft Screenreadern</li> <li>Komplexere Tabellen k\u00f6nnen <code>headers</code> und <code>id</code> verwenden</li> <li>Vermeide Tabellen ausschlie\u00dflich f\u00fcr Layout-Zwecke</li> </ul>"},{"location":"html/daten/table/#haufige-fehler","title":"\u274c H\u00e4ufige Fehler","text":"Fehler Besser Tabellen f\u00fcr visuelles Layout missbrauchen Layout lieber mit CSS l\u00f6sen Nur <code>&lt;td&gt;</code> ohne <code>&lt;thead&gt;</code> / <code>&lt;th&gt;</code> Kopfbereiche klar definieren Inhalte in Tabellen nicht semantisch verkn\u00fcpft Nutze <code>scope</code>, <code>headers</code>, <code>caption</code>"},{"location":"html/daten/table/#erweiterungen","title":"\ud83e\udde0 Erweiterungen","text":""},{"location":"html/daten/table/#tabellenuberschrift-mit-caption","title":"Tabellen\u00fcberschrift mit <code>&lt;caption&gt;</code>","text":"<pre><code>&lt;table&gt;\n  &lt;caption&gt;Kundendaten 2025&lt;/caption&gt;\n  ...\n&lt;/table&gt;\n</code></pre> <ul> <li>Wird von Screenreadern zuerst vorgelesen</li> <li>Gibt Kontext zum Tabellendatensatz</li> </ul>"},{"location":"html/daten/table/#vergleich-zu-listen","title":"\ud83d\udd04 Vergleich zu Listen","text":"Element Verwendung <code>&lt;table&gt;</code> Gitterartige Darstellung von Daten <code>&lt;ul&gt;</code>, <code>&lt;ol&gt;</code> Aufz\u00e4hlungen, Listenstruktur <code>&lt;dl&gt;</code> Begriffsdefinitionen, Beschreibungen"},{"location":"html/daten/table/#fazit","title":"\ud83d\udcda Fazit","text":"<p>Tabellen sind das ideale Mittel f\u00fcr strukturierte Daten. Mit klarer Struktur, sauberem HTML und passenden CSS-Styles lassen sich Inhalte \u00fcbersichtlich und barrierefrei pr\u00e4sentieren.</p> <p>\ud83d\udcac Als N\u00e4chstes: M\u00f6chtest du mit <code>&lt;dl&gt;</code> (Definitionslisten), Tabellenfilterung per JavaScript oder responsiven Tabellen weitermachen?</p>"},{"location":"html/extern/audio/","title":"<code>&lt;audio&gt;</code> \u2013 Audioinhalte einbinden","text":""},{"location":"html/extern/audio/#funktion","title":"\ud83e\udde9 Funktion","text":"<p>Mit dem <code>&lt;audio&gt;</code>-Element lassen sich Audiodateien direkt im Browser abspielen, ohne externe Plugins. Es eignet sich f\u00fcr Musik, Podcasts, Soundeffekte, Voice-Overs und vieles mehr.</p> <p>\ud83d\udccc <code>&lt;audio&gt;</code> ist ein semantisches HTML5-Element und bietet native Steuerelemente, Event-Handling via JavaScript sowie Unterst\u00fctzung f\u00fcr moderne Audioformate.</p>"},{"location":"html/extern/audio/#grundverwendung","title":"\u2705 Grundverwendung","text":"<pre><code>&lt;audio controls&gt;\n  &lt;source src=\"beispiel.mp3\" type=\"audio/mpeg\" /&gt;\n  &lt;p&gt;Ihr Browser unterst\u00fctzt das Audio-Element nicht.&lt;/p&gt;\n&lt;/audio&gt;\n</code></pre> <ul> <li><code>controls</code> zeigt Bedienelemente wie Play/Pause und Lautst\u00e4rke</li> <li><code>&lt;source&gt;</code> erlaubt mehrere Formate zur Kompatibilit\u00e4t</li> <li>Fallback-Text f\u00fcr nicht unterst\u00fctzende Browser</li> </ul>"},{"location":"html/extern/audio/#attribute","title":"\ud83d\udd27 Attribute","text":"Attribut Beschreibung <code>src</code> Pfad zur Audiodatei (kann auch \u00fcber <code>&lt;source&gt;</code> definiert werden) <code>controls</code> Zeigt Standard-Audiosteuerung an <code>autoplay</code> Startet automatisch beim Laden (ben\u00f6tigt meist <code>muted</code>) <code>muted</code> Startet stummgeschaltet (z.\u202fB. in Kombination mit Autoplay) <code>loop</code> Spielt das Audio in Endlosschleife ab <code>preload</code> <code>none</code>, <code>metadata</code>, <code>auto</code> \u2013 steuert Vorladen der Datei <code>type</code> MIME-Type der Datei (z.\u202fB. <code>audio/mpeg</code>, <code>audio/ogg</code>)"},{"location":"html/extern/audio/#beispiel-mit-mehreren-formaten","title":"\ud83c\udfa7 Beispiel mit mehreren Formaten","text":"<pre><code>&lt;audio controls preload=\"metadata\"&gt;\n  &lt;source src=\"audio.ogg\" type=\"audio/ogg\" /&gt;\n  &lt;source src=\"audio.mp3\" type=\"audio/mpeg\" /&gt;\n  &lt;p&gt;Ihr Browser unterst\u00fctzt HTML5-Audio nicht.&lt;/p&gt;\n&lt;/audio&gt;\n</code></pre> <p>\ud83d\udc49 Der Browser verwendet die erste unterst\u00fctzte Quelle.</p>"},{"location":"html/extern/audio/#formatkompatibilitat","title":"\ud83e\udde0 Formatkompatibilit\u00e4t","text":"Format MIME-Type Browser-Unterst\u00fctzung MP3 <code>audio/mpeg</code> \u2705 Alle modernen Browser Ogg Vorbis <code>audio/ogg</code> \u2705 Firefox, \u2705 Chrome WAV <code>audio/wav</code> \u2705 Gro\u00dfe Browser, aber gro\u00dfe Dateigr\u00f6\u00dfe"},{"location":"html/extern/audio/#barrierefreiheit","title":"\u267f Barrierefreiheit","text":"<ul> <li><code>&lt;audio&gt;</code> hat native Unterst\u00fctzung f\u00fcr Tastatur und Screenreader</li> <li>Bei wichtigen Inhalten sollten Transkripte bereitgestellt werden</li> <li>Verwende das <code>title</code>-Attribut, um zus\u00e4tzliche Informationen zu bieten</li> </ul> <pre><code>&lt;audio controls title=\"Einf\u00fchrungspodcast Folge 1\"&gt;\n  &lt;source src=\"intro.mp3\" type=\"audio/mpeg\" /&gt;\n&lt;/audio&gt;\n</code></pre>"},{"location":"html/extern/audio/#styling-mit-css","title":"\ud83c\udfa8 Styling mit CSS","text":"<pre><code>audio {\n  width: 100%;\n  outline: none;\n}\n</code></pre> <p>\ud83d\udc49 Das <code>&lt;audio&gt;</code>-Element l\u00e4sst sich nur begrenzt stylen. F\u00fcr individuelle Player ist JavaScript n\u00f6tig.</p>"},{"location":"html/extern/audio/#unterschied-zu-video","title":"\ud83d\udd04 Unterschied zu <code>&lt;video&gt;</code>","text":"Element Medienart Bedienelemente Zus\u00e4tzliche Darstellung <code>&lt;audio&gt;</code> Nur Ton Ja Kein Bild <code>&lt;video&gt;</code> Ton + Bild Ja Videoausgabe"},{"location":"html/extern/audio/#haufige-fehler","title":"\u274c H\u00e4ufige Fehler","text":"Fehler Besser Nur ein Audioformat eingebunden Immer mehrere Formate f\u00fcr Kompatibilit\u00e4t Autoplay ohne <code>muted</code> Wird oft blockiert \u2013 nur <code>muted autoplay</code> nutzen Kein <code>controls</code>, keine Steuerung Immer Steuerung f\u00fcr Nutzer:innen bereitstellen"},{"location":"html/extern/audio/#fazit","title":"\ud83d\udcda Fazit","text":"<p>Das <code>&lt;audio&gt;</code>-Element ist die einfachste und effizienteste Methode, um Ton in Webseiten zu integrieren \u2013 mit optionaler Kontrolle \u00fcber Wiedergabe, Lautst\u00e4rke und Formatwahl. Barrierefreiheit, Mehrformat-Unterst\u00fctzung und Performance lassen sich gut kombinieren \u2013 ideal f\u00fcr moderne Webanwendungen.</p>"},{"location":"html/extern/embed/","title":"<code>&lt;embed&gt;</code> \u2013 Externe Inhalte einbetten","text":""},{"location":"html/extern/embed/#funktion","title":"\ud83e\udde9 Funktion","text":"<p>Das <code>&lt;embed&gt;</code>-Element wird verwendet, um externe Inhalte direkt in eine HTML-Seite einzubetten. Dazu z\u00e4hlen unter anderem:</p> <ul> <li>PDF-Dateien</li> <li>Videos (z.\u202fB. MP4, SWF)</li> <li>Audio-Dateien</li> <li>HTML-Anwendungen</li> <li>animierte SVGs oder interaktive Tools</li> </ul> <p>\ud83d\udccc Im Gegensatz zu <code>&lt;iframe&gt;</code> oder <code>&lt;object&gt;</code> ist <code>&lt;embed&gt;</code> ein self-closing Tag, der direkt eingebettete Medien oder Plugins rendert \u2013 ohne strukturiertes HTML-Innenleben.</p>"},{"location":"html/extern/embed/#grundverwendung","title":"\u2705 Grundverwendung","text":"<pre><code>&lt;embed src=\"dokument.pdf\" type=\"application/pdf\" width=\"800\" height=\"600\" /&gt;\n</code></pre> <ul> <li><code>src</code> legt die eingebundene Datei fest</li> <li><code>type</code> spezifiziert den MIME-Type (z.\u202fB. <code>application/pdf</code>)</li> <li><code>width</code> und <code>height</code> bestimmen die Darstellungsgr\u00f6\u00dfe im Dokument</li> </ul>"},{"location":"html/extern/embed/#attribute-im-uberblick","title":"\ud83d\udd27 Attribute im \u00dcberblick","text":"Attribut Beschreibung <code>src</code> URL oder Pfad zur einzubettenden Datei <code>type</code> MIME-Type des Inhalts (z.\u202fB. <code>video/mp4</code>, <code>application/pdf</code>) <code>width</code> Breite des eingebetteten Inhalts (z.\u202fB. <code>100%</code> oder <code>640</code>) <code>height</code> H\u00f6he des eingebetteten Inhalts <code>title</code> (Optional) Beschreibung f\u00fcr Barrierefreiheit &amp; Tooltip <code>pluginspage</code> (veraltet) URL zur Plugin-Downloadseite \u2013 heute irrelevant"},{"location":"html/extern/embed/#beispiel-pdf-dokument-anzeigen","title":"\ud83d\udcc4 Beispiel: PDF-Dokument anzeigen","text":"<pre><code>&lt;embed src=\"/downloads/handbuch.pdf\" type=\"application/pdf\" width=\"100%\" height=\"600px\" /&gt;\n</code></pre> <p>\ud83d\udc49 Wird direkt im Browser angezeigt (sofern der Browser PDF-Rendering unterst\u00fctzt).</p>"},{"location":"html/extern/embed/#beispiel-video-mp4","title":"\ud83c\udf9e Beispiel: Video (MP4)","text":"<pre><code>&lt;embed src=\"video.mp4\" type=\"video/mp4\" width=\"800\" height=\"450\" /&gt;\n</code></pre> <p>\u26a0\ufe0f F\u00fcr Medien wie Video und Audio sind <code>&lt;video&gt;</code> bzw. <code>&lt;audio&gt;</code> semantisch und funktional besser geeignet.</p>"},{"location":"html/extern/embed/#unterschied-zu-object-und-iframe","title":"\ud83d\uddbc Unterschied zu <code>&lt;object&gt;</code> und <code>&lt;iframe&gt;</code>","text":"Merkmal <code>&lt;embed&gt;</code> <code>&lt;object&gt;</code> <code>&lt;iframe&gt;</code> Selbstschlie\u00dfend \u2705 Ja \u274c Nein \u274c Nein Inhalt fallbackbar \u274c Nein \u2705 Ja (Inhalt m\u00f6glich) \u2705 Ja (Inhalt m\u00f6glich) Sandbox f\u00e4hig \u274c Nein \u274c Eingeschr\u00e4nkt \u2705 Ja (<code>sandbox</code> verf\u00fcgbar) MIME-Type wichtig \u2705 Ja \u2705 Ja \ud83d\udd04 Nur f\u00fcr Content-Typ-Pr\u00fcfung"},{"location":"html/extern/embed/#barrierefreiheit","title":"\u267f Barrierefreiheit","text":"<ul> <li>Verwende das <code>title</code>-Attribut f\u00fcr Screenreader und Tooltip-Infos</li> <li><code>&lt;embed&gt;</code>-Inhalte haben keine semantische Bedeutung</li> <li>F\u00fcr interaktive oder relevante Inhalte ggf. auf <code>&lt;iframe&gt;</code> oder <code>&lt;object&gt;</code> umsteigen</li> </ul> <pre><code>&lt;embed src=\"karte.svg\" type=\"image/svg+xml\" width=\"500\" height=\"400\" title=\"Interaktive Karte von Berlin\" /&gt;\n</code></pre>"},{"location":"html/extern/embed/#haufige-fehler","title":"\u274c H\u00e4ufige Fehler","text":"Fehler Besser Kein MIME-Type angegeben Immer <code>type</code> setzen F\u00fcr HTML-/JS-Apps verwendet Lieber <code>&lt;iframe&gt;</code> verwenden Kein Fallback f\u00fcr nicht unterst\u00fctzte Inhalte Nutze <code>&lt;object&gt;</code> f\u00fcr Backup-Inhalte"},{"location":"html/extern/embed/#wann-ist-embed-sinnvoll","title":"\ud83e\udde0 Wann ist <code>&lt;embed&gt;</code> sinnvoll?","text":"Szenario Empfehlung PDF-Dokument direkt anzeigen \u2705 Ja Nur eine Datei mit sicherem MIME-Type \u2705 Ja Mehrere Inhaltsalternativen oder Fallback n\u00f6tig \u274c Besser <code>&lt;object&gt;</code> Strukturierte Inhalte oder Webanwendung \u274c Besser <code>&lt;iframe&gt;</code>"},{"location":"html/extern/embed/#fazit","title":"\ud83d\udcda Fazit","text":"<p><code>&lt;embed&gt;</code> ist ein praktisches und leichtgewichtiges Element, um Medien oder Inhalte wie PDF, Videos oder SVGs direkt anzuzeigen. F\u00fcr einfache Einbettungen gen\u00fcgt es vollkommen \u2013 bei komplexeren oder interaktiven Inhalten sind <code>&lt;iframe&gt;</code> oder <code>&lt;object&gt;</code> oft besser geeignet.</p> <p>\ud83d\udcac Als N\u00e4chstes: M\u00f6chtest du mit <code>&lt;object&gt;</code>, <code>&lt;canvas&gt;</code>, <code>&lt;svg&gt;</code> oder interaktiven Webelementen weitermachen?</p>"},{"location":"html/extern/iframe/","title":"<code>&lt;iframe&gt;</code> \u2013 Externe Inhalte einbetten","text":""},{"location":"html/extern/iframe/#funktion","title":"\ud83e\udde9 Funktion","text":"<p>Das <code>&lt;iframe&gt;</code>-Element (Inline Frame) erm\u00f6glicht es, eine andere HTML-Seite oder Ressource in das aktuelle Dokument einzubetten. Es wird h\u00e4ufig genutzt f\u00fcr:</p> <ul> <li>YouTube-Videos</li> <li>Karten (z.\u202fB. Google Maps)</li> <li>Externe Inhalte oder Tools</li> <li>Vorschauen auf andere Webseiten</li> </ul> <p>\ud83d\udccc <code>&lt;iframe&gt;</code> l\u00e4dt eine eigene HTML-Seite in einem definierten Bereich innerhalb der aktuellen Seite.</p>"},{"location":"html/extern/iframe/#grundverwendung","title":"\u2705 Grundverwendung","text":"<pre><code>&lt;iframe src=\"https://example.com\" width=\"800\" height=\"600\" title=\"Externe Website\"&gt;\n  &lt;p&gt;Ihr Browser unterst\u00fctzt keine eingebetteten Inhalte.&lt;/p&gt;\n&lt;/iframe&gt;\n</code></pre> <ul> <li><code>src</code> gibt die eingebettete Ressource an</li> <li><code>title</code> ist wichtig f\u00fcr die Barrierefreiheit</li> <li><code>width</code> und <code>height</code> steuern die Gr\u00f6\u00dfe</li> <li>Fallback-Text wird angezeigt, wenn das Element nicht geladen werden kann</li> </ul>"},{"location":"html/extern/iframe/#attribute-im-uberblick","title":"\ud83d\udd27 Attribute im \u00dcberblick","text":"Attribut Beschreibung <code>src</code> URL der eingebetteten Seite oder Ressource <code>title</code> Barrierefreie Beschreibung des eingebetteten Inhalts <code>width</code>, <code>height</code> Gr\u00f6\u00dfe des Iframes in Pixel <code>allowfullscreen</code> Erlaubt Vollbildmodus (z.\u202fB. f\u00fcr Videos) <code>loading</code> <code>lazy</code> f\u00fcr verz\u00f6gertes Laden <code>sandbox</code> Aktiviert Sicherheitsbeschr\u00e4nkungen (siehe unten) <code>referrerpolicy</code> Steuert Referrer-Verhalten <code>allow</code> Spezifiziert Berechtigungen (z.\u202fB. <code>camera</code>, <code>fullscreen</code>)"},{"location":"html/extern/iframe/#beispiel-youtube-video","title":"\ud83c\udfaf Beispiel: YouTube-Video","text":"<pre><code>&lt;iframe \n  width=\"560\" \n  height=\"315\" \n  src=\"https://www.youtube.com/embed/dQw4w9WgXcQ\" \n  title=\"YouTube Video\"\n  frameborder=\"0\" \n  allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\"\n  allowfullscreen&gt;\n&lt;/iframe&gt;\n</code></pre> <p>\ud83d\udc49 YouTube bietet angepassten <code>&lt;iframe&gt;</code>-Code direkt zum Einbetten.</p>"},{"location":"html/extern/iframe/#sandbox-sicherheit","title":"\ud83d\udd10 Sandbox &amp; Sicherheit","text":"<p>Das <code>sandbox</code>-Attribut beschr\u00e4nkt das Verhalten des eingebetteten Inhalts und verhindert z.\u202fB.:</p> <ul> <li>Formular\u00fcbermittlungen</li> <li>Pop-ups</li> <li>Ausf\u00fchrung von Skripten</li> </ul> <p>Beispiel:</p> <pre><code>&lt;iframe \n  src=\"https://fremde-seite.de\"\n  sandbox=\"allow-same-origin allow-scripts\"\n  width=\"800\" height=\"400\"\n  title=\"Eingeschr\u00e4nkte Einbettung\"&gt;\n&lt;/iframe&gt;\n</code></pre> Sandbox-Modifikator Beschreibung <code>allow-scripts</code> Erlaubt JS (ohne <code>allow-same-origin</code> in isolierter Umgebung) <code>allow-forms</code> Erlaubt Formulare <code>allow-same-origin</code> Erm\u00f6glicht Zugriff auf Cookies/Storage <code>allow-popups</code> Erlaubt das \u00d6ffnen von neuen Tabs"},{"location":"html/extern/iframe/#barrierefreiheit","title":"\u267f Barrierefreiheit","text":"<ul> <li>Verwende immer ein <code>title</code>-Attribut, das den Inhalt beschreibt</li> <li>Fallback-Inhalt im <code>&lt;iframe&gt;</code> ist optional, aber hilfreich</li> <li>Nutze <code>aria-hidden=\"true\"</code> nur, wenn der eingebettete Inhalt dekorativ ist</li> </ul>"},{"location":"html/extern/iframe/#styling-mit-css","title":"\ud83c\udfa8 Styling mit CSS","text":"<pre><code>iframe {\n  max-width: 100%;\n  border: none;\n  border-radius: 10px;\n  aspect-ratio: 16 / 9;\n}\n</code></pre>"},{"location":"html/extern/iframe/#haufige-fehler","title":"\u274c H\u00e4ufige Fehler","text":"Fehler Besser Kein <code>title</code>-Attribut Immer f\u00fcr Screenreader setzen Volle Breite ohne Responsivit\u00e4t CSS mit <code>max-width</code>, <code>aspect-ratio</code> nutzen <code>iframe</code> ohne <code>sandbox</code> bei Fremdinhalten Immer absichern bei unbekannten Quellen"},{"location":"html/extern/iframe/#alternativen-und-vergleich","title":"\ud83d\udd04 Alternativen und Vergleich","text":"Zweck Besser geeignetes Element Bildanzeige <code>&lt;img&gt;</code> Interaktive Videos <code>&lt;video&gt;</code> (lokal) / <code>&lt;iframe&gt;</code> (extern) Layout-Container <code>&lt;div&gt;</code> Dokumentenvorschau <code>&lt;embed&gt;</code> oder <code>&lt;object&gt;</code>"},{"location":"html/extern/iframe/#fazit","title":"\ud83d\udcda Fazit","text":"<p><code>&lt;iframe&gt;</code> ist ein m\u00e4chtiges HTML-Werkzeug, um fremde Inhalte sicher und flexibel einzubetten. Mit <code>sandbox</code>, <code>loading=\"lazy\"</code> und responsivem CSS kannst du Performance, Sicherheit und UX optimieren.</p>"},{"location":"html/extern/img/","title":"<code>&lt;img&gt;</code> \u2013 Bild in HTML einf\u00fcgen","text":""},{"location":"html/extern/img/#funktion","title":"\ud83e\udde9 Funktion","text":"<p>Das <code>&lt;img&gt;</code>-Element wird verwendet, um grafische Inhalte wie Fotos, Illustrationen, Icons oder Diagramme auf einer Webseite anzuzeigen. Es ist ein leeres (self-closing) Inline-Element, das keine inneren Inhalte besitzt, aber \u00fcber Attribute gesteuert wird.</p> <p>\ud83d\udccc Bilder erh\u00f6hen die visuelle Attraktivit\u00e4t, unterst\u00fctzen Inhalte \u2013 und sind ein zentraler Bestandteil moderner Webseiten.</p>"},{"location":"html/extern/img/#grundverwendung","title":"\u2705 Grundverwendung","text":"<pre><code>&lt;img src=\"bild.jpg\" alt=\"Beschreibung des Bildes\" /&gt;\n</code></pre> <ul> <li><code>src</code> ist der Pfad zum Bild (relativ oder absolut)</li> <li><code>alt</code> ist ein verpflichtender Alternativtext \u2013 wichtig f\u00fcr Barrierefreiheit und SEO</li> </ul>"},{"location":"html/extern/img/#attribute-im-uberblick","title":"\ud83d\udd27 Attribute im \u00dcberblick","text":"Attribut Beschreibung <code>src</code> Pfad zur Bilddatei (lokal oder URL) <code>alt</code> Alternativtext (wird angezeigt, wenn Bild nicht geladen wird) <code>title</code> Zus\u00e4tzliche Beschreibung als Tooltip bei Mouseover <code>width</code> / <code>height</code> Bildgr\u00f6\u00dfe in Pixel (empfohlen f\u00fcr Layout-Stabilit\u00e4t) <code>loading</code> <code>lazy</code> f\u00fcr verz\u00f6gertes Nachladen, <code>eager</code> f\u00fcr sofortiges Laden <code>srcset</code> Alternativen f\u00fcr responsive Bilder <code>sizes</code> Unterst\u00fctzt <code>&lt;srcset&gt;</code> zur Gr\u00f6\u00dfenoptimierung <code>decoding</code> Bilddecodierung: <code>sync</code>, <code>async</code>, <code>auto</code> <code>referrerpolicy</code> Steuert HTTP-Referrer bei externen Bildern"},{"location":"html/extern/img/#beispiel-mit-festen-dimensionen","title":"\ud83d\uddbc\ufe0f Beispiel mit festen Dimensionen","text":"<pre><code>&lt;img src=\"team.jpg\" alt=\"Teamfoto\" width=\"600\" height=\"400\" /&gt;\n</code></pre>"},{"location":"html/extern/img/#responsive-varianten-mit-srcset","title":"\ud83e\udde0 Responsive Varianten mit <code>srcset</code>","text":"<pre><code>&lt;img \n  src=\"bild-klein.jpg\" \n  srcset=\"bild-gross.jpg 1024w, bild-medium.jpg 640w\" \n  sizes=\"(max-width: 600px) 100vw, 50vw\"\n  alt=\"Landschaft bei Sonnenuntergang\" \n/&gt;\n</code></pre> <p>\ud83d\udc49 Der Browser w\u00e4hlt das passende Bild je nach Bildschirmgr\u00f6\u00dfe und Aufl\u00f6sung.</p>"},{"location":"html/extern/img/#barrierefreiheit-a11y","title":"\u267f Barrierefreiheit (a11y)","text":"Element Funktion <code>alt</code> Muss klar und treffend beschreiben, was auf dem Bild zu sehen ist Leeres <code>alt=\"\"</code> Verwenden f\u00fcr dekorative Bilder (z.\u202fB. Icons) <code>title</code> Optional \u2013 aber kein Ersatz f\u00fcr <code>alt</code> <p>Beispiele f\u00fcr gutes <code>alt</code>:</p> <ul> <li>\u2714\ufe0f <code>alt=\"Portr\u00e4t von Florian Fenzl\"</code> </li> <li>\u2714\ufe0f <code>alt=\"Diagramm mit Quartalszahlen 2025\"</code> </li> <li>\u274c <code>alt=\"bild123.jpg\"</code> \u2013 unbrauchbar f\u00fcr Screenreader</li> </ul>"},{"location":"html/extern/img/#ladeverhalten-optimieren","title":"\ud83d\udce6 Ladeverhalten optimieren","text":"<ul> <li><code>loading=\"lazy\"</code> verbessert die Performance bei vielen Bildern</li> <li>Bilder sollten vorab dimensioniert werden (z.\u202fB. mit <code>width</code>/<code>height</code>)</li> <li>Moderne Formate wie WebP oder AVIF bieten bessere Komprimierung</li> </ul> <pre><code>&lt;img \n  src=\"banner.webp\" \n  alt=\"Headergrafik mit Logo\" \n  width=\"1200\" \n  height=\"400\" \n  loading=\"lazy\"\n/&gt;\n</code></pre>"},{"location":"html/extern/img/#haufige-fehler","title":"\u274c H\u00e4ufige Fehler","text":"Fehler Besser Kein <code>alt</code>-Text Immer <code>alt</code> verwenden \u2013 auch f\u00fcr dekorative Inhalte Layout mit Bildern erzwingen Daf\u00fcr CSS nutzen Gro\u00dfe Bilder ohne Optimierung einbinden Vorher skalieren und komprimieren <code>&lt;img&gt;</code> ohne <code>width</code>/<code>height</code> F\u00fchrt zu Layout-Spr\u00fcngen \u2013 besser mit festen Gr\u00f6\u00dfenangaben"},{"location":"html/extern/img/#vergleich-img-vs-css-hintergrund","title":"\ud83d\udd04 Vergleich: <code>&lt;img&gt;</code> vs. CSS-Hintergrund","text":"Zweck <code>&lt;img&gt;</code> CSS <code>background-image</code> Sichtbarer Inhalt Ja Nein (rein dekorativ) SEO / Barrierefreiheit Ja, mit <code>alt</code>-Text Nein Skalierung / Positionierung Eingeschr\u00e4nkt Sehr flexibel \u00fcber CSS"},{"location":"html/extern/img/#fazit","title":"\ud83d\udcda Fazit","text":"<p>Das <code>&lt;img&gt;</code>-Tag ist essenziell zur Integration visueller Inhalte in HTML-Seiten. Mit sinnvollen Attributen, barrierefreiem <code>alt</code>-Text und moderner Optimierung tr\u00e4gt es ma\u00dfgeblich zur Nutzererfahrung, Performance und SEO bei.</p>"},{"location":"html/extern/picture/","title":"<code>&lt;picture&gt;</code> \u2013 Responsive Bilder einbinden","text":""},{"location":"html/extern/picture/#funktion","title":"\ud83e\udde9 Funktion","text":"<p>Das <code>&lt;picture&gt;</code>-Element erm\u00f6glicht die Einbindung responsiver Bilder, die sich je nach Bildschirmgr\u00f6\u00dfe, Aufl\u00f6sung oder Dateiformat automatisch anpassen. So k\u00f6nnen beispielsweise auf kleinen Ger\u00e4ten kleinere Bilder oder modernere Formate (wie WebP oder AVIF) bevorzugt geladen werden.</p> <p>\ud83d\udccc <code>&lt;picture&gt;</code> gibt dem Browser mehr Flexibilit\u00e4t bei der Auswahl der besten Bildquelle \u2013 f\u00fcr Performance, Qualit\u00e4t und Kontrolle.</p>"},{"location":"html/extern/picture/#grundverwendung","title":"\u2705 Grundverwendung","text":"<pre><code>&lt;picture&gt;\n  &lt;source srcset=\"bild.webp\" type=\"image/webp\" /&gt;\n  &lt;source srcset=\"bild.jpg\" type=\"image/jpeg\" /&gt;\n  &lt;img src=\"bild.jpg\" alt=\"Beispielbild\" /&gt;\n&lt;/picture&gt;\n</code></pre> <ul> <li>Der Browser w\u00e4hlt den ersten passenden <code>&lt;source&gt;</code>-Eintrag</li> <li><code>&lt;img&gt;</code> dient als Fallback und liefert <code>alt</code>, <code>width</code>, <code>height</code> etc.</li> </ul>"},{"location":"html/extern/picture/#struktur-und-attribute","title":"\ud83d\udd27 Struktur und Attribute","text":""},{"location":"html/extern/picture/#picture","title":"<code>&lt;picture&gt;</code>","text":"<ul> <li>Container f\u00fcr eine oder mehrere <code>&lt;source&gt;</code>-Elemente</li> <li>Keine eigenen Attribute \u2013 wird \u00fcber <code>&lt;img&gt;</code> und <code>&lt;source&gt;</code> gesteuert</li> </ul>"},{"location":"html/extern/picture/#source","title":"<code>&lt;source&gt;</code>","text":"Attribut Bedeutung <code>srcset</code> Pfad zur Bildquelle <code>type</code> Bildformat (<code>image/webp</code>, <code>image/jpeg</code>, ...) <code>media</code> Media Query (z.\u202fB. <code>min-width</code>, <code>max-width</code>, etc.) <code>sizes</code> Optionale Angabe f\u00fcr Layoutgr\u00f6\u00dfe (nur bei <code>srcset</code> mit Gr\u00f6\u00dfen)"},{"location":"html/extern/picture/#img","title":"<code>&lt;img&gt;</code>","text":"<ul> <li>Pflicht innerhalb von <code>&lt;picture&gt;</code></li> <li>Muss ein <code>alt</code>-Attribut enthalten</li> <li>Wird verwendet, wenn kein <code>&lt;source&gt;</code> passt</li> </ul>"},{"location":"html/extern/picture/#beispiel-bild-nach-viewport-groe-wechseln","title":"\ud83d\uddbc\ufe0f Beispiel: Bild nach Viewport-Gr\u00f6\u00dfe wechseln","text":"<pre><code>&lt;picture&gt;\n  &lt;source srcset=\"bild-large.webp\" media=\"(min-width: 1024px)\" type=\"image/webp\" /&gt;\n  &lt;source srcset=\"bild-medium.jpg\" media=\"(min-width: 600px)\" type=\"image/jpeg\" /&gt;\n  &lt;img src=\"bild-small.jpg\" alt=\"Ein sch\u00f6ner Ausblick\" width=\"800\" height=\"600\" /&gt;\n&lt;/picture&gt;\n</code></pre> <p>\ud83d\udc49 Je nach Viewport l\u00e4dt der Browser ein kleines, mittleres oder gro\u00dfes Bild.</p>"},{"location":"html/extern/picture/#beispiel-mit-retina-support","title":"\ud83d\udcf1 Beispiel mit Retina-Support","text":"<pre><code>&lt;picture&gt;\n  &lt;source srcset=\"bild@2x.webp 2x, bild.webp 1x\" type=\"image/webp\" /&gt;\n  &lt;img src=\"bild.jpg\" alt=\"Produktabbildung\" /&gt;\n&lt;/picture&gt;\n</code></pre> <p>\ud83d\udc49 Retina-Displays bekommen die h\u00f6her aufgel\u00f6ste Variante (2x), normale Ger\u00e4te die Standardversion (1x).</p>"},{"location":"html/extern/picture/#barrierefreiheit","title":"\u267f Barrierefreiheit","text":"<ul> <li>Das <code>alt</code>-Attribut im <code>&lt;img&gt;</code> ist verpflichtend</li> <li><code>&lt;picture&gt;</code> selbst hat keine semantische Bedeutung</li> <li>Optional mit <code>&lt;figure&gt;</code> kombinierbar:</li> </ul> <pre><code>&lt;figure&gt;\n  &lt;picture&gt;\n    &lt;source srcset=\"portrait.webp\" type=\"image/webp\" /&gt;\n    &lt;img src=\"portrait.jpg\" alt=\"Florian Fenzl\" /&gt;\n  &lt;/picture&gt;\n  &lt;figcaption&gt;Portrait von Florian Fenzl&lt;/figcaption&gt;\n&lt;/figure&gt;\n</code></pre>"},{"location":"html/extern/picture/#wann-picture-verwenden","title":"\ud83e\udde0 Wann <code>&lt;picture&gt;</code> verwenden?","text":"Use Case Geeignet? Responsive Images \u2705 Ja Retina-Optimierung \u2705 Ja Browserformat-Kompatibilit\u00e4t \u2705 Ja Nur einfache Bilder anzeigen \u274c Lieber direkt <code>&lt;img&gt;</code>"},{"location":"html/extern/picture/#haufige-fehler","title":"\u274c H\u00e4ufige Fehler","text":"Fehler Empfehlung Kein <code>&lt;img&gt;</code>-Fallback Immer am Ende <code>&lt;img&gt;</code> verwenden <code>type</code> oder <code>media</code> vergessen F\u00fchrt zu fehlerhafter Auswahl Nur Desktop-Version eingebunden Mobile-First: auch kleine Versionen anbieten"},{"location":"html/extern/picture/#vergleich-picture-vs-srcset","title":"\ud83d\udd04 Vergleich: <code>&lt;picture&gt;</code> vs. <code>srcset</code>","text":"Technik Vorteile Einschr\u00e4nkungen <code>&lt;img srcset&gt;</code> Einfacher Syntax, schnelle Integration Kein Wechsel des Formats m\u00f6glich <code>&lt;picture&gt;</code> Voll flexibel: Format + Media Queries Etwas komplexer in der Struktur"},{"location":"html/extern/picture/#fazit","title":"\ud83d\udcda Fazit","text":"<p>Das <code>&lt;picture&gt;</code>-Element ist ein leistungsstarkes HTML-Feature zur Optimierung von Bildern f\u00fcr verschiedene Bildschirmgr\u00f6\u00dfen, Ger\u00e4te und Formate. Besonders in Zeiten von Mobile First und Page Speed Optimierung ist der gezielte Einsatz von <code>&lt;picture&gt;</code> ein echter Pluspunkt.</p>"},{"location":"html/extern/video/","title":"<code>&lt;video&gt;</code> \u2013 Video in HTML einbinden","text":""},{"location":"html/extern/video/#funktion","title":"\ud83e\udde9 Funktion","text":"<p>Das <code>&lt;video&gt;</code>-Element erlaubt es, Videos direkt in Webseiten einzubetten, ohne externe Plugins wie Flash. Es unterst\u00fctzt moderne Formate, eigene Bedienelemente und kann mit JavaScript gesteuert werden.</p> <p>\ud83d\udccc <code>&lt;video&gt;</code> ist ein Block-Element und bietet volle Kontrolle \u00fcber Wiedergabe, Lautst\u00e4rke, Untertitel und mehr.</p>"},{"location":"html/extern/video/#grundverwendung","title":"\u2705 Grundverwendung","text":"<pre><code>&lt;video controls width=\"640\" height=\"360\"&gt;\n  &lt;source src=\"beispiel.mp4\" type=\"video/mp4\" /&gt;\n  &lt;p&gt;Ihr Browser unterst\u00fctzt das Video-Tag nicht.&lt;/p&gt;\n&lt;/video&gt;\n</code></pre> <ul> <li><code>controls</code> zeigt Standard-Bedienelemente</li> <li><code>&lt;source&gt;</code> erlaubt mehrere Videoformate zur Kompatibilit\u00e4t</li> <li>Alternativer Text wird bei inkompatiblen Browsern angezeigt</li> </ul>"},{"location":"html/extern/video/#attribute-im-uberblick","title":"\ud83d\udd27 Attribute im \u00dcberblick","text":"Attribut Beschreibung <code>src</code> Direktpfad zur Videodatei (optional bei Verwendung von <code>&lt;source&gt;</code>) <code>controls</code> Zeigt Wiedergabeleiste mit Play/Pause, Lautst\u00e4rke etc. <code>autoplay</code> Startet automatisch (ben\u00f6tigt <code>muted</code> in modernen Browsern) <code>muted</code> Startet stummgeschaltet (z.\u202fB. f\u00fcr Autoplay) <code>loop</code> Wiederholt das Video automatisch <code>poster</code> Platzhalterbild vor dem Abspielen <code>preload</code> <code>auto</code>, <code>metadata</code>, <code>none</code> \u2013 steuert Ladeverhalten <code>width</code>, <code>height</code> Gr\u00f6\u00dfe des Players <code>playsinline</code> Startet das Video im Dokumentfluss (v.\u202fa. auf iOS)"},{"location":"html/extern/video/#beispiel-mit-mehreren-quellen","title":"\ud83c\udfaf Beispiel mit mehreren Quellen","text":"<pre><code>&lt;video controls poster=\"vorschaubild.jpg\" width=\"800\"&gt;\n  &lt;source src=\"video.mp4\" type=\"video/mp4\" /&gt;\n  &lt;source src=\"video.webm\" type=\"video/webm\" /&gt;\n  &lt;p&gt;Ihr Browser unterst\u00fctzt kein HTML5-Video.&lt;/p&gt;\n&lt;/video&gt;\n</code></pre> <p>\ud83d\udc49 Der Browser verwendet die erste unterst\u00fctzte Quelle \u2013 so wird maximale Kompatibilit\u00e4t erreicht.</p>"},{"location":"html/extern/video/#erweiterte-nutzung-untertitel-und-tracks","title":"\ud83e\udde0 Erweiterte Nutzung: Untertitel und Tracks","text":"<pre><code>&lt;video controls&gt;\n  &lt;source src=\"clip.mp4\" type=\"video/mp4\" /&gt;\n  &lt;track src=\"untertitel.vtt\" kind=\"subtitles\" srclang=\"de\" label=\"Deutsch\" default /&gt;\n&lt;/video&gt;\n</code></pre> <code>&lt;track&gt;</code> Attribut Bedeutung <code>kind</code> <code>subtitles</code>, <code>captions</code>, <code>descriptions</code>, <code>chapters</code>, <code>metadata</code> <code>srclang</code> Sprachcode (z.\u202fB. <code>en</code>, <code>de</code>) <code>label</code> Beschriftung im Auswahlmen\u00fc <code>default</code> Wird standardm\u00e4\u00dfig aktiviert"},{"location":"html/extern/video/#barrierefreiheit-a11y","title":"\u267f Barrierefreiheit (a11y)","text":"<ul> <li>Untertitel und Audiobeschreibungen verbessern Zug\u00e4nglichkeit</li> <li>Ggf. mit <code>&lt;figure&gt;</code> und <code>&lt;figcaption&gt;</code> kombinieren:</li> </ul> <pre><code>&lt;figure&gt;\n  &lt;video controls src=\"demo.mp4\"&gt;&lt;/video&gt;\n  &lt;figcaption&gt;Demovideo zur Produktfunktion&lt;/figcaption&gt;\n&lt;/figure&gt;\n</code></pre>"},{"location":"html/extern/video/#video-vs-andere-medientypen","title":"\ud83d\udd04 Video vs. andere Medientypen","text":"Element Inhaltstyp Interaktiv Beschreibung <code>&lt;video&gt;</code> Video Ja Visuelle Medien mit Ton <code>&lt;audio&gt;</code> Audio Ja Nur Ton, ohne Bild <code>&lt;iframe&gt;</code> Eingebettete Seite Eingeschr\u00e4nkt F\u00fcr externe Videoquellen wie YouTube"},{"location":"html/extern/video/#styling-mit-css","title":"\ud83c\udfa8 Styling mit CSS","text":"<pre><code>video {\n  max-width: 100%;\n  border-radius: 12px;\n  box-shadow: 0 0 10px rgba(0,0,0,0.1);\n}\n</code></pre>"},{"location":"html/extern/video/#haufige-fehler","title":"\u274c H\u00e4ufige Fehler","text":"Fehler Besser Nur ein Format bereitstellen Mehrere Formate mit <code>&lt;source&gt;</code> einbinden Kein <code>controls</code> oder Fallback-Text Immer mit Steuerelementen oder Hinweis Autoplay ohne <code>muted</code> Moderne Browser erlauben nur stummes Autoplay"},{"location":"html/extern/video/#fazit","title":"\ud83d\udcda Fazit","text":"<p>Das <code>&lt;video&gt;</code>-Tag macht HTML5 zu einer vollwertigen Multimedia-Plattform \u2013 ohne Plugins oder externe Player. Mit guter Quellenwahl, Untertitelung und sauberem Styling l\u00e4sst sich ein barrierefreies, reaktionsschnelles Videoerlebnis direkt im Browser schaffen.</p> <p>\ud83d\udcac Als N\u00e4chstes: M\u00f6chtest du <code>&lt;audio&gt;</code>, <code>&lt;iframe&gt;</code> oder <code>&lt;picture&gt;</code> erkunden?</p>"},{"location":"html/form/button/","title":"<code>&lt;button&gt;</code> \u2013 Interaktive Schaltfl\u00e4che","text":""},{"location":"html/form/button/#funktion","title":"\ud83e\udde9 Funktion","text":"<p>Das <code>&lt;button&gt;</code>-Element erzeugt eine klickbare Schaltfl\u00e4che, die f\u00fcr verschiedene Zwecke eingesetzt werden kann \u2013 zum Beispiel:</p> <ul> <li>zum Absenden oder Zur\u00fccksetzen eines Formulars,</li> <li>f\u00fcr Interaktionen per JavaScript (z.\u202fB. \u00d6ffnen eines Modals),</li> <li>oder als allgemeiner Trigger f\u00fcr clientseitige Logik.</li> </ul> <p>\ud83d\udccc <code>&lt;button&gt;</code> ist ein vollwertiges semantisches Element, das standardm\u00e4\u00dfig Fokus-, Tastatur- und ARIA-Unterst\u00fctzung bietet.</p>"},{"location":"html/form/button/#verwendung","title":"\u2705 Verwendung","text":""},{"location":"html/form/button/#formular-schaltflache","title":"Formular-Schaltfl\u00e4che","text":"<pre><code>&lt;form action=\"/absenden\" method=\"post\"&gt;\n  &lt;input type=\"email\" name=\"email\" required /&gt;\n  &lt;button type=\"submit\"&gt;Absenden&lt;/button&gt;\n&lt;/form&gt;\n</code></pre>"},{"location":"html/form/button/#interaktive-schaltflache-mit-javascript","title":"Interaktive Schaltfl\u00e4che mit JavaScript","text":"<pre><code>&lt;button type=\"button\" onclick=\"alert('Hallo Welt!')\"&gt;Klick mich&lt;/button&gt;\n</code></pre>"},{"location":"html/form/button/#attribute","title":"\ud83d\udd27 Attribute","text":"Attribut Beschreibung <code>type</code> Bestimmt die Funktion: <code>submit</code>, <code>reset</code> oder <code>button</code> (Standard: <code>submit</code>) <code>disabled</code> Deaktiviert die Schaltfl\u00e4che \u2013 keine Interaktion m\u00f6glich <code>name</code> Formularschl\u00fcssel, wird beim Absenden \u00fcbermittelt <code>value</code> Wert, der zusammen mit dem Namen gesendet wird <code>form</code> Verkn\u00fcpft Button mit externem Formular (au\u00dferhalb des <code>&lt;form&gt;</code>-Tags) <code>autofocus</code> Setzt automatisch den Fokus auf den Button beim Laden <code>aria-</code> ARIA-Rollen und Zust\u00e4nde f\u00fcr Barrierefreiheit"},{"location":"html/form/button/#typische-type-werte","title":"\ud83c\udfaf Typische <code>type</code>-Werte","text":"Wert Bedeutung <code>submit</code> Sendet das Formular (Standardwert) <code>reset</code> Setzt alle Felder im Formular zur\u00fcck <code>button</code> Keine Standardaktion \u2013 ben\u00f6tigt JS-Logik"},{"location":"html/form/button/#beispiel-mit-css","title":"\ud83c\udfa8 Beispiel mit CSS","text":"<pre><code>&lt;button class=\"cta\"&gt;Jetzt starten&lt;/button&gt;\n</code></pre> <pre><code>button.cta {\n  background-color: #0057b8;\n  color: white;\n  border: none;\n  padding: 0.8rem 1.2rem;\n  font-size: 1rem;\n  border-radius: 6px;\n  cursor: pointer;\n}\n</code></pre>"},{"location":"html/form/button/#barrierefreiheit","title":"\u267f Barrierefreiheit","text":"<ul> <li><code>&lt;button&gt;</code> ist nativ barrierefrei: Fokusf\u00e4hig, mit Tastatur nutzbar, durch Screenreader erkannt</li> <li><code>aria-label</code> kann verwendet werden, um die Funktion genauer zu beschreiben:</li> </ul> <pre><code>&lt;button aria-label=\"Suchmen\u00fc \u00f6ffnen\"&gt;\n  \ud83d\udd0d\n&lt;/button&gt;\n</code></pre>"},{"location":"html/form/button/#unterschied-zu-input-typesubmit","title":"\ud83e\udde0 Unterschied zu <code>&lt;input type=\"submit\"&gt;</code>","text":"Kriterium <code>&lt;button&gt;</code> <code>&lt;input type=\"submit\"&gt;</code> Inhalte Text, HTML, Symbole erlaubt Nur Text \u00fcber <code>value</code> Styling Flexibler durch HTML-Struktur Weniger Gestaltungsspielraum Barrierefreiheit Beide gut, aber <code>&lt;button&gt;</code> flexibler Kombinierbar mit Icons Ja Nein"},{"location":"html/form/button/#haufige-fehler","title":"\u274c H\u00e4ufige Fehler","text":"Fehler Besser Kein <code>type</code> angegeben Immer <code>type=\"button\"</code> bei nicht-Formularbuttons Nur Text ohne Kontext Sinnvolle Labels verwenden Styling mit <code>&lt;a&gt;</code> als Button Lieber echtes <code>&lt;button&gt;</code> nutzen (semantisch korrekt)"},{"location":"html/form/button/#fazit","title":"\ud83d\udcda Fazit","text":"<p><code>&lt;button&gt;</code> ist ein vielseitiges, zug\u00e4ngliches und modernes HTML-Element f\u00fcr Interaktionen aller Art. Mit dem richtigen <code>type</code> und sinnvoller Beschriftung l\u00e4sst sich damit fast jede Aktion im Web ausl\u00f6sen \u2013 von Formulareingaben bis UI-Trigger.</p>"},{"location":"html/form/datalist/","title":"<code>&lt;datalist&gt;</code> \u2013 Eingabe mit Vorschlagsliste","text":""},{"location":"html/form/datalist/#funktion","title":"\ud83e\udde9 Funktion","text":"<p>Das <code>&lt;datalist&gt;</code>-Element erm\u00f6glicht dem Benutzer die freie Eingabe eines Wertes, aber mit vordefinierten Vorschl\u00e4gen, die beim Tippen angezeigt werden. Es funktioniert in Kombination mit einem <code>&lt;input&gt;</code>-Feld und verh\u00e4lt sich wie eine Auto-Vervollst\u00e4ndigung, bei der die Werte nicht zwingend ausgew\u00e4hlt werden m\u00fcssen.</p>"},{"location":"html/form/datalist/#grundstruktur","title":"\u2705 Grundstruktur","text":"<pre><code>&lt;label for=\"stadt\"&gt;Stadt:&lt;/label&gt;\n&lt;input list=\"staedte\" id=\"stadt\" name=\"stadt\" /&gt;\n&lt;datalist id=\"staedte\"&gt;\n  &lt;option value=\"Berlin\"&gt;\n  &lt;option value=\"Hamburg\"&gt;\n  &lt;option value=\"M\u00fcnchen\"&gt;\n&lt;/datalist&gt;\n</code></pre> <p>Was passiert? \ud83d\udc49 Sobald der Benutzer zu tippen beginnt, schl\u00e4gt der Browser passende Werte aus der Liste vor.</p>"},{"location":"html/form/datalist/#wichtige-elemente-attribute","title":"\ud83d\udd27 Wichtige Elemente &amp; Attribute","text":""},{"location":"html/form/datalist/#input-element","title":"<code>&lt;input&gt;</code>-Element:","text":"Attribut Beschreibung <code>list</code> Verweist auf die <code>id</code> des zugeh\u00f6rigen <code>&lt;datalist&gt;</code> <code>name</code> Name f\u00fcr die Formular\u00fcbertragung <code>type</code> Funktioniert mit z.\u202fB. <code>text</code>, <code>email</code>, <code>search</code>, <code>url</code>"},{"location":"html/form/datalist/#datalist-element","title":"<code>&lt;datalist&gt;</code>-Element:","text":"Attribut Beschreibung <code>id</code> Eindeutige ID, die vom Input referenziert wird"},{"location":"html/form/datalist/#option-element-innerhalb-von-datalist","title":"<code>&lt;option&gt;</code>-Element innerhalb von <code>&lt;datalist&gt;</code>:","text":"Attribut Beschreibung <code>value</code> Vorgeschlagener Wert \u2013 wird angezeigt und kann \u00fcbernommen werden <code>label</code> Optional: alternativer Anzeigename (nicht von allen Browsern unterst\u00fctzt)"},{"location":"html/form/datalist/#beispiele","title":"\ud83e\uddea Beispiele","text":""},{"location":"html/form/datalist/#1-textfeld-mit-vorschlagen","title":"1. \ud83d\udd24 Textfeld mit Vorschl\u00e4gen","text":"<pre><code>&lt;label for=\"browser\"&gt;Lieblingsbrowser:&lt;/label&gt;\n&lt;input list=\"browserliste\" id=\"browser\" name=\"browser\" /&gt;\n\n&lt;datalist id=\"browserliste\"&gt;\n  &lt;option value=\"Chrome\"&gt;\n  &lt;option value=\"Firefox\"&gt;\n  &lt;option value=\"Safari\"&gt;\n  &lt;option value=\"Edge\"&gt;\n  &lt;option value=\"Opera\"&gt;\n&lt;/datalist&gt;\n</code></pre> <p>\ud83d\udc49 Der Benutzer kann eigene Werte eingeben oder einen aus der Liste w\u00e4hlen.</p>"},{"location":"html/form/datalist/#2-url-vorschlage","title":"2. \ud83c\udf10 URL-Vorschl\u00e4ge","text":"<pre><code>&lt;label for=\"website\"&gt;Webseite:&lt;/label&gt;\n&lt;input type=\"url\" list=\"vorschlaege\" name=\"website\" /&gt;\n\n&lt;datalist id=\"vorschlaege\"&gt;\n  &lt;option value=\"https://example.com\"&gt;\n  &lt;option value=\"https://solago.de\"&gt;\n  &lt;option value=\"https://openai.com\"&gt;\n&lt;/datalist&gt;\n</code></pre> <p>\ud83d\udc49 Vorschl\u00e4ge f\u00fcr h\u00e4ufig besuchte oder empfohlene URLs.</p>"},{"location":"html/form/datalist/#3-mit-vordefiniertem-wert-vorschlagen","title":"3. \u2728 Mit vordefiniertem Wert + Vorschl\u00e4gen","text":"<pre><code>&lt;input list=\"sprachen\" name=\"sprache\" value=\"Deutsch\" /&gt;\n\n&lt;datalist id=\"sprachen\"&gt;\n  &lt;option value=\"Deutsch\"&gt;\n  &lt;option value=\"Englisch\"&gt;\n  &lt;option value=\"Franz\u00f6sisch\"&gt;\n&lt;/datalist&gt;\n</code></pre> <p>\ud83d\udc49 \u201eDeutsch\u201c ist vorausgef\u00fcllt, aber der Benutzer kann etwas anderes w\u00e4hlen oder eingeben.</p>"},{"location":"html/form/datalist/#einschrankungen","title":"\u26a0\ufe0f Einschr\u00e4nkungen","text":"<ul> <li><code>&lt;datalist&gt;</code> unterst\u00fctzt keine Gruppierung wie <code>&lt;optgroup&gt;</code>.</li> <li>Kein Mehrfachauswahl \u2013 anders als bei <code>&lt;select multiple&gt;</code>.</li> <li>Styling ist browserabh\u00e4ngig und nicht vollst\u00e4ndig kontrollierbar via CSS.</li> <li>Nicht alle mobilen Browser zeigen Vorschl\u00e4ge an (z.\u202fB. \u00e4ltere iOS-Versionen).</li> </ul>"},{"location":"html/form/datalist/#barrierefreiheit","title":"\u267f Barrierefreiheit","text":"<ul> <li>Verwende ein <code>&lt;label&gt;</code> mit <code>for</code>, um die Verbindung zum Input herzustellen.</li> <li>Stelle sicher, dass der Kontext der Vorschl\u00e4ge klar ist \u2013 besonders bei \u00e4hnlichen Begriffen.</li> <li><code>aria-autocomplete=\"list\"</code> kann bei benutzerdefinierten Controls sinnvoll sein (nicht notwendig f\u00fcr natives <code>&lt;datalist&gt;</code>).</li> </ul>"},{"location":"html/form/datalist/#best-practices","title":"\ud83d\udca1 Best Practices","text":"<ul> <li>Verwende <code>&lt;datalist&gt;</code> f\u00fcr kleine, bekannte Wertemengen \u2013 z.\u202fB. Autovervollst\u00e4ndigung, h\u00e4ufige St\u00e4dte, Codes etc.</li> <li>F\u00fcr gr\u00f6\u00dfere Datenmengen oder dynamische Inhalte nutze JavaScript-basierte Autocomplete-Komponenten.</li> <li>Gib nur Vorschl\u00e4ge an, die f\u00fcr das Eingabefeld logisch und relevant sind.</li> <li>Stelle sicher, dass manuelle Eingaben nicht fehlschlagen, wenn sie nicht in der Liste stehen.</li> </ul>"},{"location":"html/form/datalist/#fazit","title":"\ud83d\udcda Fazit","text":"<p>Das <code>&lt;datalist&gt;</code>-Element ist ein einfaches, aber sehr n\u00fctzliches Werkzeug zur Verbesserung der Usability, ohne komplexes JavaScript. Es ist besonders gut geeignet, wenn Benutzer freitextlich eingeben d\u00fcrfen, aber du sinnvolle Vorschl\u00e4ge anbieten m\u00f6chtest.</p>"},{"location":"html/form/fieldset/","title":"<code>&lt;fieldset&gt;</code> \u2013 Gruppierung von Formularfeldern","text":""},{"location":"html/form/fieldset/#funktion","title":"\ud83e\udde9 Funktion","text":"<p>Das <code>&lt;fieldset&gt;</code>-Element wird verwendet, um verwandte Formularelemente logisch zu gruppieren. Dadurch erh\u00f6ht sich die \u00dcbersichtlichkeit und Barrierefreiheit eines Formulars. Gemeinsam mit <code>&lt;legend&gt;</code> dient es auch als visuelle und semantische Strukturierung \u2013 Screenreader und Browser erkennen so zusammengeh\u00f6rige Bereiche.</p>"},{"location":"html/form/fieldset/#grundstruktur","title":"\u2705 Grundstruktur","text":"<pre><code>&lt;fieldset&gt;\n  &lt;legend&gt;Pers\u00f6nliche Daten&lt;/legend&gt;\n\n  &lt;label for=\"vorname\"&gt;Vorname:&lt;/label&gt;\n  &lt;input type=\"text\" id=\"vorname\" name=\"vorname\" /&gt;\n\n  &lt;label for=\"nachname\"&gt;Nachname:&lt;/label&gt;\n  &lt;input type=\"text\" id=\"nachname\" name=\"nachname\" /&gt;\n&lt;/fieldset&gt;\n</code></pre> <p>Was passiert? \ud83d\udc49 Die Eingabefelder sind in einem visuell abgegrenzten Bereich mit Titel zusammengefasst.</p>"},{"location":"html/form/fieldset/#attribute-von-fieldset","title":"\ud83d\udd27 Attribute von <code>&lt;fieldset&gt;</code>","text":"Attribut Beschreibung <code>disabled</code> Deaktiviert alle enthaltenen Formularfelder <code>form</code> Verbindet das Fieldset mit einem bestimmten Formular (nur wenn au\u00dferhalb <code>&lt;form&gt;</code>)"},{"location":"html/form/fieldset/#legend-element","title":"\ud83d\udd27 <code>&lt;legend&gt;</code>-Element","text":"Verwendung Beschreibung <code>&lt;legend&gt;</code> \u00dcberschrift f\u00fcr das zugeh\u00f6rige Fieldset. Muss als erstes Element im Fieldset erscheinen."},{"location":"html/form/fieldset/#beispiele","title":"\ud83e\uddea Beispiele","text":""},{"location":"html/form/fieldset/#1-formular-mit-zwei-gruppen","title":"1. \u2705 Formular mit zwei Gruppen","text":"<pre><code>&lt;form&gt;\n  &lt;fieldset&gt;\n    &lt;legend&gt;Login-Daten&lt;/legend&gt;\n    &lt;label for=\"email\"&gt;E-Mail:&lt;/label&gt;\n    &lt;input type=\"email\" id=\"email\" name=\"email\" required /&gt;\n\n    &lt;label for=\"passwort\"&gt;Passwort:&lt;/label&gt;\n    &lt;input type=\"password\" id=\"passwort\" name=\"passwort\" required /&gt;\n  &lt;/fieldset&gt;\n\n  &lt;fieldset&gt;\n    &lt;legend&gt;Newsletter&lt;/legend&gt;\n    &lt;label&gt;\n      &lt;input type=\"checkbox\" name=\"newsletter\" /&gt; Newsletter abonnieren\n    &lt;/label&gt;\n  &lt;/fieldset&gt;\n\n  &lt;button type=\"submit\"&gt;Registrieren&lt;/button&gt;\n&lt;/form&gt;\n</code></pre> <p>\ud83d\udc49 Zwei logisch getrennte Gruppen, mit klarer \u00dcberschrift pro Abschnitt.</p>"},{"location":"html/form/fieldset/#2-deaktiviertes-fieldset","title":"2. \ud83d\udeab Deaktiviertes Fieldset","text":"<pre><code>&lt;fieldset disabled&gt;\n  &lt;legend&gt;Aktionscode&lt;/legend&gt;\n  &lt;label for=\"code\"&gt;Code:&lt;/label&gt;\n  &lt;input type=\"text\" id=\"code\" name=\"code\" /&gt;\n&lt;/fieldset&gt;\n</code></pre> <p>\ud83d\udc49 Alle enthaltenen Felder sind nicht editierbar \u2013 praktisch z.\u202fB. bei abgelaufenen Aktionen oder schreibgesch\u00fctzten Abschnitten.</p>"},{"location":"html/form/fieldset/#3-fieldset-auerhalb-des-formulars-mit-form","title":"3. \ud83c\udfaf Fieldset au\u00dferhalb des Formulars (mit <code>form</code>)","text":"<pre><code>&lt;form id=\"kontaktformular\" action=\"/kontakt\" method=\"post\"&gt;\n  &lt;input type=\"text\" name=\"betreff\" placeholder=\"Betreff\" /&gt;\n&lt;/form&gt;\n\n&lt;fieldset form=\"kontaktformular\"&gt;\n  &lt;legend&gt;Nachricht&lt;/legend&gt;\n  &lt;textarea name=\"nachricht\"&gt;&lt;/textarea&gt;\n&lt;/fieldset&gt;\n</code></pre> <p>\ud83d\udc49 Das Fieldset geh\u00f6rt visuell/logisch zum Formular, auch wenn es au\u00dferhalb im DOM steht.</p>"},{"location":"html/form/fieldset/#styling-tipp-mit-css","title":"\ud83c\udfa8 Styling-Tipp mit CSS","text":"<pre><code>fieldset {\n  border: 2px solid #ccc;\n  padding: 1em;\n  margin-bottom: 1em;\n  border-radius: 8px;\n}\n\nlegend {\n  font-weight: bold;\n  padding: 0 10px;\n}\n</code></pre> <p>\ud83d\udc49 So sieht das Fieldset modern und abgerundet aus. Standard-Styling ist oft sehr rudiment\u00e4r.</p>"},{"location":"html/form/fieldset/#barrierefreiheit-ux","title":"\u267f Barrierefreiheit &amp; UX","text":"<ul> <li>Screenreader erkennen Fieldsets als Gruppierung, was insbesondere bei komplexen Formularen wichtig ist (z.\u202fB. medizinische Angaben, Adressen etc.).</li> <li>Verwende <code>&lt;legend&gt;</code> als klare Beschreibung, nicht als visuellen Titel missbrauchen.</li> <li>Pro Fieldset eine zentrale Aufgabe: z.\u202fB. Kontaktdaten, Zahlungsoptionen, Lieferadresse etc.</li> </ul>"},{"location":"html/form/fieldset/#best-practices","title":"\ud83e\uddfe Best Practices","text":"<ul> <li>Verwende Fieldsets, um lange Formulare logisch zu unterteilen.</li> <li>Nutze ein <code>&lt;legend&gt;</code> als erste Kindelement, um Barrierefreiheit zu gew\u00e4hrleisten.</li> <li>Verwende Fieldsets nicht f\u00fcr Layout-Zwecke \u2013 daf\u00fcr besser <code>&lt;div&gt;</code> &amp; CSS.</li> <li>Aktiviere oder deaktiviere Formulareingaben global mit <code>&lt;fieldset disabled&gt;</code>, statt jeden Input einzeln.</li> </ul>"},{"location":"html/form/fieldset/#fazit","title":"\ud83d\udcda Fazit","text":"<p>Das <code>&lt;fieldset&gt;</code>-Element ist ein semantisch wertvolles Tool, um Formulare strukturiert, zug\u00e4nglich und optisch ansprechend zu gestalten. Zusammen mit <code>&lt;legend&gt;</code> schafft es klare Gliederung \u2013 sowohl f\u00fcr Menschen als auch f\u00fcr Maschinen.</p>"},{"location":"html/form/form/","title":"<code>&lt;form&gt;</code> \u2013 Formularcontainer","text":""},{"location":"html/form/form/#funktion","title":"\ud83e\udde9 Funktion","text":"<p>Das <code>&lt;form&gt;</code>-Element definiert einen Formularbereich in einer Webseite, in dem Benutzereingaben erfasst und an einen Server gesendet werden. Es enth\u00e4lt eine oder mehrere Eingabekomponenten wie <code>&lt;input&gt;</code>, <code>&lt;textarea&gt;</code>, <code>&lt;select&gt;</code>, <code>&lt;button&gt;</code> etc.</p> <p>Ein Formular kann sowohl sichtbare Eingaben als auch versteckte Werte enthalten und bietet verschiedene Methoden zur \u00dcbertragung \u2013 z.\u202fB. \u00fcber <code>GET</code> oder <code>POST</code>.</p>"},{"location":"html/form/form/#basisverwendung","title":"\u2705 Basisverwendung","text":"<pre><code>&lt;form action=\"/absenden\" method=\"post\"&gt;\n  &lt;label for=\"email\"&gt;E-Mail:&lt;/label&gt;\n  &lt;input name=\"email\" type=\"email\" required /&gt;\n  &lt;button type=\"submit\"&gt;Senden&lt;/button&gt;\n&lt;/form&gt;\n</code></pre> <p>Was passiert? \ud83d\udc49 Die E-Mail-Adresse wird per HTTP-POST an die URL <code>/absenden</code> geschickt, wenn der Nutzer auf \u201eSenden\u201c klickt.</p>"},{"location":"html/form/form/#wichtige-attribute-von-form","title":"\ud83d\udd27 Wichtige Attribute von <code>&lt;form&gt;</code>","text":"Attribut Beschreibung <code>action</code> Ziel-URL, an die das Formular beim Absenden gesendet wird <code>method</code> \u00dcbertragungsmethode: <code>get</code> (URL-Parameter) oder <code>post</code> (unsichtbar im Body) <code>autocomplete</code> Aktiviert oder deaktiviert die automatische Vervollst\u00e4ndigung (<code>on</code>/<code>off</code>) <code>enctype</code> Kodierung der gesendeten Daten \u2013 wichtig bei Datei-Uploads (z.\u202fB. <code>multipart/form-data</code>) <code>target</code> Ziel, in dem das Ergebnis ge\u00f6ffnet wird (<code>_self</code>, <code>_blank</code>, <code>_parent</code>, <code>_top</code>) <code>novalidate</code> Unterdr\u00fcckt die HTML5-Eingabevalidierung <code>name</code> Name des Formulars (zur Identifikation in Skripten) <code>accept-charset</code> Zeichencodierung beim Absenden (z.\u202fB. <code>UTF-8</code>)"},{"location":"html/form/form/#methodget-vs-methodpost","title":"\ud83d\udce6 <code>method=\"get\"</code> vs. <code>method=\"post\"</code>","text":"Methode Beschreibung Typisches Einsatzgebiet <code>get</code> Daten werden als URL-Parameter angeh\u00e4ngt (sichtbar!) Suchfelder, Filter <code>post</code> Daten werden im Request-Body \u00fcbermittelt Login-Formulare, sensible Daten, Datei-Uploads <p>Beispiel <code>get</code>:</p> <pre><code>&lt;form action=\"/suche\" method=\"get\"&gt;\n  &lt;input type=\"text\" name=\"q\" placeholder=\"Suchbegriff\" /&gt;\n  &lt;button type=\"submit\"&gt;Suchen&lt;/button&gt;\n&lt;/form&gt;\n</code></pre> <p>\ud83d\udc49 ergibt z.\u202fB.: <code>/suche?q=html</code></p>"},{"location":"html/form/form/#beispiel-mit-datei-upload-enctype","title":"\ud83e\uddea Beispiel mit Datei-Upload (<code>enctype</code>)","text":"<pre><code>&lt;form action=\"/upload\" method=\"post\" enctype=\"multipart/form-data\"&gt;\n  &lt;label for=\"datei\"&gt;Datei hochladen:&lt;/label&gt;\n  &lt;input type=\"file\" id=\"datei\" name=\"datei\" /&gt;\n  &lt;button type=\"submit\"&gt;Upload&lt;/button&gt;\n&lt;/form&gt;\n</code></pre> <p>Wichtig: \ud83d\udccc Ohne <code>enctype=\"multipart/form-data\"</code> funktioniert der Datei-Upload nicht korrekt.</p>"},{"location":"html/form/form/#beispiel-mit-target_blank","title":"\ud83c\udfaf Beispiel mit <code>target=\"_blank\"</code>","text":"<pre><code>&lt;form action=\"https://example.com/suchen\" method=\"get\" target=\"_blank\"&gt;\n  &lt;input type=\"text\" name=\"q\" placeholder=\"Suche auf externer Seite\" /&gt;\n  &lt;button type=\"submit\"&gt;Suchen&lt;/button&gt;\n&lt;/form&gt;\n</code></pre> <p>Was passiert? \ud83d\udc49 Die Ergebnisseite wird in einem neuen Tab ge\u00f6ffnet.</p>"},{"location":"html/form/form/#html5-validierung-abschalten","title":"\ud83e\udde0 HTML5: Validierung abschalten","text":"<pre><code>&lt;form action=\"/feedback\" method=\"post\" novalidate&gt;\n  &lt;input type=\"email\" name=\"email\" placeholder=\"Email (optional)\" /&gt;\n  &lt;button type=\"submit\"&gt;Ohne Pr\u00fcfung absenden&lt;/button&gt;\n&lt;/form&gt;\n</code></pre>"},{"location":"html/form/form/#best-practices","title":"\ud83e\uddfe Best Practices","text":"<ul> <li>Immer passende Labels mit Inputs verkn\u00fcpfen (<code>&lt;label for=\"...\"&gt;</code>)</li> <li>Eingabefelder sinnvoll gruppieren mit <code>&lt;fieldset&gt;</code> und <code>&lt;legend&gt;</code></li> <li><code>required</code>, <code>minlength</code>, <code>type</code> usw. zur Vorab-Validierung verwenden</li> <li>Verwende JavaScript nur als Erg\u00e4nzung, nicht als Ersatz f\u00fcr Formularlogik</li> <li>Verwende <code>name</code>-Attribute in allen Eingabefeldern \u2013 sie bestimmen die Schl\u00fcssel der gesendeten Daten</li> </ul>"},{"location":"html/form/form/#fazit","title":"\ud83d\udcda Fazit","text":"<p>Das <code>&lt;form&gt;</code>-Tag ist das Herzst\u00fcck jeder interaktiven Webseite. Es bildet den Rahmen, in dem Benutzereingaben gesammelt, verarbeitet und \u00fcbermittelt werden. Mit den richtigen Attributen und einer sauberen Struktur kann ein Formular intuitiv, sicher und zug\u00e4nglich gestaltet werden.</p>"},{"location":"html/form/input/","title":"<code>&lt;input&gt;</code> \u2013 Formulareingabe","text":""},{"location":"html/form/input/#funktion","title":"\ud83e\udde9 Funktion","text":"<p>Das <code>&lt;input&gt;</code>-Element ist eines der wichtigsten HTML-Formularelemente. Es dient zur Erfassung von Benutzereingaben aller Art \u2013 von einfachem Text bis hin zu Datumsauswahl, Datei-Upload oder Kontrollk\u00e4stchen. Es ist ein leeres Tag (self-closing), d.\u202fh. es hat kein schlie\u00dfendes Tag wie <code>&lt;input&gt;&lt;/input&gt;</code>.</p>"},{"location":"html/form/input/#grundlegende-verwendung","title":"\u2705 Grundlegende Verwendung","text":"<pre><code>&lt;input type=\"text\" name=\"vorname\" placeholder=\"Vorname\" required /&gt;\n</code></pre> <p>Dieser Code erzeugt ein einzeiliges Texteingabefeld mit Platzhalter und Pflichtangabe.</p>"},{"location":"html/form/input/#wichtige-attribute","title":"\ud83d\udd27 Wichtige Attribute","text":"Attribut Beschreibung <code>type</code> Definiert den Eingabetyp (z.\u202fB. Text, Passwort, Datei, usw.) <code>name</code> Der Schl\u00fcsselname zur Identifikation beim Absenden des Formulars <code>value</code> Voreingestellter oder zur\u00fcckgegebener Wert <code>placeholder</code> Platzhaltertext, der bei leerem Feld angezeigt wird <code>required</code> Markiert das Feld als Pflichtfeld <code>readonly</code> Feld kann angezeigt, aber nicht ver\u00e4ndert werden <code>disabled</code> Deaktiviert das Feld vollst\u00e4ndig <code>autocomplete</code> Schl\u00e4gt gespeicherte Werte vor (z.\u202fB. Name, E-Mail) <code>maxlength</code>, <code>minlength</code> Begrenzung der Zeichenanzahl <code>pattern</code> Regul\u00e4rer Ausdruck f\u00fcr Formatvalidierung <code>step</code> Schrittweite bei numerischen Eingaben (z.\u202fB. \u201e0.5\u201c) <code>min</code>, <code>max</code> Wertebereich bei Zahlen, Datum, Zeit"},{"location":"html/form/input/#ubersicht-type-varianten","title":"\ud83e\uddea \u00dcbersicht: <code>type</code>-Varianten","text":"<p>Hier sind die gebr\u00e4uchlichsten <code>type</code>-Werte des <code>&lt;input&gt;</code>-Elements:</p>"},{"location":"html/form/input/#textbasierte-eingaben","title":"\ud83d\udd24 Textbasierte Eingaben","text":"Typ Beschreibung <code>text</code> Einzeilige Texteingabe <code>password</code> Eingabe wird durch Punkte versteckt <code>email</code> Validiert E-Mail-Adresse <code>url</code> Validiert Webadressen <code>search</code> Speziell f\u00fcr Suchfelder <code>tel</code> Telefonnummern, oft mit Nummernblock"},{"location":"html/form/input/#auswahlfelder","title":"\ud83d\udd18 Auswahlfelder","text":"Typ Beschreibung <code>checkbox</code> Kontrollk\u00e4stchen (Mehrfachauswahl m\u00f6glich) <code>radio</code> Optionsfeld (nur eine Auswahl pro Gruppe)"},{"location":"html/form/input/#zahlen-und-bereiche","title":"\ud83d\udd22 Zahlen und Bereiche","text":"Typ Beschreibung <code>number</code> Nur Zahlen erlaubt <code>range</code> Schieberegler f\u00fcr Wertebereiche"},{"location":"html/form/input/#datumzeit","title":"\ud83d\udcc5 Datum/Zeit","text":"Typ Beschreibung <code>date</code> Datumsauswahl <code>time</code> Zeiteingabe <code>datetime-local</code> Datum &amp; Zeit ohne Zeitzone <code>month</code> Auswahl von Monat &amp; Jahr <code>week</code> Auswahl nach Kalenderwoche"},{"location":"html/form/input/#sonstiges","title":"\ud83d\uddc2\ufe0f Sonstiges","text":"Typ Beschreibung <code>file</code> Datei-Upload-Feld <code>hidden</code> Nicht sichtbare Daten\u00fcbermittlung <code>color</code> Farbauswahl \u00fcber Picker <code>submit</code> Absende-Button <code>reset</code> Formular zur\u00fccksetzen <code>button</code> Allgemeiner Button ohne Funktion (kann JS-getriggert sein)"},{"location":"html/form/input/#beispiele","title":"\ud83e\udde0 Beispiele","text":""},{"location":"html/form/input/#passwortfeld","title":"\ud83d\udd11 Passwortfeld","text":"<pre><code>&lt;input type=\"password\" name=\"passwort\" required /&gt;\n</code></pre> <p>Beispiel: </p>"},{"location":"html/form/input/#checkbox-mit-standardwert","title":"\u2705 Checkbox mit Standardwert","text":"<p><pre><code>&lt;input type=\"checkbox\" name=\"agb\" value=\"akzeptiert\" checked /&gt; AGB akzeptieren\n</code></pre> Beispiel:  AGB akzeptieren</p>"},{"location":"html/form/input/#radio-buttons","title":"\ud83c\udfaf Radio-Buttons","text":"<p><pre><code>&lt;input type=\"radio\" name=\"geschlecht\" value=\"m\" /&gt; M\u00e4nnlich\n&lt;input type=\"radio\" name=\"geschlecht\" value=\"w\" /&gt; Weiblich\n</code></pre> Beispiel:  M\u00e4nnlich  Weiblich</p>"},{"location":"html/form/input/#datei-upload","title":"\ud83d\udcc2 Datei-Upload","text":"<p><pre><code>&lt;input type=\"file\" name=\"profilbild\" accept=\"image/*\" /&gt;\n</code></pre> Beispiel: </p>"},{"location":"html/form/input/#tipps-fur-gute-formulare","title":"\ud83d\udca1 Tipps f\u00fcr gute Formulare","text":"<ul> <li>Kombiniere <code>&lt;input&gt;</code> mit <code>&lt;label&gt;</code> zur besseren Bedienbarkeit und Barrierefreiheit.</li> <li>Nutze das <code>for</code>-Attribut von <code>&lt;label&gt;</code> mit der <code>id</code> des zugeh\u00f6rigen <code>&lt;input&gt;</code>:</li> </ul> <pre><code>&lt;label for=\"email\"&gt;E-Mail:&lt;/label&gt;\n&lt;input type=\"email\" id=\"email\" name=\"email\" /&gt;\n</code></pre> <p>Beispiel: E-Mail: </p> <ul> <li>Gruppiere verwandte Eingabefelder mit <code>&lt;fieldset&gt;</code> und <code>&lt;legend&gt;</code>.</li> <li>Validiere Eingaben zus\u00e4tzlich mit JavaScript \u2013 HTML-Validation reicht oft nicht aus.</li> <li>Nutze <code>autocomplete=\"off\"</code> nur, wenn du es wirklich brauchst (z.\u202fB. bei sensiblen Daten).</li> </ul>"},{"location":"html/form/input/#fazit","title":"\ud83e\uddfe Fazit","text":"<p>Das <code>&lt;input&gt;</code>-Element ist extrem vielseitig und kann f\u00fcr fast jede Art von Benutzereingabe angepasst werden. Durch Kombination mit passenden Attributen und Typen entsteht ein intuitives, barrierefreies und benutzerfreundliches Formular.</p>"},{"location":"html/form/label/","title":"<code>&lt;label&gt;</code> \u2013 Beschriftung f\u00fcr Formularfeld","text":""},{"location":"html/form/label/#funktion","title":"\ud83e\udde9 Funktion","text":"<p>Ein <code>&lt;label&gt;</code> ist ein semantisches HTML-Element, das einem Eingabefeld eine klar erkennbare Bezeichnung zuweist. Es ist nicht nur optisch hilfreich, sondern auch essentiell f\u00fcr Barrierefreiheit: Screenreader k\u00f6nnen dadurch Eingabefelder korrekt interpretieren.</p> <p>Ein korrektes <code>&lt;label&gt;</code> erh\u00f6ht die Benutzerfreundlichkeit und hilft, Eingabefehler zu vermeiden.</p>"},{"location":"html/form/label/#standardverwendung","title":"\u2705 Standardverwendung","text":"<pre><code>&lt;label for=\"email\"&gt;E-Mail&lt;/label&gt;\n&lt;input id=\"email\" type=\"email\" /&gt;\n</code></pre> <p>Was passiert? \ud83d\udc49 Wenn der Benutzer auf \u201eE-Mail\u201c klickt, erh\u00e4lt das zugeh\u00f6rige Eingabefeld den Fokus \u2013 sehr n\u00fctzlich f\u00fcr die Bedienung per Maus oder Screenreader.</p>"},{"location":"html/form/label/#wichtige-attribute","title":"\ud83d\udd27 Wichtige Attribute","text":"Attribut Beschreibung <code>for</code> Verkn\u00fcpft das Label mit dem Element, dessen <code>id</code> \u00fcbereinstimmt <code>class</code>, <code>style</code> F\u00fcr CSS-Klassen oder Inline-Design <code>form</code> Optional: Referenz auf ein Formular au\u00dferhalb des Labels (selten genutzt)"},{"location":"html/form/label/#varianten","title":"\ud83e\uddea Varianten","text":""},{"location":"html/form/label/#1-umschlieendes-label-ohne-for","title":"1. \u2705 Umschlie\u00dfendes Label (ohne <code>for</code>)","text":"<pre><code>&lt;label&gt;\n  Passwort:\n  &lt;input type=\"password\" name=\"passwort\" /&gt;\n&lt;/label&gt;\n</code></pre> <p>\ud83d\udc49 Der Input ist im Label eingeschlossen. Praktisch f\u00fcr einfache Formulare, aber nicht ideal f\u00fcr Barrierefreiheit, da der <code>for</code>-Bezug fehlt.</p>"},{"location":"html/form/label/#2-mit-for-und-id","title":"2. \u267f Mit <code>for</code> und <code>id</code>","text":"<pre><code>&lt;label for=\"plz\"&gt;Postleitzahl:&lt;/label&gt;\n&lt;input id=\"plz\" name=\"plz\" type=\"text\" /&gt;\n</code></pre> <p>\ud83d\udc49 Empfohlene Methode f\u00fcr Screenreader, Formulare und Browseroptimierung.</p>"},{"location":"html/form/label/#3-kombination-mit-fieldset","title":"3. \ud83d\udca1 Kombination mit <code>fieldset</code>","text":"<pre><code>&lt;fieldset&gt;\n  &lt;legend&gt;Geschlecht&lt;/legend&gt;\n  &lt;label&gt;&lt;input type=\"radio\" name=\"gender\" value=\"m\" /&gt; M\u00e4nnlich&lt;/label&gt;\n  &lt;label&gt;&lt;input type=\"radio\" name=\"gender\" value=\"w\" /&gt; Weiblich&lt;/label&gt;\n&lt;/fieldset&gt;\n</code></pre> <p>\ud83d\udc49 Keine <code>for</code>-Attribute notwendig, da Inputs innerhalb des Labels eingebettet sind.</p>"},{"location":"html/form/label/#styling-tipps","title":"\ud83c\udfa8 Styling-Tipps","text":"<pre><code>label {\n  display: block;\n  font-weight: bold;\n  margin-bottom: 0.5em;\n}\n</code></pre> <p>\ud83d\udc49 Gute Labels sind deutlich erkennbar, stehen oberhalb der Inputs und sind gut lesbar.</p>"},{"location":"html/form/label/#barrierefreiheit","title":"\u267f Barrierefreiheit","text":"<ul> <li>Labels sind essentiell f\u00fcr barrierefreie Formulare.</li> <li>Screenreader lesen das Label zusammen mit dem Eingabefeld.</li> <li>F\u00fcr Checkboxen/Radio-Buttons unbedingt mit Label arbeiten \u2013 sonst sind sie schwer bedienbar.</li> <li>Bei <code>aria-labelledby</code> in Custom Controls k\u00f6nnen Labels auch als referenzierter Text dienen.</li> </ul>"},{"location":"html/form/label/#best-practices","title":"\ud83d\udd25 Best Practices","text":"<ul> <li>Immer eindeutige <code>id</code>-Werte verwenden \u2013 kein Duplikat!</li> <li>Labels so platzieren, dass sie vor dem zugeh\u00f6rigen Feld stehen \u2013 f\u00fcr bessere Lesbarkeit.</li> <li>Kein <code>&lt;br&gt;</code> im Label \u2013 verwende besser <code>display: block</code> in CSS.</li> <li>Keine Labels durch reine Platzhalter ersetzen (<code>placeholder \u2260 label</code>) \u2013 Platzhalter verschwinden beim Tippen und sind nicht barrierefrei.</li> </ul>"},{"location":"html/form/label/#fazit","title":"\ud83d\udcda Fazit","text":"<p>Ein gut eingesetztes <code>&lt;label&gt;</code> ist mehr als nur Text \u2013 es ist eine essenzielle Hilfe f\u00fcr Benutzerfreundlichkeit, Barrierefreiheit und klare Formularstruktur. Wer <code>&lt;label&gt;</code> korrekt verwendet, baut zug\u00e4ngliche und professionelle Webformulare.</p>"},{"location":"html/form/select/","title":"<code>&lt;select&gt;</code> \u2013 Dropdown-Auswahlliste","text":""},{"location":"html/form/select/#funktion","title":"\ud83e\udde9 Funktion","text":"<p>Das <code>&lt;select&gt;</code>-Element wird verwendet, um dem Benutzer eine Auswahlliste mit vordefinierten Optionen anzubieten. Es wird h\u00e4ufig f\u00fcr Formulare verwendet, bei denen der Nutzer eine oder mehrere Optionen aus einer Liste w\u00e4hlen soll.</p> <p>Die ausw\u00e4hlbaren Werte werden in <code>&lt;option&gt;</code>-Elementen definiert, die innerhalb des <code>&lt;select&gt;</code>-Elements liegen.</p>"},{"location":"html/form/select/#grundstruktur","title":"\u2705 Grundstruktur","text":"<pre><code>&lt;select name=\"land\"&gt;\n  &lt;option value=\"de\"&gt;Deutschland&lt;/option&gt;\n  &lt;option value=\"at\"&gt;\u00d6sterreich&lt;/option&gt;\n  &lt;option value=\"ch\"&gt;Schweiz&lt;/option&gt;\n&lt;/select&gt;\n</code></pre> <p>Was passiert? \ud83d\udc49 Der Benutzer sieht eine Dropdown-Liste und kann eine der drei L\u00e4nderoptionen ausw\u00e4hlen. Der Wert (<code>value</code>) wird beim Absenden des Formulars \u00fcbermittelt.</p>"},{"location":"html/form/select/#wichtige-attribute","title":"\ud83d\udd27 Wichtige Attribute","text":"Attribut Beschreibung <code>name</code> Bezeichner f\u00fcr die Serververarbeitung beim Absenden <code>id</code> Eindeutige ID f\u00fcr Verbindung mit <code>&lt;label&gt;</code> <code>multiple</code> Erlaubt Mehrfachauswahl (Strg / Cmd oder Shift) <code>size</code> Legt Anzahl der sichtbaren Optionen fest (wirksam nur ohne Dropdown) <code>required</code> Markiert das Feld als Pflichtfeld <code>disabled</code> Deaktiviert die gesamte Auswahlliste <code>autofocus</code> Der Fokus liegt beim Laden der Seite direkt auf dem Element"},{"location":"html/form/select/#option-attribute","title":"\ud83d\udd18 <code>&lt;option&gt;</code>-Attribute","text":"Attribut Beschreibung <code>value</code> Wert, der beim Absenden \u00fcbermittelt wird <code>selected</code> Legt fest, welche Option vorausgew\u00e4hlt ist <code>disabled</code> Diese Option ist nicht ausw\u00e4hlbar (ohne value) Wenn <code>value</code> fehlt, wird der Inhalt als Wert verwendet"},{"location":"html/form/select/#beispiele","title":"\ud83e\uddea Beispiele","text":""},{"location":"html/form/select/#1-mit-vorausgewahltem-wert","title":"1. \u2705 Mit vorausgew\u00e4hltem Wert","text":"<pre><code>&lt;label for=\"farbe\"&gt;Lieblingsfarbe:&lt;/label&gt;\n&lt;select id=\"farbe\" name=\"farbe\"&gt;\n  &lt;option value=\"rot\"&gt;Rot&lt;/option&gt;\n  &lt;option value=\"blau\" selected&gt;Blau&lt;/option&gt;\n  &lt;option value=\"gruen\"&gt;Gr\u00fcn&lt;/option&gt;\n&lt;/select&gt;\n</code></pre> <p>\ud83d\udc49 \u201eBlau\u201c ist standardm\u00e4\u00dfig vorausgew\u00e4hlt.</p>"},{"location":"html/form/select/#2-mit-platzhalter-option","title":"2. \ud83d\udd04 Mit Platzhalter-Option","text":"<pre><code>&lt;select name=\"stadt\" required&gt;\n  &lt;option value=\"\" disabled selected&gt;Bitte Stadt w\u00e4hlen&lt;/option&gt;\n  &lt;option value=\"berlin\"&gt;Berlin&lt;/option&gt;\n  &lt;option value=\"muenchen\"&gt;M\u00fcnchen&lt;/option&gt;\n  &lt;option value=\"koeln\"&gt;K\u00f6ln&lt;/option&gt;\n&lt;/select&gt;\n</code></pre> <p>\ud83d\udc49 Der erste Eintrag dient als Platzhalter \u2013 es muss aktiv eine g\u00fcltige Stadt gew\u00e4hlt werden.</p>"},{"location":"html/form/select/#3-mehrfachauswahl-mit-multiple","title":"3. \ud83c\udfaf Mehrfachauswahl mit <code>multiple</code>","text":"<pre><code>&lt;select name=\"interessen[]\" multiple size=\"4\"&gt;\n  &lt;option value=\"sport\"&gt;Sport&lt;/option&gt;\n  &lt;option value=\"musik\"&gt;Musik&lt;/option&gt;\n  &lt;option value=\"reisen\"&gt;Reisen&lt;/option&gt;\n  &lt;option value=\"lesen\"&gt;Lesen&lt;/option&gt;\n&lt;/select&gt;\n</code></pre> <p>\ud83d\udc49 Nutzer kann mit Strg (Windows) oder Cmd (Mac) mehrere Optionen ausw\u00e4hlen. Das <code>[]</code> im <code>name</code>-Attribut \u00fcbertr\u00e4gt mehrere Werte als Array.</p>"},{"location":"html/form/select/#4-optionen-deaktivieren","title":"4. \ud83d\udeab Optionen deaktivieren","text":"<pre><code>&lt;select name=\"bundesland\"&gt;\n  &lt;option value=\"\" disabled selected&gt;Bitte w\u00e4hlen&lt;/option&gt;\n  &lt;option value=\"bw\"&gt;Baden-W\u00fcrttemberg&lt;/option&gt;\n  &lt;option value=\"by\" disabled&gt;Bayern (nicht verf\u00fcgbar)&lt;/option&gt;\n  &lt;option value=\"he\"&gt;Hessen&lt;/option&gt;\n&lt;/select&gt;\n</code></pre> <p>\ud83d\udc49 \u201eBayern\u201c erscheint, ist aber nicht ausw\u00e4hlbar.</p>"},{"location":"html/form/select/#5-optionen-gruppieren-mit-optgroup","title":"5. \ud83d\udcc1 Optionen gruppieren mit <code>&lt;optgroup&gt;</code>","text":"<pre><code>&lt;select name=\"forschung\"&gt;\n  &lt;optgroup label=\"Naturwissenschaften\"&gt;\n    &lt;option value=\"physik\"&gt;Physik&lt;/option&gt;\n    &lt;option value=\"biologie\"&gt;Biologie&lt;/option&gt;\n  &lt;/optgroup&gt;\n  &lt;optgroup label=\"Geisteswissenschaften\"&gt;\n    &lt;option value=\"geschichte\"&gt;Geschichte&lt;/option&gt;\n    &lt;option value=\"philosophie\"&gt;Philosophie&lt;/option&gt;\n  &lt;/optgroup&gt;\n&lt;/select&gt;\n</code></pre> <p>\ud83d\udc49 Gruppiert verwandte Optionen logisch \u2013 gut f\u00fcr lange Listen und Barrierefreiheit.</p>"},{"location":"html/form/select/#barrierefreiheit","title":"\u267f Barrierefreiheit","text":"<ul> <li>Verwende immer ein zugeh\u00f6riges <code>&lt;label for=\"...\"&gt;</code>, um Screenreadern die Zuordnung zu erleichtern.</li> <li>Gruppiere viele Optionen mit <code>&lt;optgroup&gt;</code>, um \u00dcbersichtlichkeit zu schaffen.</li> <li>Vermeide Platzhalter-Optionen ohne <code>disabled</code>, da sie sonst f\u00e4lschlich als g\u00fcltige Auswahl gesendet werden k\u00f6nnten.</li> </ul>"},{"location":"html/form/select/#best-practices","title":"\ud83e\uddfe Best Practices","text":"<ul> <li>F\u00fcr komplexere Auswahl-Interfaces nutze zus\u00e4tzliche JavaScript-Plugins wie Select2 oder native <code>&lt;datalist&gt;</code>.</li> <li>Bei Mehrfachauswahl die Optionen im Backend als Array behandeln (<code>interessen[]</code>).</li> <li>Teste <code>multiple</code>-Selects auch mit Tastatursteuerung.</li> <li>Nutze <code>required</code> und <code>disabled</code>, um Eingaben besser zu kontrollieren.</li> </ul>"},{"location":"html/form/select/#fazit","title":"\ud83d\udcda Fazit","text":"<p>Das <code>&lt;select&gt;</code>-Element ist ideal, um Benutzern strukturierte und eingeschr\u00e4nkte Auswahlm\u00f6glichkeiten zu bieten. In Kombination mit <code>&lt;option&gt;</code> und <code>&lt;optgroup&gt;</code> kannst du benutzerfreundliche, barrierefreie und semantisch saubere Auswahlfelder erstellen.</p>"},{"location":"html/form/textarea/","title":"<code>&lt;textarea&gt;</code> \u2013 Mehrzeiliges Texteingabefeld","text":""},{"location":"html/form/textarea/#funktion","title":"\ud83e\udde9 Funktion","text":"<p>Das <code>&lt;textarea&gt;</code>-Element wird verwendet, um mehrzeilige Texteingaben zu erm\u00f6glichen \u2013 z.\u202fB. f\u00fcr Kommentare, Nachrichten, Feedback oder Artikel. Im Gegensatz zu <code>&lt;input type=\"text\"&gt;</code> erlaubt es den Benutzer, ganze Abs\u00e4tze zu schreiben und selbst Zeilenumbr\u00fcche einzuf\u00fcgen.</p>"},{"location":"html/form/textarea/#grundstruktur","title":"\u2705 Grundstruktur","text":"<pre><code>&lt;textarea name=\"nachricht\"&gt;&lt;/textarea&gt;\n</code></pre> <p>Was passiert? \ud83d\udc49 Erstellt ein einfaches mehrzeiliges Texteingabefeld ohne Begrenzung der Gr\u00f6\u00dfe oder Zeichenanzahl.</p>"},{"location":"html/form/textarea/#wichtige-attribute","title":"\ud83d\udd27 Wichtige Attribute","text":"Attribut Beschreibung <code>name</code> Schl\u00fcsselname f\u00fcr das Formular / Backend <code>id</code> Eindeutige ID f\u00fcr Verbindung mit <code>&lt;label&gt;</code> <code>rows</code> H\u00f6he (Anzahl der Textzeilen) <code>cols</code> Breite (Anzahl der Zeichen pro Zeile \u2013 veraltet, CSS bevorzugt) <code>placeholder</code> Platzhaltertext, der bei leerem Feld angezeigt wird <code>maxlength</code> Maximale Zeichenanzahl <code>minlength</code> Minimale Zeichenanzahl <code>required</code> Pflichtfeld <code>readonly</code> Eingabe ist nicht \u00e4nderbar <code>disabled</code> Feld ist deaktiviert <code>autocomplete</code> Vorschl\u00e4ge vom Browser erlauben (<code>on</code> / <code>off</code>) <code>wrap</code> Umbruchverhalten bei Zeilenende (<code>soft</code>, <code>hard</code>, <code>off</code>)"},{"location":"html/form/textarea/#beispiele","title":"\ud83e\uddea Beispiele","text":""},{"location":"html/form/textarea/#1-standard-textarea-mit-platzhalter","title":"1. \u270d Standard-Textarea mit Platzhalter","text":"<pre><code>&lt;label for=\"kommentar\"&gt;Kommentar:&lt;/label&gt;&lt;br /&gt;\n&lt;textarea id=\"kommentar\" name=\"kommentar\" rows=\"5\" cols=\"40\" placeholder=\"Deine Meinung ...\"&gt;&lt;/textarea&gt;\n</code></pre> <p>\ud83d\udc49 Bietet dem Benutzer ein Eingabefeld f\u00fcr bis zu 5 Zeilen.</p>"},{"location":"html/form/textarea/#2-begrenzte-zeichenzahl","title":"2. \ud83d\udccf Begrenzte Zeichenzahl","text":"<pre><code>&lt;form&gt;\n  &lt;label for=\"feedback\"&gt;Feedback (max. 250 Zeichen):&lt;/label&gt;&lt;br /&gt;\n  &lt;textarea id=\"feedback\" name=\"feedback\" rows=\"6\" maxlength=\"250\" required&gt;&lt;/textarea&gt;\n  &lt;br /&gt;\n  &lt;button type=\"submit\"&gt;Absenden&lt;/button&gt;\n&lt;/form&gt;\n</code></pre> <p>\ud83d\udc49 Benutzer kann maximal 250 Zeichen eingeben \u2013 ideal f\u00fcr limitierte Eingaben wie Bewertungen.</p>"},{"location":"html/form/textarea/#3-nur-lesbar","title":"3. \ud83d\udd12 Nur-lesbar","text":"<pre><code>&lt;textarea readonly&gt;Dies ist ein schreibgesch\u00fctztes Textfeld.&lt;/textarea&gt;\n</code></pre> <p>\ud83d\udc49 Eingabe nicht m\u00f6glich, aber Inhalt kann kopiert werden.</p>"},{"location":"html/form/textarea/#4-deaktiviert","title":"4. \ud83d\udeab Deaktiviert","text":"<pre><code>&lt;textarea disabled&gt;Dieses Feld ist deaktiviert.&lt;/textarea&gt;\n</code></pre> <p>\ud83d\udc49 Feld wird ausgegraut und beim Absenden nicht \u00fcbertragen.</p>"},{"location":"html/form/textarea/#5-zeilenumbruch-kontrollieren-mit-wrap","title":"5. \ud83d\udd01 Zeilenumbruch kontrollieren mit <code>wrap</code>","text":"<pre><code>&lt;textarea name=\"beschreibung\" wrap=\"hard\" rows=\"4\" cols=\"50\"&gt;\nDieser Text wird mit Zeilenumbruch abgespeichert.\n&lt;/textarea&gt;\n</code></pre> Wert Verhalten <code>soft</code> Text wird im Formular umbrochen, aber ohne Zeilenumbr\u00fcche im gesendeten Wert <code>hard</code> Text wird mit echten Zeilenumbr\u00fcchen gespeichert <code>off</code> Kein automatischer Umbruch, horizontales Scrollen m\u00f6glich"},{"location":"html/form/textarea/#tipps-fur-bessere-benutzerfreundlichkeit","title":"\ud83e\udde0 Tipps f\u00fcr bessere Benutzerfreundlichkeit","text":"<ul> <li>Verwende <code>&lt;label&gt;</code>-Elemente f\u00fcr bessere Zug\u00e4nglichkeit.</li> <li>Nutze <code>rows</code> nur als Startgr\u00f6\u00dfe, die tats\u00e4chliche Gr\u00f6\u00dfe kann durch den Benutzer ver\u00e4ndert werden (je nach Browser).</li> <li>Vermeide <code>cols</code>, verwende stattdessen CSS mit <code>width</code>.</li> <li>Begrenze mit <code>maxlength</code>, um unn\u00f6tig lange Texte zu verhindern.</li> <li>Binde JavaScript ein, um Zeichen-Z\u00e4hler anzuzeigen oder Live-Validierung durchzuf\u00fchren.</li> </ul>"},{"location":"html/form/textarea/#zeichen-zahler-einfaches-beispiel-mit-js","title":"\ud83d\udca1 Zeichen-Z\u00e4hler (einfaches Beispiel mit JS)","text":"<pre><code>&lt;label for=\"kommentar\"&gt;Kommentar (max. 200 Zeichen):&lt;/label&gt;\n&lt;textarea id=\"kommentar\" maxlength=\"200\"&gt;&lt;/textarea&gt;\n&lt;p id=\"counter\"&gt;200 Zeichen \u00fcbrig&lt;/p&gt;\n\n&lt;script&gt;\n  const textarea = document.getElementById(\"kommentar\");\n  const counter = document.getElementById(\"counter\");\n\n  textarea.addEventListener(\"input\", () =&gt; {\n    const remaining = 200 - textarea.value.length;\n    counter.textContent = `${remaining} Zeichen \u00fcbrig`;\n  });\n&lt;/script&gt;\n</code></pre> <p>\ud83d\udc49 Hilft dem Benutzer, die erlaubte Textl\u00e4nge einzuhalten.</p>"},{"location":"html/form/textarea/#fazit","title":"\ud83d\udcda Fazit","text":"<p>Das <code>&lt;textarea&gt;</code>-Element ist ideal f\u00fcr freie Texteingaben mit mehr als einer Zeile. Ob f\u00fcr Kommentare, E-Mails oder Supportanfragen \u2013 es geh\u00f6rt zu den wichtigsten Formularelementen. In Kombination mit CSS, Validierung und sinnvoller UX l\u00e4sst sich daraus ein leistungsf\u00e4higes Textelement gestalten.</p>"},{"location":"html/page/article/","title":"<code>&lt;article&gt;</code> \u2013 Eigenst\u00e4ndiger Inhaltsblock","text":""},{"location":"html/page/article/#funktion","title":"\ud83e\udde9 Funktion","text":"<p>Das <code>&lt;article&gt;</code>-Element steht f\u00fcr einen eigenst\u00e4ndigen, in sich geschlossenen Inhaltsabschnitt, der auch au\u00dferhalb des Kontexts der aktuellen Seite verst\u00e4ndlich ist. Typische Beispiele sind:</p> <ul> <li>Blogbeitr\u00e4ge</li> <li>Nachrichtenartikel</li> <li>Forenbeitr\u00e4ge</li> <li>Nutzerkommentare</li> <li>Eintr\u00e4ge in einem RSS-Feed</li> <li>Produktbeschreibungen</li> </ul> <p>\ud83d\udccc Inhalte in <code>&lt;article&gt;</code> sollen f\u00fcr sich alleine stehen k\u00f6nnen, z.\u202fB. in Feeds, Suchergebnissen oder Druckausgaben.</p>"},{"location":"html/page/article/#verwendung","title":"\u2705 Verwendung","text":"<pre><code>&lt;article&gt;\n  &lt;h2&gt;Neues Feature im Produkt&lt;/h2&gt;\n  &lt;p&gt;Wir haben ein neues Tool integriert, das automatisch Daten analysiert.&lt;/p&gt;\n&lt;/article&gt;\n</code></pre> <p>\ud83d\udc49 Der <code>&lt;h2&gt;</code> geh\u00f6rt zum Artikel \u2013 jeder Artikel kann (und sollte) eine eigene \u00dcberschrift haben.</p>"},{"location":"html/page/article/#semantische-bedeutung","title":"\ud83e\udde0 Semantische Bedeutung","text":"<ul> <li>Der Inhalt ist thematisch eigenst\u00e4ndig</li> <li>Kann in anderen Kontexten weiterverwendet werden (z.\u202fB. als Einzelseite oder in einem Aggregator)</li> <li>Ist nicht nur eine Gruppierung, sondern hat redaktionellen oder strukturellen Eigenwert</li> </ul>"},{"location":"html/page/article/#haufig-verwendete-elemente-im-article","title":"\ud83d\udd27 H\u00e4ufig verwendete Elemente im <code>&lt;article&gt;</code>","text":"Element Funktion <code>&lt;header&gt;</code> Titel, Autor, Datum, ggf. Bild <code>&lt;footer&gt;</code> Quelle, Kommentare, Tags, Weiterlesen-Link <code>&lt;h1&gt;</code>\u2013<code>&lt;h6&gt;</code> Artikel\u00fcberschrift (meist <code>&lt;h2&gt;</code> in der Seite) <code>&lt;section&gt;</code> Inhaltlich untergeordnete Bereiche <code>&lt;p&gt;</code>, <code>&lt;img&gt;</code>, <code>&lt;figure&gt;</code> Flie\u00dftext, Bilder etc."},{"location":"html/page/article/#erweiterte-beispiele","title":"\ud83e\uddea Erweiterte Beispiele","text":""},{"location":"html/page/article/#blogeintrag-mit-datum-autor","title":"Blogeintrag mit Datum &amp; Autor","text":"<pre><code>&lt;article&gt;\n  &lt;header&gt;\n    &lt;h2&gt;Wie funktioniert HTML?&lt;/h2&gt;\n    &lt;p&gt;&lt;time datetime=\"2025-06-08\"&gt;8. Juni 2025&lt;/time&gt; von &lt;span class=\"author\"&gt;Florian Fenzl&lt;/span&gt;&lt;/p&gt;\n  &lt;/header&gt;\n\n  &lt;p&gt;HTML ist die Grundlage des Webs...&lt;/p&gt;\n\n  &lt;footer&gt;\n    &lt;a href=\"/kommentare.html\"&gt;5 Kommentare&lt;/a&gt;\n  &lt;/footer&gt;\n&lt;/article&gt;\n</code></pre>"},{"location":"html/page/article/#unterschiede-zu-anderen-tags","title":"\ud83c\udfaf Unterschiede zu anderen Tags","text":"Element Zweck <code>&lt;div&gt;</code> Rein visuelle Gruppierung (ohne Bedeutung) <code>&lt;section&gt;</code> Thematischer Bereich (z.\u202fB. Kapitel) <code>&lt;article&gt;</code> Eigenst\u00e4ndiger, kontextunabh\u00e4ngiger Inhalt <p>\u2705 Verwende <code>&lt;section&gt;</code> innerhalb von <code>&lt;article&gt;</code>, nicht umgekehrt!</p>"},{"location":"html/page/article/#barrierefreiheit-struktur","title":"\u267f Barrierefreiheit &amp; Struktur","text":"<ul> <li>Screenreader erkennen <code>&lt;article&gt;</code> als eigenen Bereich</li> <li>Nutzer k\u00f6nnen zwischen Artikeln navigieren</li> <li>Auch f\u00fcr strukturierte Daten (Schema.org <code>Article</code>) gut geeignet</li> </ul>"},{"location":"html/page/article/#fehler-vermeiden","title":"\u274c Fehler vermeiden","text":"Fehler Besser <code>&lt;article&gt;</code> ohne \u00dcberschrift Immer mit <code>&lt;h2&gt;</code> oder vergleichbarem Titel Einsatz f\u00fcr blo\u00dfe Layout-Gruppierung Daf\u00fcr <code>&lt;div&gt;</code> oder <code>&lt;section&gt;</code> verwenden Artikel mit irrelevanten Inhalten f\u00fcllen Inhalt sollte eigenst\u00e4ndig sinnvoll sein"},{"location":"html/page/article/#fazit","title":"\ud83d\udcda Fazit","text":"<p>Das <code>&lt;article&gt;</code>-Element ist ideal f\u00fcr wiederverwendbare, thematisch abgeschlossene Inhalte \u2013 von Blogposts bis Produktbeschreibungen. Es unterst\u00fctzt die Strukturierung, Barrierefreiheit und Maschinenlesbarkeit deiner Inhalte \u2013 eine klare Empfehlung f\u00fcr moderne Webentwicklung.</p>"},{"location":"html/page/aside/","title":"<code>&lt;aside&gt;</code> \u2013 Randbemerkungen &amp; Zusatzinhalte","text":""},{"location":"html/page/aside/#was-ist-aside","title":"\ud83e\udde9 Was ist <code>&lt;aside&gt;</code>?","text":"<p>Das <code>&lt;aside&gt;</code>-Element ist ein semantisches HTML5-Element, das verwendet wird, um Inhalte anzuzeigen, die nicht zum Hauptinhalt geh\u00f6ren, aber in Zusammenhang stehen \u2013 z.\u202fB. eine Seitenleiste, weiterf\u00fchrende Informationen, Werbung oder verwandte Links.</p> <p>\ud83e\udde0 Denkweise: Was w\u00fcrde nicht fehlen, wenn man es wegl\u00e4sst \u2013 aber trotzdem hilfreich ist?</p>"},{"location":"html/page/aside/#typische-anwendungsfalle","title":"\u2705 Typische Anwendungsf\u00e4lle","text":"Einsatzbereich Beispiel Blogartikel Autorinfo, verwandte Artikel, Leseempfehlung Dokumentation Hintergrundwissen, Tipp-K\u00e4sten E-Commerce Zusatzangebote, Cross-Selling Nachrichtenseiten Themenverwandte News, \u201eMeistgelesen\u201c Allgemein Werbung, Downloads, Definitionen, Kontaktboxen"},{"location":"html/page/aside/#beispiele","title":"\ud83e\uddea Beispiele","text":""},{"location":"html/page/aside/#1-in-einem-blogartikel","title":"1. \ud83d\udd0d In einem Blogartikel","text":"<pre><code>&lt;article&gt;\n  &lt;h1&gt;Was ist HTML?&lt;/h1&gt;\n  &lt;p&gt;HTML ist die Auszeichnungssprache f\u00fcr Webseiten...&lt;/p&gt;\n\n  &lt;aside&gt;\n    &lt;h2&gt;Wusstest du schon?&lt;/h2&gt;\n    &lt;p&gt;HTML wurde urspr\u00fcnglich am CERN entwickelt.&lt;/p&gt;\n  &lt;/aside&gt;\n&lt;/article&gt;\n</code></pre> <p>\ud83d\udc49 Das <code>&lt;aside&gt;</code> liefert kontextbezogene Zusatzinformationen, geh\u00f6rt aber nicht direkt zum Flie\u00dftext.</p>"},{"location":"html/page/aside/#2-seitenleiste-mit-navigation","title":"2. \ud83d\udcf0 Seitenleiste mit Navigation","text":"<pre><code>&lt;main&gt;\n  &lt;h1&gt;Artikel zum Thema Webentwicklung&lt;/h1&gt;\n  &lt;p&gt;...&lt;/p&gt;\n&lt;/main&gt;\n\n&lt;aside&gt;\n  &lt;nav&gt;\n    &lt;h2&gt;Verwandte Themen&lt;/h2&gt;\n    &lt;ul&gt;\n      &lt;li&gt;&lt;a href=\"/html\"&gt;HTML&lt;/a&gt;&lt;/li&gt;\n      &lt;li&gt;&lt;a href=\"/css\"&gt;CSS&lt;/a&gt;&lt;/li&gt;\n      &lt;li&gt;&lt;a href=\"/javascript\"&gt;JavaScript&lt;/a&gt;&lt;/li&gt;\n    &lt;/ul&gt;\n  &lt;/nav&gt;\n&lt;/aside&gt;\n</code></pre> <p>\ud83d\udc49 Das <code>&lt;aside&gt;</code> steht au\u00dferhalb des Hauptinhalts und bietet eine erg\u00e4nzende Navigation.</p>"},{"location":"html/page/aside/#positionierung","title":"\ud83d\udd04 Positionierung","text":"<ul> <li><code>&lt;aside&gt;</code> kann innerhalb von <code>&lt;article&gt;</code> oder <code>&lt;section&gt;</code> stehen \u2192 lokaler Bezug</li> <li><code>&lt;aside&gt;</code> kann au\u00dferhalb von <code>&lt;main&gt;</code> stehen \u2192 seitenweiter Kontext</li> </ul>"},{"location":"html/page/aside/#unterschied","title":"Unterschied:","text":"Position Bedeutung Innerhalb <code>&lt;article&gt;</code> Kontextbezogen (z.\u202fB. Hinweis zum Textabschnitt) Au\u00dferhalb <code>&lt;main&gt;</code> Allgemein (z.\u202fB. Newsletter, Werbung, Sidebar)"},{"location":"html/page/aside/#barrierefreiheit-semantik","title":"\u267f Barrierefreiheit &amp; Semantik","text":"<ul> <li>Screenreader erkennen <code>&lt;aside&gt;</code> als \u201eerg\u00e4nzenden Bereich\u201c</li> <li>Nutze <code>aria-labelledby</code> oder \u00dcberschriften (<code>&lt;h2&gt;</code>, <code>&lt;h3&gt;</code>) zur inhaltlichen Orientierung</li> <li>Vermeide, <code>&lt;aside&gt;</code> nur zur visuellen Positionierung zu verwenden (daf\u00fcr lieber CSS + <code>&lt;div&gt;</code>)</li> </ul>"},{"location":"html/page/aside/#best-practices","title":"\ud83e\udde0 Best Practices","text":"<ul> <li>Nutze <code>&lt;aside&gt;</code> nicht f\u00fcr Hauptnavigation \u2013 das ist Aufgabe von <code>&lt;nav&gt;</code></li> <li>Vermeide es, irrelevante Inhalte in <code>&lt;aside&gt;</code> zu packen \u2013 es soll relevant, aber optional sein</li> <li>Kombiniere <code>&lt;aside&gt;</code> mit <code>&lt;h2&gt;</code> und <code>aria-*</code>, um Klarheit f\u00fcr Leser und Maschinen zu schaffen</li> <li>Verwende f\u00fcr visuelle Seitenleisten zus\u00e4tzlich CSS (z.\u202fB. <code>float</code>, Flexbox, Grid)</li> </ul>"},{"location":"html/page/aside/#haufige-fehler","title":"\u274c H\u00e4ufige Fehler","text":"Fehler Besser Werbung im <code>&lt;main&gt;</code> statt in <code>&lt;aside&gt;</code> Werbebl\u00f6cke separat mit <code>&lt;aside&gt;</code> auslagern Kein Bezug zum Inhalt Inhalt im <code>&lt;aside&gt;</code> sollte thematisch passen <code>&lt;aside&gt;</code> f\u00fcr jede Box verwendet Nur wenn es semantisch sinnvoll ist \u2013 sonst <code>&lt;div&gt;</code>"},{"location":"html/page/aside/#fazit","title":"\ud83d\udcda Fazit","text":"<p>Das <code>&lt;aside&gt;</code>-Element ist eine elegante M\u00f6glichkeit, erg\u00e4nzende Inhalte strukturiert und zug\u00e4nglich darzustellen. Es trennt Randinhalte klar vom Hauptinhalt und sorgt f\u00fcr bessere UX und SEO-Struktur \u2013 besonders in Blogs, Magazinen oder komplexen Webanwendungen.</p>"},{"location":"html/page/div/","title":"<code>&lt;div&gt;</code> \u2013 Semantikfreier Block-Container","text":""},{"location":"html/page/div/#funktion","title":"\ud83e\udde9 Funktion","text":"<p>Das <code>&lt;div&gt;</code>-Element (Division) ist ein semantikfreier Block-Container, der verwendet wird, um Inhalte zu gruppieren, Layout-Strukturen zu definieren oder Styling und Skripting \u00fcber CSS und JavaScript zu erm\u00f6glichen.</p> <p>\ud83d\udccc <code>&lt;div&gt;</code> enth\u00e4lt keine inhaltliche Bedeutung \u2013 es dient ausschlie\u00dflich der Strukturierung und Gruppierung im Layout.</p>"},{"location":"html/page/div/#verwendung","title":"\u2705 Verwendung","text":"<pre><code>&lt;div class=\"container\"&gt;\n  &lt;p&gt;Text innerhalb eines Containers&lt;/p&gt;\n&lt;/div&gt;\n</code></pre> <p>\ud83d\udc49 Hier wird eine Containerstruktur f\u00fcr CSS definiert \u2013 z.\u202fB. ein Seitenbereich oder ein Grid-Element.</p>"},{"location":"html/page/div/#attribute","title":"\ud83d\udd27 Attribute","text":"Attribut Beschreibung <code>id</code> Eindeutiger Bezeichner \u2013 z.\u202fB. f\u00fcr JavaScript oder Anker <code>class</code> Gruppenzuweisung f\u00fcr CSS-Styling oder JS-Selektoren <code>style</code> Direktes Inline-CSS (empfohlen nur f\u00fcr Einzelf\u00e4lle) <code>data-*</code> Benutzerdefinierte Attribute f\u00fcr dynamische Anwendungen <code>hidden</code> Blendet das Element aus"},{"location":"html/page/div/#typische-einsatzszenarien","title":"\ud83c\udfaf Typische Einsatzszenarien","text":"Zweck Beispiel Layout-Gruppierung Seitenbereiche, Grids, Flexbox-Container Styling-Zone Farbbereiche, Boxen, Hintergr\u00fcnde JavaScript-Hook Ziel f\u00fcr dynamisches Verhalten (z.\u202fB. Modal, Toggle) Wrapper f\u00fcr Logik Formgruppen, Komponentenstrukturen"},{"location":"html/page/div/#beispiel-layoutstruktur","title":"\ud83c\udfa8 Beispiel: Layoutstruktur","text":"<pre><code>&lt;div id=\"header\"&gt;\n  &lt;h1&gt;Meine Seite&lt;/h1&gt;\n&lt;/div&gt;\n\n&lt;div class=\"content\"&gt;\n  &lt;p&gt;Inhalt hier...&lt;/p&gt;\n&lt;/div&gt;\n\n&lt;div id=\"footer\"&gt;\n  &lt;p&gt;\u00a9 2025 Florian Fenzl&lt;/p&gt;\n&lt;/div&gt;\n</code></pre>"},{"location":"html/page/div/#wichtig-semantische-alternative-wahlen-wenn-moglich","title":"\ud83e\udde0 Wichtig: Semantische Alternative w\u00e4hlen, wenn m\u00f6glich","text":"Aufgabe Besser als <code>&lt;div&gt;</code> Navigation <code>&lt;nav&gt;</code> Artikel <code>&lt;article&gt;</code> Seitenabschnitt <code>&lt;section&gt;</code> Fu\u00dfbereich <code>&lt;footer&gt;</code> Header <code>&lt;header&gt;</code> Inhalt ohne semantische Bedeutung \u2705 <code>&lt;div&gt;</code> bleibt richtig <p>\u2705 Regel: Nur verwenden, wenn keine semantisch bessere Alternative existiert.</p>"},{"location":"html/page/div/#barrierefreiheit-struktur","title":"\u267f Barrierefreiheit &amp; Struktur","text":"<ul> <li><code>&lt;div&gt;</code> bietet keine semantischen Hinweise f\u00fcr Screenreader</li> <li>Wichtig: Nicht zu viele verschachtelte <code>&lt;div&gt;</code> ohne Zweck (\u201edivitis\u201c vermeiden)</li> <li>Guter Einsatz verbessert dennoch die visuelle und logische Struktur</li> </ul>"},{"location":"html/page/div/#haufige-fehler","title":"\u274c H\u00e4ufige Fehler","text":"Fehler Besser <code>&lt;div&gt;</code> f\u00fcr semantische Inhalte Lieber <code>&lt;section&gt;</code>, <code>&lt;main&gt;</code>, <code>&lt;article&gt;</code> etc. Styling nur \u00fcber Inline-CSS Nutze externe oder interne Stylesheets <code>&lt;div&gt;</code>-Chaos ohne Struktur Klar strukturieren mit IDs/Klassen"},{"location":"html/page/div/#fazit","title":"\ud83d\udcda Fazit","text":"<p><code>&lt;div&gt;</code> ist ein m\u00e4chtiges und flexibles Werkzeug, das vor allem in der Layout- und JavaScript-Welt unverzichtbar ist. Aber: Es ist nicht semantisch \u2013 setze es gezielt und bewusst ein, und bevorzuge semantische Tags, wo m\u00f6glich.</p>"},{"location":"html/page/footer/","title":"<code>&lt;footer&gt;</code> \u2013 Seiten- oder Abschnittsfu\u00df","text":""},{"location":"html/page/footer/#funktion","title":"\ud83e\udde9 Funktion","text":"<p>Das <code>&lt;footer&gt;</code>-Element kennzeichnet den abschlie\u00dfenden Bereich eines Dokuments oder Abschnitts. Ein Footer kann f\u00fcr die gesamte Webseite gelten oder f\u00fcr ein einzelnes <code>&lt;article&gt;</code>, <code>&lt;section&gt;</code> oder <code>&lt;main&gt;</code>-Element. Typischer Inhalt sind:</p> <ul> <li>Impressum, Datenschutz, Copyright</li> <li>Kontaktinformationen</li> <li>Navigationslinks (z.\u202fB. Sitemap, Hilfe)</li> <li>Autoreninfos</li> <li>Social-Media-Icons</li> <li>letzte Aktualisierung</li> </ul> <p>\ud83d\udccc <code>&lt;footer&gt;</code> ist ein semantisch bedeutungsvolles Element, das den Kontextabschluss signalisiert.</p>"},{"location":"html/page/footer/#verwendung","title":"\u2705 Verwendung","text":""},{"location":"html/page/footer/#1-seitenweiter-footer","title":"1. Seitenweiter Footer","text":"<pre><code>&lt;footer&gt;\n  &lt;p&gt;&amp;copy; 2025 Meine Website&lt;/p&gt;\n  &lt;nav&gt;\n    &lt;a href=\"/impressum\"&gt;Impressum&lt;/a&gt; |\n    &lt;a href=\"/kontakt\"&gt;Kontakt&lt;/a&gt;\n  &lt;/nav&gt;\n&lt;/footer&gt;\n</code></pre>"},{"location":"html/page/footer/#2-footer-innerhalb-eines-artikels","title":"2. Footer innerhalb eines Artikels","text":"<pre><code>&lt;article&gt;\n  &lt;h2&gt;Blogartikel&lt;/h2&gt;\n  &lt;p&gt;Inhalt des Artikels...&lt;/p&gt;\n  &lt;footer&gt;\n    &lt;p&gt;Verfasst von Florian Fenzl am &lt;time datetime=\"2025-06-08\"&gt;8. Juni 2025&lt;/time&gt;&lt;/p&gt;\n  &lt;/footer&gt;\n&lt;/article&gt;\n</code></pre>"},{"location":"html/page/footer/#attribute","title":"\ud83d\udd27 Attribute","text":"Attribut Beschreibung <code>id</code> F\u00fcr Verlinkungen oder JavaScript-Referenzen <code>class</code> F\u00fcr individuelles Styling <code>role</code> ARIA-Rolle wie <code>contentinfo</code> (empfohlen f\u00fcr Barrierefreiheit) <code>data-*</code> Eigene JS-Datenattribute <code>style</code> Inline-CSS (optional)"},{"location":"html/page/footer/#beispiel-mit-css","title":"\ud83c\udfa8 Beispiel mit CSS","text":"<pre><code>footer {\n  background-color: #f2f2f2;\n  padding: 2rem;\n  font-size: 0.9rem;\n  color: #444;\n  text-align: center;\n}\n</code></pre>"},{"location":"html/page/footer/#strukturhinweise","title":"\ud83e\udde0 Strukturhinweise","text":"<ul> <li>Pro Seite nur ein Haupt-<code>&lt;footer&gt;</code> im <code>&lt;body&gt;</code>-Kontext verwenden</li> <li>Innerhalb von <code>&lt;article&gt;</code>, <code>&lt;section&gt;</code>, <code>&lt;main&gt;</code> erlaubt, wenn dort Abschlussinfos enthalten sind</li> <li>Kein Muss f\u00fcr jede Seite \u2013 aber sehr empfohlen</li> </ul>"},{"location":"html/page/footer/#barrierefreiheit","title":"\u267f Barrierefreiheit","text":"<ul> <li>Durch <code>role=\"contentinfo\"</code> k\u00f6nnen Screenreader den Bereich als Meta-Info oder Abschluss erkennen</li> <li>Unterst\u00fctzt die Navigierbarkeit f\u00fcr Tastatur- oder Screenreader-Nutzer:innen</li> </ul>"},{"location":"html/page/footer/#haufige-fehler","title":"\u274c H\u00e4ufige Fehler","text":"Fehler Besser Footer nur mit <code>&lt;div&gt;</code> umgesetzt <code>&lt;footer&gt;</code> bietet semantischen Mehrwert Inhaltlich unpassende Infos (z.\u202fB. Navigation ohne Bezug) Footer sollte abschlussrelevante Inhalte enthalten Mehrere Haupt-Footer auf einer Seite Nur einen Footer auf oberster Ebene verwenden"},{"location":"html/page/footer/#fazit","title":"\ud83d\udcda Fazit","text":"<p>Das <code>&lt;footer&gt;</code>-Element ist ideal f\u00fcr abschlie\u00dfende Informationen, egal ob f\u00fcr die ganze Seite oder einzelne Inhaltsbl\u00f6cke. Es verbessert die semantische Struktur, Barrierefreiheit und Lesbarkeit moderner Webseiten \u2013 und geh\u00f6rt zu den wichtigsten Elementen f\u00fcr eine saubere HTML-Grundstruktur.</p>"},{"location":"html/page/header/","title":"<code>&lt;header&gt;</code> \u2013 Seiten- oder Abschnittskopf","text":""},{"location":"html/page/header/#funktion","title":"\ud83e\udde9 Funktion","text":"<p>Das <code>&lt;header&gt;</code>-Element kennzeichnet den Einleitungsbereich eines HTML-Dokuments oder eines Abschnitts wie <code>&lt;article&gt;</code>, <code>&lt;section&gt;</code>, <code>&lt;main&gt;</code> oder <code>&lt;aside&gt;</code>. Typische Inhalte in einem <code>&lt;header&gt;</code> sind:</p> <ul> <li>Seitentitel</li> <li>Logo / Markenname</li> <li>Navigation</li> <li>Einf\u00fchrungstexte</li> <li>Metadaten (z.\u202fB. Datum, Autor)</li> </ul> <p>\ud83d\udccc Es handelt sich um ein semantisches Blockelement, das Kontext und Einstieg liefert \u2013 vergleichbar mit der \u201eTitelseite\u201c eines Kapitels.</p>"},{"location":"html/page/header/#verwendung","title":"\u2705 Verwendung","text":""},{"location":"html/page/header/#1-globaler-seitenkopf","title":"1. Globaler Seitenkopf","text":"<pre><code>&lt;header&gt;\n  &lt;h1&gt;Mein Blog&lt;/h1&gt;\n  &lt;nav&gt;\n    &lt;ul&gt;\n      &lt;li&gt;&lt;a href=\"/\"&gt;Start&lt;/a&gt;&lt;/li&gt;\n      &lt;li&gt;&lt;a href=\"/artikel\"&gt;Artikel&lt;/a&gt;&lt;/li&gt;\n      &lt;li&gt;&lt;a href=\"/kontakt\"&gt;Kontakt&lt;/a&gt;&lt;/li&gt;\n    &lt;/ul&gt;\n  &lt;/nav&gt;\n&lt;/header&gt;\n</code></pre>"},{"location":"html/page/header/#2-header-innerhalb-eines-artikels","title":"2. Header innerhalb eines Artikels","text":"<pre><code>&lt;article&gt;\n  &lt;header&gt;\n    &lt;h2&gt;Was ist Data Science?&lt;/h2&gt;\n    &lt;p&gt;von Florian Fenzl \u2013 &lt;time datetime=\"2025-06-08\"&gt;8. Juni 2025&lt;/time&gt;&lt;/p&gt;\n  &lt;/header&gt;\n  &lt;p&gt;Data Science ist ein interdisziplin\u00e4res Feld ...&lt;/p&gt;\n&lt;/article&gt;\n</code></pre>"},{"location":"html/page/header/#attribute","title":"\ud83d\udd27 Attribute","text":"Attribut Beschreibung <code>id</code> Einzigartiger Bezeichner (z.\u202fB. f\u00fcr Links oder JS) <code>class</code> CSS-Styling \u00fcber Klassen <code>style</code> Direktes Inline-Styling (z.\u202fB. Hintergrundfarbe) <code>role</code> ARIA-Rolle wie <code>banner</code> (nur f\u00fcr das erste Seitenheader) <code>data-*</code> Eigene Datenattribute f\u00fcr JS"},{"location":"html/page/header/#hinweise-zur-nutzung","title":"\ud83c\udfaf Hinweise zur Nutzung","text":"Bereich Empfohlenes Verhalten Dokument (ganze Seite) Nur ein <code>&lt;header&gt;</code> mit <code>role=\"banner\"</code> Untergeordnete Inhalte Jeweils eigener <code>&lt;header&gt;</code> f\u00fcr Artikel, Sektionen Navigation im Header Direkt mit <code>&lt;nav&gt;</code> kombinieren (optional)"},{"location":"html/page/header/#beispiel-mit-css","title":"\ud83c\udfa8 Beispiel mit CSS","text":"<pre><code>header {\n  background-color: #f8f8f8;\n  padding: 2rem;\n  border-bottom: 1px solid #ddd;\n}\n</code></pre>"},{"location":"html/page/header/#barrierefreiheit-aria-struktur","title":"\u267f Barrierefreiheit (ARIA &amp; Struktur)","text":"<ul> <li>Hauptseitenkopf sollte <code>role=\"banner\"</code> erhalten</li> <li>Nicht mehrfach auf oberster Ebene mit <code>role=\"banner\"</code> markieren</li> <li>Headerelemente verbessern die semantische Navigierbarkeit f\u00fcr Screenreader</li> </ul>"},{"location":"html/page/header/#haufige-fehler","title":"\u274c H\u00e4ufige Fehler","text":"Fehler Korrekte Verwendung Mehrere <code>&lt;header&gt;</code>-Elemente mit <code>role=\"banner\"</code> Nur einen pro Seite <code>&lt;header&gt;</code> f\u00fcr Inhalt statt Einleitung Nutze <code>&lt;section&gt;</code>, <code>&lt;div&gt;</code> oder <code>&lt;main&gt;</code> Nur als Wrapper f\u00fcr Styling genutzt Nur verwenden, wenn ein einleitender Kontext gemeint ist"},{"location":"html/page/header/#unterschied-zu-ahnlichen-elementen","title":"\ud83d\udd04 Unterschied zu \u00e4hnlichen Elementen","text":"Element Zweck <code>&lt;header&gt;</code> Einstieg/Kopf eines Abschnitts <code>&lt;footer&gt;</code> Abschluss/Meta eines Abschnitts <code>&lt;nav&gt;</code> Navigationselemente <code>&lt;main&gt;</code> Hauptinhalt der Seite"},{"location":"html/page/header/#fazit","title":"\ud83d\udcda Fazit","text":"<p>Das <code>&lt;header&gt;</code>-Element ist ein semantisch aussagekr\u00e4ftiger Einstiegspunkt, der f\u00fcr Seiten und Inhaltsbereiche gleichsam geeignet ist. Ob Logo, Navigation oder Titel: Der Header strukturiert Inhalte sinnvoll und verbessert die Lesbarkeit, SEO und Barrierefreiheit deiner HTML-Seite.</p>"},{"location":"html/page/main/","title":"<code>&lt;main&gt;</code> \u2013 Hauptinhalt der Seite","text":""},{"location":"html/page/main/#funktion","title":"\ud83e\udde9 Funktion","text":"<p>Das <code>&lt;main&gt;</code>-Element kennzeichnet den zentralen inhaltlichen Bereich einer Webseite \u2013 also den Teil, der sich direkt auf das Thema oder den Zweck der Seite bezieht.</p> <p>Es enth\u00e4lt die Hauptinformationen, die den eigentlichen Inhalt der Seite darstellen, ohne Navigation, Header, Footer oder Sidebar.</p> <p>\ud83d\udccc <code>&lt;main&gt;</code> ist ein semantisches Blockelement, das nur einmal pro Seite vorkommen darf.</p>"},{"location":"html/page/main/#verwendung","title":"\u2705 Verwendung","text":"<pre><code>&lt;main&gt;\n  &lt;article&gt;\n    &lt;h2&gt;Blogartikel: HTML verstehen&lt;/h2&gt;\n    &lt;p&gt;HTML ist die Sprache des Webs...&lt;/p&gt;\n  &lt;/article&gt;\n&lt;/main&gt;\n</code></pre> <p>\ud83d\udc49 Der zentrale Artikel liegt innerhalb von <code>&lt;main&gt;</code> \u2013 Navigation, Logo oder Footer sind au\u00dfen vor.</p>"},{"location":"html/page/main/#attribute","title":"\ud83d\udd27 Attribute","text":"Attribut Beschreibung <code>id</code> Zur gezielten Referenz, z.\u202fB. in Skip Links <code>class</code> F\u00fcr CSS-Design oder Layout-Zuweisung <code>style</code> Inline-Styling (z.\u202fB. Hintergrund, Abst\u00e4nde) <code>role=\"main\"</code> Optional f\u00fcr Barrierefreiheit, wenn n\u00f6tig (meist implizit) <code>data-*</code> Eigene Daten f\u00fcr JavaScript-Logik"},{"location":"html/page/main/#besonderheiten","title":"\ud83e\udde0 Besonderheiten","text":"<ul> <li>Nur ein <code>&lt;main&gt;</code>-Element pro Dokument erlaubt</li> <li><code>&lt;main&gt;</code> darf nicht in <code>&lt;header&gt;</code>, <code>&lt;footer&gt;</code>, <code>&lt;article&gt;</code> oder <code>&lt;aside&gt;</code> enthalten sein</li> <li>Soll den zentralen inhaltlichen Fokus der Seite abbilden (z.\u202fB. Blogtext, Produktbeschreibung, Dashboard-Daten)</li> </ul>"},{"location":"html/page/main/#typische-inhalte-im-main","title":"\ud83c\udfaf Typische Inhalte im <code>&lt;main&gt;</code>","text":"Inhaltstyp Beispiel Blog-Artikel <code>&lt;article&gt;</code> mit Beitr\u00e4gen Hauptinformationen Text, Bilder, Videos zur Seite Dynamischer Content Dashboard-Komponenten, Tabellen Eingabebereich (Form) Hauptformular auf einer Seite"},{"location":"html/page/main/#beispiel-mit-css","title":"\ud83c\udfa8 Beispiel mit CSS","text":"<pre><code>main {\n  padding: 2rem;\n  max-width: 800px;\n  margin: auto;\n  background: #fff;\n}\n</code></pre>"},{"location":"html/page/main/#barrierefreiheit-a11y","title":"\u267f Barrierefreiheit (a11y)","text":"<ul> <li>Screenreader erkennen <code>&lt;main&gt;</code> automatisch als zentralen Navigationspunkt</li> <li>N\u00fctzlich in Kombination mit \u201eSkip to main content\u201c-Links:</li> </ul> <pre><code>&lt;a href=\"#main-content\" class=\"skip-link\"&gt;Zum Inhalt springen&lt;/a&gt;\n&lt;main id=\"main-content\"&gt;\n  ...\n&lt;/main&gt;\n</code></pre>"},{"location":"html/page/main/#haufige-fehler","title":"\u274c H\u00e4ufige Fehler","text":"Fehler Richtige Anwendung Mehrere <code>&lt;main&gt;</code>-Elemente auf einer Seite Nur ein Hauptbereich pro Seite <code>&lt;main&gt;</code> innerhalb von <code>&lt;header&gt;</code> o.\u202f\u00e4. Hauptinhalt sollte au\u00dferhalb semantischer Wrapper sein Hauptinhalt ohne <code>&lt;main&gt;</code> <code>&lt;main&gt;</code> verbessert Struktur, SEO und Zug\u00e4nglichkeit"},{"location":"html/page/main/#vergleich-zu-ahnlichen-elementen","title":"\ud83d\udd04 Vergleich zu \u00e4hnlichen Elementen","text":"Element Zweck <code>&lt;main&gt;</code> Einzelner zentraler Inhaltsbereich <code>&lt;section&gt;</code> Thematische Unterteilung innerhalb von <code>&lt;main&gt;</code> <code>&lt;article&gt;</code> Eigenst\u00e4ndiger Inhalt wie Blogpost <code>&lt;div&gt;</code> Neutrale Gruppierung ohne Semantik"},{"location":"html/page/main/#fazit","title":"\ud83d\udcda Fazit","text":"<p>Das <code>&lt;main&gt;</code>-Element bietet eine klare, zug\u00e4ngliche Struktur f\u00fcr den wichtigsten Seiteninhalt. Es ist f\u00fcr moderne, semantisch saubere Webseiten unerl\u00e4sslich \u2013 besonders im Zusammenspiel mit <code>&lt;header&gt;</code>, <code>&lt;nav&gt;</code> und <code>&lt;footer&gt;</code>.</p>"},{"location":"html/page/nav/","title":"<code>&lt;nav&gt;</code> \u2013 Navigationsbereich","text":""},{"location":"html/page/nav/#funktion","title":"\ud83e\udde9 Funktion","text":"<p>Das <code>&lt;nav&gt;</code>-Element wird verwendet, um einen semantisch erkennbaren Bereich f\u00fcr Navigationslinks zu definieren. Typische Inhalte eines <code>&lt;nav&gt;</code>-Blocks sind:</p> <ul> <li>Hauptnavigation</li> <li>Sekund\u00e4re Navigation (z.\u202fB. Sidebar-Men\u00fc)</li> <li>Inhaltsverzeichnisse</li> <li>Paginierungen</li> <li>Breadcrumbs</li> </ul> <p>\ud83d\udccc Das Element hilft Screenreadern, Suchmaschinen und Browsern, strukturell zwischen Navigation und Inhalt zu unterscheiden.</p>"},{"location":"html/page/nav/#verwendung","title":"\u2705 Verwendung","text":"<pre><code>&lt;nav&gt;\n  &lt;ul&gt;\n    &lt;li&gt;&lt;a href=\"/\"&gt;Startseite&lt;/a&gt;&lt;/li&gt;\n    &lt;li&gt;&lt;a href=\"/\u00fcber-uns\"&gt;\u00dcber uns&lt;/a&gt;&lt;/li&gt;\n    &lt;li&gt;&lt;a href=\"/kontakt\"&gt;Kontakt&lt;/a&gt;&lt;/li&gt;\n  &lt;/ul&gt;\n&lt;/nav&gt;\n</code></pre> <p>\ud83d\udc49 Die <code>&lt;nav&gt;</code>-Struktur kann \u00fcberall im Dokument vorkommen, sollte aber f\u00fcr Benutzer logisch zug\u00e4nglich sein.</p>"},{"location":"html/page/nav/#attribute","title":"\ud83d\udd27 Attribute","text":"Attribut Beschreibung <code>id</code> F\u00fcr Verlinkung, Scrolling, oder JS-Zugriff <code>class</code> CSS-Styling <code>style</code> Direktes Styling (optional) <code>aria-label</code> Kurze Beschreibung f\u00fcr Screenreader, wenn kein sichtbarer Titel vorhanden ist <code>aria-labelledby</code> Verkn\u00fcpft <code>&lt;nav&gt;</code> mit einem sichtbaren Titel"},{"location":"html/page/nav/#struktur-tipps","title":"\ud83e\udde0 Struktur-Tipps","text":"<ul> <li>Verwende <code>&lt;nav&gt;</code> nur f\u00fcr echte Navigation, nicht f\u00fcr jeden Link-Block</li> <li>Hauptnavigation nah an den Seitenanfang setzen</li> <li>Screenreader profitieren von <code>aria-label</code>, wenn der Zweck sonst nicht klar ist</li> </ul>"},{"location":"html/page/nav/#beispiel-mit-aria-label","title":"\ud83c\udfaf Beispiel mit <code>aria-label</code>","text":"<pre><code>&lt;nav aria-label=\"Hauptnavigation\"&gt;\n  &lt;ul&gt;\n    &lt;li&gt;&lt;a href=\"/\"&gt;Start&lt;/a&gt;&lt;/li&gt;\n    &lt;li&gt;&lt;a href=\"/blog\"&gt;Blog&lt;/a&gt;&lt;/li&gt;\n    &lt;li&gt;&lt;a href=\"/kontakt\"&gt;Kontakt&lt;/a&gt;&lt;/li&gt;\n  &lt;/ul&gt;\n&lt;/nav&gt;\n</code></pre>"},{"location":"html/page/nav/#alternativ-mit-sichtbarer-uberschrift","title":"Alternativ: Mit sichtbarer \u00dcberschrift","text":"<pre><code>&lt;h2 id=\"menue\"&gt;Men\u00fc&lt;/h2&gt;\n&lt;nav aria-labelledby=\"menue\"&gt;\n  &lt;ul&gt;\n    &lt;li&gt;&lt;a href=\"/faq\"&gt;FAQ&lt;/a&gt;&lt;/li&gt;\n    &lt;li&gt;&lt;a href=\"/support\"&gt;Support&lt;/a&gt;&lt;/li&gt;\n  &lt;/ul&gt;\n&lt;/nav&gt;\n</code></pre>"},{"location":"html/page/nav/#beispiel-mit-css","title":"\ud83c\udfa8 Beispiel mit CSS","text":"<pre><code>nav ul {\n  list-style: none;\n  display: flex;\n  gap: 1rem;\n  padding: 0;\n}\n\nnav a {\n  text-decoration: none;\n  color: #0057b8;\n}\n</code></pre>"},{"location":"html/page/nav/#haufige-fehler","title":"\u274c H\u00e4ufige Fehler","text":"Fehler Korrekte L\u00f6sung <code>&lt;nav&gt;</code> ohne semantische Links Nur echte Navigationsbereiche einbinden Kein <code>aria-label</code> bei mehreren Navigationsleisten Mit <code>aria-label</code> oder <code>aria-labelledby</code> ausstatten Navigation als <code>&lt;div&gt;</code> oder <code>&lt;section&gt;</code> ohne Bedeutung Besser <code>&lt;nav&gt;</code> mit klarer Kennzeichnung verwenden"},{"location":"html/page/nav/#barrierefreiheit","title":"\u267f Barrierefreiheit","text":"<ul> <li><code>&lt;nav&gt;</code> wird von Screenreadern als navigierbarer Bereich erkannt</li> <li>Mehrere <code>&lt;nav&gt;</code>-Elemente pro Seite sind erlaubt \u2013 aber jeweils gut beschriften</li> <li>In Kombination mit Skip-Links hilfreich f\u00fcr keyboard-only Benutzer</li> </ul> <pre><code>&lt;a href=\"#main\" class=\"skip-link\"&gt;Zum Inhalt springen&lt;/a&gt;\n</code></pre>"},{"location":"html/page/nav/#unterschied-zu-ahnlichen-elementen","title":"\ud83d\udd04 Unterschied zu \u00e4hnlichen Elementen","text":"Element Zweck <code>&lt;nav&gt;</code> Navigation zu Seiten oder Abschnitten <code>&lt;header&gt;</code> Einleitender Bereich, kann <code>&lt;nav&gt;</code> enthalten <code>&lt;section&gt;</code> Thematische Gliederung, nicht f\u00fcr Navigation <code>&lt;aside&gt;</code> Erg\u00e4nzende Inhalte (z.\u202fB. Links, aber sekund\u00e4r)"},{"location":"html/page/nav/#fazit","title":"\ud83d\udcda Fazit","text":"<p>Das <code>&lt;nav&gt;</code>-Element geh\u00f6rt zu den wichtigsten semantischen HTML5-Tags, um Struktur, Barrierefreiheit und Usability zu verbessern. Verwende es bewusst f\u00fcr echte Navigation und kombiniere es mit ARIA-Attributen, um auch bei komplexen Seiten Klarheit zu schaffen.</p>"},{"location":"html/page/section/","title":"<code>&lt;section&gt;</code> \u2013 Thematische Gliederung","text":""},{"location":"html/page/section/#funktion","title":"\ud83e\udde9 Funktion","text":"<p>Das <code>&lt;section&gt;</code>-Element dient dazu, inhaltlich zusammengeh\u00f6rige Inhalte in einem Dokument logisch zu strukturieren und zu gliedern. Es stellt einen eigenst\u00e4ndigen Themenblock innerhalb einer Seite dar \u2013 vergleichbar mit einem Kapitel oder Absatz in einem Buch.</p> <p>\ud83d\udccc Jede <code>&lt;section&gt;</code> sollte in der Regel eine \u00dcberschrift enthalten (<code>&lt;h1&gt;</code>\u2013<code>&lt;h6&gt;</code>) und in sich semantisch sinnvoll sein.</p>"},{"location":"html/page/section/#verwendung","title":"\u2705 Verwendung","text":"<pre><code>&lt;section&gt;\n  &lt;h2&gt;Unsere Leistungen&lt;/h2&gt;\n  &lt;p&gt;Wir bieten Beratung, Webentwicklung und Data Science an.&lt;/p&gt;\n&lt;/section&gt;\n</code></pre> <p>\ud83d\udc49 Die Section bildet eine klar definierte thematische Einheit mit Titel und Inhalt.</p>"},{"location":"html/page/section/#attribute","title":"\ud83d\udd27 Attribute","text":"Attribut Beschreibung <code>id</code> Erm\u00f6glicht interne Sprungziele und Navigation <code>class</code> Gruppierung f\u00fcr CSS-Design <code>style</code> Direktes Inline-Styling (z.\u202fB. Padding, Farben) <code>aria-labelledby</code> Zur barrierefreien Verkn\u00fcpfung mit \u00dcberschrift <code>data-*</code> Benutzerdefinierte Daten f\u00fcr JS oder dynamische Inhalte"},{"location":"html/page/section/#typische-einsatzzwecke","title":"\ud83e\udde0 Typische Einsatzzwecke","text":"Kontext Beispiel Inhaltliche Kapitel Ein Bereich zu \u201eUnsere Leistungen\u201c Mehrsprachige Inhalte Unterschiedliche Sprachen in separaten Sections FAQ oder Help-Bereiche Jeder Abschnitt eine Frage + Antwort Thematisch gegliederte Landingpage Features, Testimonials, Preise etc."},{"location":"html/page/section/#beispiel-mit-navigation","title":"\ud83c\udfa8 Beispiel mit Navigation","text":"<pre><code>&lt;nav&gt;\n  &lt;ul&gt;\n    &lt;li&gt;&lt;a href=\"#leistungen\"&gt;Leistungen&lt;/a&gt;&lt;/li&gt;\n    &lt;li&gt;&lt;a href=\"#team\"&gt;Team&lt;/a&gt;&lt;/li&gt;\n  &lt;/ul&gt;\n&lt;/nav&gt;\n\n&lt;section id=\"leistungen\"&gt;\n  &lt;h2&gt;Unsere Leistungen&lt;/h2&gt;\n  &lt;p&gt;Webentwicklung, Automatisierung und SEO.&lt;/p&gt;\n&lt;/section&gt;\n\n&lt;section id=\"team\"&gt;\n  &lt;h2&gt;Unser Team&lt;/h2&gt;\n  &lt;p&gt;Wir sind erfahrene Entwickler und Analysten.&lt;/p&gt;\n&lt;/section&gt;\n</code></pre>"},{"location":"html/page/section/#barrierefreiheit-a11y","title":"\u267f Barrierefreiheit (a11y)","text":"<ul> <li>Screenreader erkennen <code>&lt;section&gt;</code> als eigenst\u00e4ndigen Inhaltsbereich</li> <li>Durch korrekte Verwendung von \u00dcberschriften und IDs kann eine logische Navigation hergestellt werden</li> <li>Kombination mit <code>aria-labelledby</code> m\u00f6glich, z.\u202fB.:</li> </ul> <pre><code>&lt;section aria-labelledby=\"features-title\"&gt;\n  &lt;h2 id=\"features-title\"&gt;Features&lt;/h2&gt;\n  &lt;p&gt;Unsere Software kann...&lt;/p&gt;\n&lt;/section&gt;\n</code></pre>"},{"location":"html/page/section/#haufige-fehler","title":"\u274c H\u00e4ufige Fehler","text":"Fehler Besser <code>&lt;section&gt;</code> ohne \u00dcberschrift Immer mit <code>&lt;h2&gt;</code>\u2013<code>&lt;h6&gt;</code> einf\u00fchren Als Layout-Ersatz verwendet F\u00fcr rein visuelle Zwecke besser <code>&lt;div&gt;</code> nutzen F\u00fcr zu kurze oder unklare Inhalte verwendet Inhalt sollte ein klar umrissenes Thema darstellen"},{"location":"html/page/section/#unterschied-zu-ahnlichen-elementen","title":"\ud83d\udd04 Unterschied zu \u00e4hnlichen Elementen","text":"Element Zweck <code>&lt;section&gt;</code> Inhaltlich gegliederter Themenblock <code>&lt;div&gt;</code> Neutrales Container-Element ohne Semantik <code>&lt;article&gt;</code> Eigenst\u00e4ndiger, von der Seite losl\u00f6sbarer Inhalt <code>&lt;aside&gt;</code> Erg\u00e4nzende Inhalte wie Sidebar oder Hinweisbox <code>&lt;main&gt;</code> Einmaliger Hauptinhaltsbereich der Seite"},{"location":"html/page/section/#fazit","title":"\ud83d\udcda Fazit","text":"<p><code>&lt;section&gt;</code> ist ein wichtiges semantisches HTML-Element zur Strukturierung komplexer Inhalte. Es hilft sowohl Lesern als auch Maschinen (z.\u202fB. Screenreadern oder Suchmaschinen), den logischen Aufbau der Seite zu verstehen.</p>"},{"location":"html/semantik/navsection/","title":"\ud83d\udd0d <code>&lt;nav&gt;</code> vs. <code>&lt;section&gt;</code> \u2013 Unterschiede und Anwendung","text":""},{"location":"html/semantik/navsection/#gemeinsamkeiten","title":"\ud83e\udde9 Gemeinsamkeiten","text":"<p>Sowohl <code>&lt;nav&gt;</code> als auch <code>&lt;section&gt;</code> sind semantische HTML5-Elemente, die dazu dienen, Inhalte logisch zu strukturieren und deren Bedeutung f\u00fcr Browser, Suchmaschinen und Screenreader zu kl\u00e4ren.</p> <p>Aber: Sie erf\u00fcllen ganz unterschiedliche Zwecke \u2013 die Wahl zwischen beiden h\u00e4ngt davon ab, was f\u00fcr eine Art von Inhalt du darstellst.</p>"},{"location":"html/semantik/navsection/#nav-navigationselement","title":"\ud83d\uddfa\ufe0f <code>&lt;nav&gt;</code> \u2013 Navigationselement","text":""},{"location":"html/semantik/navsection/#zweck","title":"\u2705 Zweck","text":"<p>Das <code>&lt;nav&gt;</code>-Element dient dazu, Navigationsbl\u00f6cke zu kennzeichnen. Es beinhaltet Links zu anderen Bereichen der Website oder zu wichtigen externen Seiten.</p> <p>\ud83d\udd11 Inhalt des <code>&lt;nav&gt;</code> ist ein Verzeichnis, nicht ein Kapitel.</p>"},{"location":"html/semantik/navsection/#typische-inhalte","title":"\ud83d\udca1 Typische Inhalte","text":"<ul> <li>Hauptnavigation (Men\u00fc)</li> <li>Fu\u00dfzeilen-Navigation</li> <li>Breadcrumbs</li> <li>Inhaltsverzeichnis</li> <li>Paginierung (z.\u202fB. \u201eZur\u00fcck / Weiter\u201c)</li> </ul>"},{"location":"html/semantik/navsection/#beispiel","title":"\ud83e\uddea Beispiel","text":"<pre><code>&lt;nav&gt;\n  &lt;ul&gt;\n    &lt;li&gt;&lt;a href=\"/home\"&gt;Startseite&lt;/a&gt;&lt;/li&gt;\n    &lt;li&gt;&lt;a href=\"/produkte\"&gt;Produkte&lt;/a&gt;&lt;/li&gt;\n    &lt;li&gt;&lt;a href=\"/kontakt\"&gt;Kontakt&lt;/a&gt;&lt;/li&gt;\n  &lt;/ul&gt;\n&lt;/nav&gt;\n</code></pre> <p>\ud83d\udc49 Der Browser, Screenreader oder eine Suchmaschine versteht: Das sind wichtige Links zur Orientierung.</p>"},{"location":"html/semantik/navsection/#section-themenblock","title":"\ud83d\udcd1 <code>&lt;section&gt;</code> \u2013 Themenblock","text":""},{"location":"html/semantik/navsection/#zweck_1","title":"\u2705 Zweck","text":"<p>Ein <code>&lt;section&gt;</code> ist ein inhaltlich abgeschlossener Bereich, der einen Teil des Dokuments behandelt. Es wird verwendet, um Inhalte thematisch zu gliedern, z.\u202fB. Kapitel, Artikelabschnitte, Themenbereiche.</p> <p>\ud83e\udde0 Ein <code>&lt;section&gt;</code> ist ein Kapitel. Ein <code>&lt;nav&gt;</code> ist ein Inhaltsverzeichnis.</p>"},{"location":"html/semantik/navsection/#typische-inhalte_1","title":"\ud83d\udca1 Typische Inhalte","text":"<ul> <li>Startseitenteaser: \u201eUnsere Leistungen\u201c, \u201e\u00dcber uns\u201c</li> <li>Artikelabschnitte</li> <li>Widgetbereiche auf einer Landingpage</li> <li>Informationsbl\u00f6cke mit \u00dcberschrift</li> </ul>"},{"location":"html/semantik/navsection/#beispiel_1","title":"\ud83e\uddea Beispiel","text":"<pre><code>&lt;section&gt;\n  &lt;h2&gt;Unsere Dienstleistungen&lt;/h2&gt;\n  &lt;p&gt;Wir bieten individuelle Beratung, Webentwicklung und SEO-Optimierung.&lt;/p&gt;\n&lt;/section&gt;\n</code></pre> <p>\ud83d\udc49 Screenreader erkennt: Dies ist ein inhaltlicher Abschnitt mit eigener \u00dcberschrift.</p>"},{"location":"html/semantik/navsection/#wichtige-unterschiede","title":"\ud83e\udde0 Wichtige Unterschiede","text":"Merkmal <code>&lt;nav&gt;</code> <code>&lt;section&gt;</code> Funktion Navigationsbereich Thematischer Inhaltsbereich Typischer Inhalt Links zu anderen Seiten/Abschnitten Text, Medien, Komponenten, \u00dcberschrift Screenreader Wird als Navigationsmen\u00fc angek\u00fcndigt Wird als Abschnitt mit Titel gelesen Anzahl pro Seite Mehrfach erlaubt, aber sparsam nutzen Beliebig viele m\u00f6glich SEO-Auswirkung Verst\u00e4rkt Linkstruktur der Seite Erh\u00f6ht strukturelle Klarheit f\u00fcr Content"},{"location":"html/semantik/navsection/#wann-was","title":"\ud83d\udd04 Wann was?","text":"Situation Verwende Du baust ein Hauptmen\u00fc, Breadcrumbs oder Paginierung <code>&lt;nav&gt;</code> Du strukturierst eine Landingpage in Bereiche <code>&lt;section&gt;</code> Du listest verwandte Artikel, Links oder Themen <code>&lt;section&gt;</code> (au\u00dfer es ist prim\u00e4r Navigation \u2192 <code>&lt;nav&gt;</code>) Du m\u00f6chtest Screenreader sagen: \u201eDas ist Navigation\u201c <code>&lt;nav&gt;</code>"},{"location":"html/semantik/navsection/#haufige-fehler","title":"\u274c H\u00e4ufige Fehler","text":"Fehler Besser mit <code>&lt;nav&gt;</code> f\u00fcr Inhaltsabschnitte ohne Links <code>&lt;section&gt;</code> <code>&lt;section&gt;</code> ohne \u00dcberschrift <code>&lt;div&gt;</code> oder strukturierte Erg\u00e4nzung Zu viele <code>&lt;nav&gt;</code>-Elemente auf einer Seite Nur f\u00fcr bedeutende Navigationen nutzen <code>&lt;nav&gt;</code> enth\u00e4lt nur Social Icons ohne Zweck Wahrscheinlich <code>&lt;footer&gt;</code> oder <code>&lt;ul&gt;</code> besser geeignet"},{"location":"html/semantik/navsection/#fazit","title":"\ud83d\udcda Fazit","text":"Element Wann verwenden? \u2705 <code>&lt;nav&gt;</code> Wenn du Navigationsbereiche mit Links zu wichtigen Seiten anbietest \u2705 <code>&lt;section&gt;</code> Wenn du thematische Inhaltsbl\u00f6cke strukturierst, die eine eigene \u00dcberschrift haben <p>Beide Elemente tragen dazu bei, deine Seite semantisch korrekt, zug\u00e4nglich und maschinenlesbar zu machen.</p>"},{"location":"html/semantik/%C3%BCbersicht/","title":"\ud83e\uddf1 Semantisches HTML \u2013 \u00dcbersicht","text":""},{"location":"html/semantik/%C3%BCbersicht/#was-bedeutet-semantisch-in-html","title":"\ud83e\udde9 Was bedeutet \u201esemantisch\u201c in HTML?","text":"<p>Semantisches HTML bedeutet, dass HTML-Elemente nicht nur zur Strukturierung, sondern auch zur Bedeutung von Inhalten verwendet werden. Anstatt beliebige <code>&lt;div&gt;</code>- oder <code>&lt;span&gt;</code>-Container zu nutzen, setzt man auf spezialisierte Elemente wie <code>&lt;header&gt;</code>, <code>&lt;article&gt;</code>, <code>&lt;nav&gt;</code>, die dem Browser und Entwicklern vermitteln, was ein Inhalt ist, nicht nur wie er aussieht.</p> <p>\ud83e\udde0 Semantik = Bedeutung</p>"},{"location":"html/semantik/%C3%BCbersicht/#vorteile-von-semantischem-html","title":"\u2705 Vorteile von semantischem HTML","text":"Vorteil Beschreibung \ud83d\udd0d Bessere SEO Suchmaschinen verstehen Inhalte leichter (z.\u202fB. was ist Navigation, Hauptinhalt etc.) \u267f Barrierefreiheit Screenreader k\u00f6nnen Nutzern eine sinnvoll strukturierte Seite vorlesen \ud83e\uddd1\u200d\ud83d\udcbb Wartbarkeit Der Code ist f\u00fcr Menschen leichter lesbar, verst\u00e4ndlich und pflegbar \ud83d\udd04 Maschinenlesbarkeit APIs, Crawler und Assistenzsysteme erkennen Inhalte gezielter \ud83d\udcf1 Bessere UX auf Mobilger\u00e4ten Kombination mit CSS &amp; ARIA f\u00fchrt zu besseren mobilen Interfaces"},{"location":"html/semantik/%C3%BCbersicht/#beispiele-nicht-semantisch-vs-semantisch","title":"\ud83d\udcc4 Beispiele: Nicht-semantisch vs. semantisch","text":""},{"location":"html/semantik/%C3%BCbersicht/#nicht-semantisch","title":"\u274c Nicht semantisch","text":"<pre><code>&lt;div class=\"header\"&gt;...&lt;/div&gt;\n&lt;div class=\"nav\"&gt;...&lt;/div&gt;\n&lt;div class=\"main\"&gt;...&lt;/div&gt;\n</code></pre>"},{"location":"html/semantik/%C3%BCbersicht/#semantisch-korrekt","title":"\u2705 Semantisch korrekt","text":"<pre><code>&lt;header&gt;...&lt;/header&gt;\n&lt;nav&gt;...&lt;/nav&gt;\n&lt;main&gt;...&lt;/main&gt;\n</code></pre>"},{"location":"html/semantik/%C3%BCbersicht/#ubersicht-typischer-semantischer-elemente","title":"\ud83d\uddc2\ufe0f \u00dcbersicht typischer semantischer Elemente","text":"Element Zweck <code>&lt;header&gt;</code> Einleitung eines Dokuments oder Abschnitts (z.\u202fB. Logo, Navigation) <code>&lt;nav&gt;</code> Navigationsmen\u00fc <code>&lt;main&gt;</code> Hauptinhalt der Seite (einmal pro Seite!) <code>&lt;article&gt;</code> In sich geschlossener Inhalt (z.\u202fB. Blogartikel, Kommentar) <code>&lt;section&gt;</code> Thematisch zusammengeh\u00f6riger Abschnitt <code>&lt;aside&gt;</code> Randnotizen, verwandte Inhalte, Werbung <code>&lt;footer&gt;</code> Abschluss oder Fu\u00dfzeile eines Abschnitts oder der Seite <code>&lt;figure&gt;</code> Kombination aus Bild + Beschreibung <code>&lt;figcaption&gt;</code> Beschreibung zu <code>&lt;figure&gt;</code> <code>&lt;mark&gt;</code> Hervorhebung von Text, z.\u202fB. Suchtreffer <code>&lt;time&gt;</code> Maschinenlesbare Zeit-/Datumsangaben"},{"location":"html/semantik/%C3%BCbersicht/#wann-sollte-man-welches-element-verwenden","title":"\ud83e\udde0 Wann sollte man welches Element verwenden?","text":"<ul> <li><code>&lt;section&gt;</code>: Wenn es eine eigene \u00dcberschrift (<code>&lt;h2&gt;</code> etc.) enth\u00e4lt</li> <li><code>&lt;article&gt;</code>: Wenn es auch f\u00fcr sich alleine sinnvoll stehen kann (z.\u202fB. Blogeintrag, News)</li> <li><code>&lt;aside&gt;</code>: Wenn es zus\u00e4tzliche Inhalte zum Haupttext liefert (nicht Kerninhalt)</li> <li><code>&lt;main&gt;</code>: Nur einmal pro Seite! Enth\u00e4lt den zentralen Seiteninhalt</li> <li><code>&lt;nav&gt;</code>: Enth\u00e4lt Links zur Seitennavigation oder externen Seiten</li> <li><code>&lt;header&gt;</code> / <code>&lt;footer&gt;</code>: K\u00f6nnen mehrfach verwendet werden (z.\u202fB. pro <code>article</code> oder <code>section</code>)</li> </ul>"},{"location":"html/semantik/%C3%BCbersicht/#missverstandnisse-vermeiden","title":"\u26a0\ufe0f Missverst\u00e4ndnisse vermeiden","text":"Falsch gedacht Richtig gedacht \u201eSemantisch ist gleich SEO\u201c SEO ist ein Vorteil, aber nicht der einzige \u201eSemantisch bedeutet h\u00fcbsch\u201c Semantik betrifft Bedeutung, nicht Design \u201eNur <code>&lt;main&gt;</code> ist semantisch\u201c Viele HTML5-Elemente tragen zur Semantik bei"},{"location":"html/semantik/%C3%BCbersicht/#best-practices","title":"\ud83d\udee0 Best Practices","text":"<ul> <li>Vermeide reine <code>&lt;div&gt;</code>-Strukturen, wenn es semantische Alternativen gibt.</li> <li>Nutze <code>&lt;section&gt;</code> nur mit \u00dcberschriften und klarer inhaltlicher Trennung.</li> <li>Verwende <code>&lt;article&gt;</code> nur f\u00fcr eigenst\u00e4ndige Inhalte, die auch isoliert Sinn ergeben.</li> <li>Verwende maximal ein <code>&lt;main&gt;</code> pro Seite, aber mehrere <code>&lt;section&gt;</code>, <code>&lt;header&gt;</code>, <code>&lt;footer&gt;</code> innerhalb von Komponenten.</li> </ul>"},{"location":"html/semantik/%C3%BCbersicht/#fazit","title":"\ud83d\udcda Fazit","text":"<p>Semantisches HTML macht deine Seiten lesbarer, zug\u00e4nglicher, strukturierter \u2013 f\u00fcr Menschen wie Maschinen. Es geh\u00f6rt heute zum Standard moderner Webentwicklung und sollte in jedem Projekt konsequent eingesetzt werden.</p>"},{"location":"html/simple/a/","title":"<code>&lt;a&gt;</code> \u2013 Link (Anker)","text":""},{"location":"html/simple/a/#funktion","title":"\ud83e\udde9 Funktion","text":"<p>Das <code>&lt;a&gt;</code>-Element (Anker) wird verwendet, um Hyperlinks zu erstellen. Damit lassen sich:</p> <ul> <li>andere Webseiten aufrufen (externe Links),</li> <li>auf Unterseiten verlinken (interne Links),</li> <li>an bestimmte Stellen auf der Seite springen (Anker),</li> <li>Dateien zum Download bereitstellen,</li> <li>E-Mails oder Telefonnummern aktivieren (<code>mailto:</code> / <code>tel:</code>).</li> </ul> <p>\ud83d\udccc Ohne <code>href</code> wird das <code>&lt;a&gt;</code>-Element nicht als Link behandelt.</p>"},{"location":"html/simple/a/#verwendung","title":"\u2705 Verwendung","text":"<pre><code>&lt;a href=\"https://example.com\" target=\"_blank\" title=\"Externer Link\"&gt;Klick mich&lt;/a&gt;\n</code></pre> <ul> <li><code>href</code>: Zieladresse des Links (Pflicht)</li> <li><code>target=\"_blank\"</code>: \u00d6ffnet Link in neuem Tab</li> <li><code>title</code>: Zusatzinfo als Tooltip bei Mouseover</li> </ul>"},{"location":"html/simple/a/#wichtige-attribute","title":"\ud83d\udd27 Wichtige Attribute","text":"Attribut Beschreibung <code>href</code> Zieladresse des Links (URL, Datei, Anker, mailto:, tel:) <code>target</code> Steuert das \u00d6ffnungsverhalten: <code>_blank</code>, <code>_self</code>, <code>_parent</code>, <code>_top</code> <code>rel</code> Beziehungsangabe (z.\u202fB. <code>nofollow</code>, <code>noopener</code>, <code>noreferrer</code>) <code>title</code> Zusatzinformation als Tooltip <code>download</code> Erzwingt das Herunterladen der verlinkten Datei <code>id</code> Erlaubt, den Link selbst als Ziel eines Ankers zu verwenden"},{"location":"html/simple/a/#beispiele","title":"\ud83e\uddea Beispiele","text":""},{"location":"html/simple/a/#1-interner-link-relative-url","title":"1. \ud83d\udd17 Interner Link (relative URL)","text":"<pre><code>&lt;a href=\"/kontakt.html\"&gt;Kontakt&lt;/a&gt;\n</code></pre> <p>\ud83d\udc49 Verlinkt auf eine Unterseite der eigenen Website.</p>"},{"location":"html/simple/a/#2-externer-link-mit-sicherheitshinweis","title":"2. \ud83c\udf0d Externer Link mit Sicherheitshinweis","text":"<pre><code>&lt;a href=\"https://example.com\" target=\"_blank\" rel=\"noopener noreferrer\"&gt;Externer Link&lt;/a&gt;\n</code></pre> <p>\ud83d\udc49 Verhindert, dass die Zielseite Kontrolle \u00fcber das Ursprungfenster erh\u00e4lt (sicherheitsrelevant!).</p>"},{"location":"html/simple/a/#3-sprungmarke-zu-einem-abschnitt","title":"3. \ud83c\udfaf Sprungmarke zu einem Abschnitt","text":"<pre><code>&lt;a href=\"#ziel\"&gt;Zum Abschnitt&lt;/a&gt;\n\n&lt;!-- weiter unten auf der Seite --&gt;\n&lt;h2 id=\"ziel\"&gt;Zielbereich&lt;/h2&gt;\n</code></pre> <p>\ud83d\udc49 Ideal f\u00fcr Inhaltsverzeichnisse oder OnePager-Navigation.</p>"},{"location":"html/simple/a/#4-e-mail-und-telefonlink","title":"4. \ud83d\udce9 E-Mail- und Telefonlink","text":"<pre><code>&lt;a href=\"mailto:info@example.com\"&gt;E-Mail senden&lt;/a&gt;\n&lt;a href=\"tel:+49123456789\"&gt;Jetzt anrufen&lt;/a&gt;\n</code></pre> <p>\ud83d\udc49 \u00d6ffnet das Mailprogramm oder die Telefon-App.</p>"},{"location":"html/simple/a/#5-download-link","title":"5. \ud83d\udcce Download-Link","text":"<pre><code>&lt;a href=\"/downloads/leitfaden.pdf\" download&gt;PDF herunterladen&lt;/a&gt;\n</code></pre> <p>\ud83d\udc49 Stellt eine Datei zum direkten Herunterladen bereit.</p>"},{"location":"html/simple/a/#rel-attribute-im-detail","title":"\ud83c\udfaf <code>rel</code>-Attribute im Detail","text":"Wert Bedeutung <code>noopener</code> Verhindert Zugriff des Ziel-Tabs auf <code>window.opener</code> (Sicherheit!) <code>noreferrer</code> Unterdr\u00fcckt den HTTP-Referer (Zielseite sieht nicht, von wo man kommt) <code>nofollow</code> Suchmaschinen sollen dem Link nicht folgen (z.\u202fB. bei Werbung) <code>external</code> Markiert den Link als extern (optional, keine direkte Wirkung)"},{"location":"html/simple/a/#best-practices","title":"\ud83e\udde0 Best Practices","text":"<ul> <li>Verwende <code>target=\"_blank\"</code> immer mit <code>rel=\"noopener noreferrer\"</code>, um Sicherheit &amp; Datenschutz zu gew\u00e4hrleisten.</li> <li>Nutze sprechende Linktexte wie \u201eZur Produkt\u00fcbersicht\u201c statt \u201eHier klicken\u201c.</li> <li>F\u00fcr Navigation innerhalb einer Seite: IDs und <code>href=\"#ziel\"</code> kombinieren.</li> <li>Verwende <code>&lt;button&gt;</code> statt <code>&lt;a&gt;</code>, wenn keine Navigation, sondern eine Aktion (z.\u202fB. Modal \u00f6ffnen) gew\u00fcnscht ist.</li> </ul>"},{"location":"html/simple/a/#barrierefreiheit","title":"\u267f Barrierefreiheit","text":"<ul> <li>Linktexte sollten auch au\u00dferhalb des Kontexts verst\u00e4ndlich sein (z.\u202fB. f\u00fcr Screenreader oder Linksammlung).</li> <li>Vermeide mehrfach verwendete Texte wie \u201eMehr erfahren\u201c ohne Unterscheidung.</li> <li>Sorge f\u00fcr sichtbare Fokusmarkierungen f\u00fcr Tastatur-Nutzer (per <code>:focus</code>-Styles in CSS).</li> <li>Keine toten Links (<code>href=\"#\"</code>) ohne sinnvolle Funktion \u2013 das kann f\u00fcr Screenreader verwirrend sein.</li> </ul>"},{"location":"html/simple/a/#haufige-fehler","title":"\u274c H\u00e4ufige Fehler","text":"Fehler Besser <code>&lt;a href=\"#\"&gt;</code> ohne Funktion Lieber <code>button</code> f\u00fcr interaktive Aktionen verwenden Linktext: \u201eHier klicken\u201c Aussagekr\u00e4ftiger Linktext: \u201eKontaktformular \u00f6ffnen\u201c Kein <code>rel</code> bei <code>target=\"_blank\"</code> Immer mit <code>rel=\"noopener noreferrer\"</code> erg\u00e4nzen Inline-JavaScript in <code>href</code> Vermeiden \u2013 lieber <code>addEventListener</code> in JS nutzen"},{"location":"html/simple/a/#fazit","title":"\ud83d\udcda Fazit","text":"<p>Das <code>&lt;a&gt;</code>-Element ist eines der wichtigsten HTML-Tags \u00fcberhaupt \u2013 es verbindet Inhalte, Dokumente, Seiten und Anwendungen im Web. Korrekt verwendet, tr\u00e4gt es zur Usability, Sicherheit, Barrierefreiheit und SEO-Freundlichkeit deiner Seite bei.</p>"},{"location":"html/simple/abbr/","title":"<code>&lt;abbr&gt;</code> \u2013 Abk\u00fcrzungen semantisch markieren","text":""},{"location":"html/simple/abbr/#funktion","title":"\ud83e\udde9 Funktion","text":"<p>Das <code>&lt;abbr&gt;</code>-Element (Abbreviation) dient dazu, Abk\u00fcrzungen oder Akronyme im Flie\u00dftext semantisch zu kennzeichnen. Dadurch wird der volle Begriff \u00fcber das <code>title</code>-Attribut hinterlegt, sodass Browser und Screenreader diesen anzeigen oder aussprechen k\u00f6nnen. Besonders n\u00fctzlich f\u00fcr Barrierefreiheit, SEO, Fachbegriffe und internationale Inhalte.</p> <p>\ud83d\udccc Das <code>&lt;abbr&gt;</code>-Tag hilft Leser:innen sowie Maschinen, den vollst\u00e4ndigen Ausdruck einer Abk\u00fcrzung zu verstehen.</p>"},{"location":"html/simple/abbr/#verwendung","title":"\u2705 Verwendung","text":"<pre><code>&lt;p&gt;Die Konferenz wird von der &lt;abbr title=\"World Health Organization\"&gt;WHO&lt;/abbr&gt; organisiert.&lt;/p&gt;\n</code></pre> <p>\ud83d\udc49 Beim Mouseover wird ein Tooltip mit \u201eWorld Health Organization\u201c angezeigt. Screenreader k\u00f6nnen je nach Einstellung \u201eWorld Health Organization\u201c statt \u201eW-H-O\u201c vorlesen.</p>"},{"location":"html/simple/abbr/#attribute","title":"\ud83d\udd27 Attribute","text":"Attribut Beschreibung <code>title</code> Erforderlich \u2013 enth\u00e4lt die vollst\u00e4ndige Langform <code>lang</code> Angabe der Sprache des abgek\u00fcrzten Begriffs <code>class</code> F\u00fcr visuelles Styling via CSS <code>id</code> F\u00fcr JS oder Ankerverlinkung <code>style</code> Inline-Styling (nur bei Bedarf empfohlen)"},{"location":"html/simple/abbr/#beispiel-mit-css","title":"\ud83c\udfa8 Beispiel mit CSS","text":"<pre><code>&lt;abbr class=\"definition\" title=\"As Soon As Possible\"&gt;ASAP&lt;/abbr&gt;\n</code></pre> <pre><code>.definition {\n  border-bottom: 1px dotted #888;\n  cursor: help;\n}\n</code></pre> <p>\ud83d\udc49 So wirkt die Abk\u00fcrzung wie ein interaktives Glossar-Element.</p>"},{"location":"html/simple/abbr/#best-practices","title":"\ud83e\udde0 Best Practices","text":"Empfehlung Warum? Immer mit <code>title</code>-Attribut Tooltip + maschinenlesbar Nur echte Abk\u00fcrzungen verwenden Keine ganzen S\u00e4tze oder Floskeln Mit <code>lang</code> kennzeichnen, wenn n\u00f6tig Besonders bei Fremdsprachen"},{"location":"html/simple/abbr/#beispiel-mit-sprachangabe","title":"Beispiel mit Sprachangabe:","text":"<pre><code>&lt;abbr title=\"HyperText Markup Language\" lang=\"en\"&gt;HTML&lt;/abbr&gt;\n</code></pre> <p>\ud83d\udc49 Besonders hilfreich f\u00fcr Screenreader, um z.\u202fB. englische Akronyme korrekt auszusprechen.</p>"},{"location":"html/simple/abbr/#barrierefreiheit","title":"\u267f Barrierefreiheit","text":"<ul> <li>Erm\u00f6glicht verst\u00e4ndliche Inhalte f\u00fcr Screenreader-Nutzer:innen</li> <li>Tooltip beim Hover hilft allen Nutzer:innen, die Bedeutung zu verstehen</li> <li>Sehr sinnvoll bei Fachtexten, technischen Begriffen oder internationalen Abk\u00fcrzungen</li> </ul>"},{"location":"html/simple/abbr/#haufige-fehler","title":"\u274c H\u00e4ufige Fehler","text":"Fehler Besser <code>&lt;abbr&gt;</code> ohne <code>title</code> <code>title</code> ist Pflicht f\u00fcr Bedeutung Ganze S\u00e4tze in <code>title</code> Nur Begriff oder Langform hinterlegen Styling statt Bedeutung Nutze <code>&lt;abbr&gt;</code> nur f\u00fcr echte Abk\u00fcrzungen Verzicht bei technischen Begriffen <code>&lt;abbr&gt;</code> aktiv nutzen f\u00fcr Barrierefreiheit"},{"location":"html/simple/abbr/#fazit","title":"\ud83d\udcda Fazit","text":"<p>Das <code>&lt;abbr&gt;</code>-Element bringt Semantik, Zug\u00e4nglichkeit und Verst\u00e4ndlichkeit in deine HTML-Seite. Es ist ein kleines, aber m\u00e4chtiges Werkzeug, um Inhalte klarer, barrierefreier und professioneller darzustellen \u2013 insbesondere in Fachtexten, Dokumentationen und mehrsprachigen Webseiten.</p>"},{"location":"html/simple/blockquote/","title":"<code>&lt;blockquote&gt;</code> \u2013 Zitatblock","text":""},{"location":"html/simple/blockquote/#funktion","title":"\ud83e\udde9 Funktion","text":"<p>Das <code>&lt;blockquote&gt;</code>-Element wird verwendet, um l\u00e4ngere, w\u00f6rtlich \u00fcbernommene Zitate aus externen oder internen Quellen darzustellen. Es ist ein Blockelement, das \u00fcblicherweise visuell einger\u00fcckt erscheint, um den zitierten Text klar vom restlichen Inhalt abzugrenzen.</p> <p>\ud83d\udccc <code>&lt;blockquote&gt;</code> hat eine semantische Bedeutung: Es kennzeichnet Inhalte, die nicht vom Autor selbst stammen, sondern \u00fcbernommen wurden.</p>"},{"location":"html/simple/blockquote/#verwendung","title":"\u2705 Verwendung","text":"<pre><code>&lt;blockquote&gt;\n  \u201eDer einzige Weg, gro\u00dfartige Arbeit zu leisten, ist, zu lieben, was man tut.\u201c\n&lt;/blockquote&gt;\n</code></pre> <p>\ud83d\udc49 Der Browser stellt dies standardm\u00e4\u00dfig einger\u00fcckt oder optisch abgesetzt dar.</p>"},{"location":"html/simple/blockquote/#semantik-einsatzgebiete","title":"\ud83c\udfaf Semantik &amp; Einsatzgebiete","text":"Zweck Beispiel Zitat aus einem Buch/Text \u201eLorem ipsum\u2026\u201c Aussage aus einem Artikel \u201eLaut FAZ vom 01.01.2023...\u201c Redebeitr\u00e4ge / Interviews \u201eIch denke, wir sollten\u2026\u201c Quelle oder Referenz Verlinkung \u00fcber das <code>cite</code>-Attribut"},{"location":"html/simple/blockquote/#attribute","title":"\ud83d\udd27 Attribute","text":"Attribut Beschreibung <code>cite</code> Quelle/URL des Zitats (optional, maschinenlesbar) <code>class</code> F\u00fcr CSS-Klassen zur visuellen Gestaltung <code>id</code> F\u00fcr interne Verlinkung oder JavaScript-Zugriff"},{"location":"html/simple/blockquote/#beispiel-mit-cite","title":"Beispiel mit <code>cite</code>","text":"<pre><code>&lt;blockquote cite=\"https://www.example.com/zitatquelle\"&gt;\n  \u201eVertrauen ist gut, Kontrolle ist besser.\u201c\n&lt;/blockquote&gt;\n</code></pre> <p>\ud83d\udca1 Das <code>cite</code>-Attribut verweist nicht sichtbar im Frontend, aber es hilft Suchmaschinen, Screenreadern und Tools, die Quelle maschinell zu erkennen.</p>"},{"location":"html/simple/blockquote/#visuelles-styling-css","title":"\ud83c\udfa8 Visuelles Styling (CSS)","text":"<pre><code>blockquote {\n  border-left: 4px solid #888;\n  padding-left: 1em;\n  font-style: italic;\n  color: #444;\n  background-color: #f9f9f9;\n}\n</code></pre> <pre><code>&lt;blockquote&gt;\n  \u201eEine gute Nutzererfahrung beginnt bei semantischem HTML.\u201c\n&lt;/blockquote&gt;\n</code></pre>"},{"location":"html/simple/blockquote/#inline-zitate-vs-block-zitate","title":"\ud83e\udde0 Inline-Zitate vs. Block-Zitate","text":"Zweck Element Beispiel L\u00e4ngeres Zitat <code>&lt;blockquote&gt;</code> f\u00fcr mehrere S\u00e4tze oder Abs\u00e4tze Kurzes Zitat im Text <code>&lt;q&gt;</code> \u201eZitierter Satz\u201c im Flie\u00dftext <p>\ud83d\udc49 Tipp: Verwende <code>&lt;q&gt;</code> f\u00fcr einzelne S\u00e4tze oder Wortgruppen direkt im Textfluss. <code>&lt;blockquote&gt;</code> f\u00fcr Abs\u00e4tze oder gr\u00f6\u00dfere Textteile.</p>"},{"location":"html/simple/blockquote/#barrierefreiheit-semantik","title":"\u267f Barrierefreiheit &amp; Semantik","text":"<ul> <li>Screenreader erkennen <code>&lt;blockquote&gt;</code> als Zitat und k\u00fcndigen es ggf. an (z.\u202fB. \u201eZitat Anfang\u201c)</li> <li>Gute Trennung zwischen eigener Meinung und \u00fcbernommenen Inhalten</li> <li>Durch semantische Bedeutung unterst\u00fctzt es barrierefreie Navigation und besseres SEO</li> </ul>"},{"location":"html/simple/blockquote/#haufige-fehler","title":"\u274c H\u00e4ufige Fehler","text":"Fehler Besser <code>&lt;blockquote&gt;</code> f\u00fcr Meinungs\u00e4u\u00dferung Nur verwenden, wenn wirklich zitiert Styling-Zwecke ohne Zitatbedeutung Nutze stattdessen <code>&lt;div class=\"info\"&gt;\u2026&lt;/div&gt;</code> Keine Quellenangabe bei \u00fcbernommenem Text Wenn m\u00f6glich, mit <code>cite</code>-Attribut arbeiten"},{"location":"html/simple/blockquote/#fazit","title":"\ud83d\udcda Fazit","text":"<p><code>&lt;blockquote&gt;</code> ist das korrekte HTML-Element f\u00fcr l\u00e4ngere Zitate, die aus anderen Quellen stammen. Es tr\u00e4gt zur semantischen Klarheit, Barrierefreiheit und strukturellen Qualit\u00e4t deiner Webseite bei \u2013 sowohl f\u00fcr Leser als auch f\u00fcr Maschinen.</p>"},{"location":"html/simple/br/","title":"<code>&lt;br&gt;</code> \u2013 Zeilenumbruch (Break)","text":""},{"location":"html/simple/br/#funktion","title":"\ud83e\udde9 Funktion","text":"<p>Das <code>&lt;br&gt;</code>-Element steht f\u00fcr \u201ebreak\u201c und wird verwendet, um einen manuellen Zeilenumbruch innerhalb eines Textblocks zu erzwingen \u2013 ohne einen neuen Absatz zu beginnen. Es wird vor allem dort eingesetzt, wo ein einfacher Umbruch stilistisch oder inhaltlich notwendig ist, ohne dabei die semantische Bedeutung eines Absatzes zu ver\u00e4ndern.</p> <p>\ud83d\udccc <code>&lt;br&gt;</code> erzeugt nur einen visuellen Zeilenumbruch \u2013 der Inhalt bleibt Teil desselben Absatzes.</p>"},{"location":"html/simple/br/#verwendung","title":"\u2705 Verwendung","text":"<pre><code>&lt;p&gt;\n  Name: Max Mustermann&lt;br /&gt;\n  Stra\u00dfe: Musterweg 1&lt;br /&gt;\n  Ort: 12345 Musterstadt\n&lt;/p&gt;\n</code></pre> <p>\ud83d\udc49 Alle Angaben erscheinen in separaten Zeilen, aber innerhalb desselben <code>&lt;p&gt;</code>-Blocks.</p>"},{"location":"html/simple/br/#besonderheiten","title":"\ud83d\udd27 Besonderheiten","text":"Merkmal Beschreibung Selbstschlie\u00dfend <code>&lt;br&gt;</code> hat kein \u00f6ffnendes/schlie\u00dfendes Paar \u2013 es endet in sich selbst Inline-Element Es wirkt innerhalb von Textfluss Semantikfrei Keine inhaltliche Bedeutung, rein visuell Keine Attribute <code>&lt;br&gt;</code> hat keine typischen Attribute \u2013 in der Regel auch keine <code>class</code>, <code>id</code> o.\u202f\u00c4. n\u00f6tig"},{"location":"html/simple/br/#anwendungsbeispiele","title":"\ud83e\uddea Anwendungsbeispiele","text":""},{"location":"html/simple/br/#1-formatierter-adressblock","title":"1. \ud83d\udcc4 Formatierter Adressblock","text":"<pre><code>&lt;p&gt;\n  Max Mustermann&lt;br /&gt;\n  Beispielstra\u00dfe 5&lt;br /&gt;\n  12345 Musterstadt\n&lt;/p&gt;\n</code></pre>"},{"location":"html/simple/br/#2-liedtext-oder-gedicht","title":"2. \ud83c\udfb5 Liedtext oder Gedicht","text":"<pre><code>&lt;p&gt;\n  Der Mond ist aufgegangen,&lt;br /&gt;\n  die goldnen Sternlein prangen&lt;br /&gt;\n  am Himmel hell und klar.\n&lt;/p&gt;\n</code></pre>"},{"location":"html/simple/br/#3-formulareingabe-mit-etikett","title":"3. \ud83e\uddfe Formulareingabe mit Etikett","text":"<pre><code>&lt;label&gt;\n  Kommentar:&lt;br /&gt;\n  &lt;textarea&gt;&lt;/textarea&gt;\n&lt;/label&gt;\n</code></pre>"},{"location":"html/simple/br/#wann-nicht-br-verwenden","title":"\u26a0\ufe0f Wann nicht <code>&lt;br&gt;</code> verwenden?","text":"Falsch eingesetzt bei... Besser stattdessen: Gliederung von Abs\u00e4tzen <code>&lt;p&gt;</code> verwenden Abst\u00e4nden zwischen Bl\u00f6cken CSS (<code>margin</code>, <code>padding</code>) Strukturierung von Inhalten Semantische Tags (<code>&lt;ul&gt;</code>, <code>&lt;section&gt;</code>, etc.) Layout von Formularen oder Tabellen CSS-Layout (Flexbox, Grid, Table)"},{"location":"html/simple/br/#barrierefreiheit-zuganglichkeit","title":"\u267f Barrierefreiheit &amp; Zug\u00e4nglichkeit","text":"<ul> <li><code>&lt;br&gt;</code> wird von Screenreadern meist als \u201ePause\u201c oder \u201eUmbruch\u201c ohne semantische Pause interpretiert</li> <li>F\u00fcr bedeutungsvolle Trennung (z.\u202fB. Sinnabschnitte, Listen, Themenbl\u00f6cke) sollte man stattdessen strukturierende HTML-Tags verwenden</li> <li>Bei Gedichten oder Liedtexten kann <code>&lt;br&gt;</code> jedoch eine verst\u00e4ndliche Darstellung f\u00f6rdern</li> </ul>"},{"location":"html/simple/br/#haufige-fehler","title":"\u274c H\u00e4ufige Fehler","text":"Fehler Besser Mehrere <code>&lt;br&gt;&lt;br&gt;</code> statt <code>&lt;p&gt;</code> Verwende <code>&lt;p&gt;</code> f\u00fcr echte Abs\u00e4tze Nutzung von <code>&lt;br&gt;</code> f\u00fcr vertikale Abst\u00e4nde Verwende CSS (<code>margin</code>, <code>padding</code>) <code>&lt;br&gt;</code> in Layoutbl\u00f6cken als Positionierung CSS-Layoutmodelle (Flexbox, Grid, etc.)"},{"location":"html/simple/br/#fazit","title":"\ud83d\udcda Fazit","text":"<p>Das <code>&lt;br&gt;</code>-Tag ist ein kleines, aber praktisches HTML-Werkzeug f\u00fcr feine Textformatierungen. Es eignet sich gut f\u00fcr Adresszeilen, Liedtexte, Gedichte oder technische Formulare, sollte aber nicht als Layout-Ersatz oder f\u00fcr semantische Gliederung verwendet werden.</p> <p>\ud83d\udcac Als N\u00e4chstes: M\u00f6chtest du mit <code>&lt;hr&gt;</code>, <code>&lt;mark&gt;</code> oder anderen Inline-Textformatierungen weitermachen?</p>"},{"location":"html/simple/cite/","title":"<code>&lt;cite&gt;</code> \u2013 Quellennachweis / Urheberangabe","text":""},{"location":"html/simple/cite/#funktion","title":"\ud83e\udde9 Funktion","text":"<p>Das <code>&lt;cite&gt;</code>-Element (Citation) dient dazu, die Quelle oder den Urheber eines zitierten Werks anzugeben. Dies kann der Name eines Autors, eines Buchs, Films, Artikels, Musikst\u00fccks, wissenschaftlichen Papiers oder einer Webseite sein.</p> <p>\ud83d\udccc <code>&lt;cite&gt;</code> ist ein semantisches Inline-Element, das die Urheberschaft oder Quelle eines Inhalts kennzeichnet \u2013 nicht den Zitattext selbst!</p>"},{"location":"html/simple/cite/#verwendung","title":"\u2705 Verwendung","text":"<pre><code>&lt;blockquote&gt;\n  \u201eDer Fortschritt lebt vom Austausch des Wissens.\u201c\n  &lt;cite&gt;Albert Einstein&lt;/cite&gt;\n&lt;/blockquote&gt;\n</code></pre> <p>\ud83d\udc49 Der Name \u201eAlbert Einstein\u201c wird als Urheber der Aussage ausgezeichnet \u2013 das <code>&lt;cite&gt;</code> kann auch stilistisch hervorgehoben sein (meist kursiv).</p>"},{"location":"html/simple/cite/#attribute","title":"\ud83d\udd27 Attribute","text":"Attribut Beschreibung <code>class</code> F\u00fcr visuelles Styling via CSS <code>style</code> Inline-Styling bei Bedarf <code>lang</code> Sprachkennung (z.\u202fB. bei fremdsprachigen Werken) <code>id</code> F\u00fcr JavaScript oder Ankerlinks <code>title</code> Tooltip f\u00fcr Zusatzinfos"},{"location":"html/simple/cite/#beispiel-artikelzitierung","title":"\ud83c\udfa8 Beispiel: Artikelzitierung","text":"<pre><code>&lt;p&gt;\n  Mehr zum Thema im Artikel \n  &lt;cite&gt;\u201eDie Zukunft der KI\u201c&lt;/cite&gt; von \n  &lt;strong&gt;Dr. Julia Weber&lt;/strong&gt;, erschienen in der FAZ.\n&lt;/p&gt;\n</code></pre> <p>\ud83d\udc49 Das Werk wird mit <code>&lt;cite&gt;</code> markiert, die Person ggf. mit <code>&lt;strong&gt;</code> oder Text.</p>"},{"location":"html/simple/cite/#gultige-inhalte-fur-cite","title":"\ud83d\udcda G\u00fcltige Inhalte f\u00fcr <code>&lt;cite&gt;</code>","text":"<p>Laut HTML-Spezifikation eignet sich <code>&lt;cite&gt;</code> f\u00fcr:</p> <ul> <li>Buch- oder Artikeltitel</li> <li>Filme, Serien, Videos</li> <li>Lieder oder Musikst\u00fccke</li> <li>Webseiten oder Blogposts</li> <li>Wissenschaftliche Arbeiten</li> <li>Gem\u00e4lde, Kunstwerke, Theaterst\u00fccke</li> </ul>"},{"location":"html/simple/cite/#beispiel-webseite-zitieren","title":"\u2705 Beispiel: Webseite zitieren","text":"<pre><code>&lt;p&gt;Weitere Informationen findest du auf &lt;cite&gt;MDN Web Docs&lt;/cite&gt;.&lt;/p&gt;\n</code></pre>"},{"location":"html/simple/cite/#beispiel-buch-zitieren","title":"\u2705 Beispiel: Buch zitieren","text":"<pre><code>&lt;p&gt;In &lt;cite&gt;Designing Data-Intensive Applications&lt;/cite&gt; wird erkl\u00e4rt, wie verteilte Systeme funktionieren.&lt;/p&gt;\n</code></pre>"},{"location":"html/simple/cite/#achtung-nicht-fur-zitate-selbst","title":"\u26a0\ufe0f Achtung: Nicht f\u00fcr \u201eZitate\u201c selbst","text":"Situation Element Inhalt des Zitats <code>&lt;q&gt;</code> oder <code>&lt;blockquote&gt;</code> Quelle oder Urheber des Zitats <code>&lt;cite&gt;</code> Text ohne Urheberbezug Kein <code>&lt;cite&gt;</code> n\u00f6tig"},{"location":"html/simple/cite/#barrierefreiheit-seo","title":"\u267f Barrierefreiheit &amp; SEO","text":"<ul> <li><code>&lt;cite&gt;</code> gibt Screenreadern und Suchmaschinen zus\u00e4tzliche semantische Hinweise \u00fcber Urheberschaft</li> <li>Es verbessert die Struktur von Inhalten und kann in strukturierte Datenformate wie JSON-LD eingebunden werden</li> </ul>"},{"location":"html/simple/cite/#haufige-fehler","title":"\u274c H\u00e4ufige Fehler","text":"Fehler Korrekte Alternative <code>&lt;cite&gt;</code> f\u00fcr markierte Textstellen ohne Quelle Nutze <code>&lt;mark&gt;</code>, <code>&lt;strong&gt;</code> oder <code>&lt;em&gt;</code> stattdessen Keine Auszeichnung von Werk- oder Urhebern Verwende <code>&lt;cite&gt;</code>, wo es inhaltlich passt <code>&lt;cite&gt;</code> um ganzen Absatz <code>&lt;cite&gt;</code> ist ein Inline-Element, nicht blockbasiert"},{"location":"html/simple/cite/#fazit","title":"\ud83d\udcda Fazit","text":"<p>Das <code>&lt;cite&gt;</code>-Element bietet eine semantisch saubere und barrierefreie M\u00f6glichkeit, um Quellen, Urheber oder Werke kenntlich zu machen. Es ist wichtig f\u00fcr strukturierte Inhalte, wissenschaftliche Texte, Blogbeitr\u00e4ge und allgemein alle Inhalte, bei denen die Ursprungsquelle hervorgehoben werden sollte.</p>"},{"location":"html/simple/code/","title":"<code>&lt;code&gt;</code> \u2013 Quelltext-/Code-Auszeichnung","text":""},{"location":"html/simple/code/#funktion","title":"\ud83e\udde9 Funktion","text":"<p>Das <code>&lt;code&gt;</code>-Element dient dazu, Quelltext, Befehle, Variablen oder Funktionen inline oder blockweise semantisch zu kennzeichnen. Es hebt technische Inhalte im Textfluss hervor und macht sie maschinell erkennbar \u2013 ideal f\u00fcr Dokumentationen, Anleitungen und Entwicklertexte.</p> <p>\ud83d\udccc <code>&lt;code&gt;</code> zeigt: \u201eDieser Text ist Programmcode oder technischer Ausdruck.\u201c Es ist ein semantisches Inline-Element, das bei Bedarf mit <code>&lt;pre&gt;</code> oder <code>&lt;samp&gt;</code> kombiniert werden kann.</p>"},{"location":"html/simple/code/#verwendung-inline","title":"\u2705 Verwendung (Inline)","text":"<pre><code>&lt;p&gt;Benutze die Funktion &lt;code&gt;print()&lt;/code&gt;, um Text in Python auszugeben.&lt;/p&gt;\n</code></pre> <p>\ud83d\udc49 Der Ausdruck <code>print()</code> wird visuell hervorgehoben (meist mit Monospace-Schrift) und semantisch als Code erkannt.</p>"},{"location":"html/simple/code/#verwendung-block-mit-pre","title":"\u2705 Verwendung (Block mit <code>&lt;pre&gt;</code>)","text":"<pre><code>&lt;pre&gt;&lt;code&gt;\ndef begruessung():\n    print(\"Hallo Welt!\")\n&lt;/code&gt;&lt;/pre&gt;\n</code></pre> <p>\ud83d\udc49 Mit <code>&lt;pre&gt;</code> bleibt die Formatierung (Einr\u00fcckung, Zeilen) genau erhalten \u2013 ideal f\u00fcr mehrzeilige Codebl\u00f6cke.</p>"},{"location":"html/simple/code/#attribute","title":"\ud83d\udd27 Attribute","text":"Attribut Beschreibung <code>class</code> F\u00fcr CSS-Styling oder Syntax Highlighting (z.\u202fB. <code>class=\"language-python\"</code>) <code>id</code> F\u00fcr JavaScript-Zugriffe oder Linkziele <code>style</code> Direktes Inline-Styling (z.\u202fB. <code>color</code>, <code>background</code>) <code>title</code> Optionaler Hinweistext (Tooltip)"},{"location":"html/simple/code/#beispiel-mit-css-styling","title":"\ud83c\udfa8 Beispiel mit CSS-Styling","text":"<pre><code>&lt;code class=\"cmd\"&gt;npm install express&lt;/code&gt;\n</code></pre> <pre><code>.cmd {\n  background-color: #f4f4f4;\n  color: #c7254e;\n  font-family: monospace;\n  padding: 2px 4px;\n  border-radius: 4px;\n}\n</code></pre> <p>\ud83d\udc49 So wird Code in Flie\u00dftext visuell hervorgehoben.</p>"},{"location":"html/simple/code/#unterschied-zu-verwandten-tags","title":"\ud83e\udde0 Unterschied zu verwandten Tags","text":"Element Zweck Typischer Einsatz <code>&lt;code&gt;</code> Quelltext &amp; techn. Begriffe Inline oder mit <code>&lt;pre&gt;</code> <code>&lt;pre&gt;</code> Bewahrt Formatierung (Whitespace, Zeilen) F\u00fcr l\u00e4ngere, formatierte Bl\u00f6cke <code>&lt;samp&gt;</code> Konsolenausgabe, Beispielausgaben z.\u202fB. \u201eZugriff verweigert\u201c <code>&lt;kbd&gt;</code> Tastatureingaben z.\u202fB. <code>&lt;kbd&gt;Strg&lt;/kbd&gt; + &lt;kbd&gt;S&lt;/kbd&gt;</code>"},{"location":"html/simple/code/#weitere-beispiele","title":"\ud83e\uddea Weitere Beispiele","text":""},{"location":"html/simple/code/#python-code-in-einer-doku","title":"Python-Code in einer Doku","text":"<pre><code>&lt;pre&gt;&lt;code class=\"language-python\"&gt;\nfor i in range(5):\n    print(\"Hallo\")\n&lt;/code&gt;&lt;/pre&gt;\n</code></pre>"},{"location":"html/simple/code/#html-tag-im-flietext","title":"HTML-Tag im Flie\u00dftext","text":"<pre><code>&lt;p&gt;Ein Absatz wird mit dem Tag &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; definiert.&lt;/p&gt;\n</code></pre>"},{"location":"html/simple/code/#barrierefreiheit-seo","title":"\u267f Barrierefreiheit &amp; SEO","text":"<ul> <li>Screenreader erkennen <code>&lt;code&gt;</code> als Quelltext und lesen es ggf. anders vor</li> <li>Mit guter Struktur (z.\u202fB. <code>&lt;pre&gt;</code> + ARIA-Rollen) sind Codebeispiele besser navigierbar</li> <li>Auch Suchmaschinen erfassen <code>&lt;code&gt;</code>-Elemente f\u00fcr technische Inhalte und Snippets</li> </ul>"},{"location":"html/simple/code/#haufige-fehler","title":"\u274c H\u00e4ufige Fehler","text":"Fehler Besser Formatierter Code ohne <code>&lt;pre&gt;</code> <code>&lt;pre&gt;&lt;code&gt;</code> verwenden f\u00fcr Blockcode <code>&lt;code&gt;</code> f\u00fcr Stilzwecke ohne Bedeutung Nur bei echtem Quelltext verwenden Kombination von <code>&lt;code&gt;</code> mit <code>&lt;b&gt;</code>/<code>&lt;i&gt;</code> Lieber semantisch korrekt mit CSS gestalten Kein Monospace-Styling Browser setzen dies standardm\u00e4\u00dfig, ggf. erg\u00e4nzen"},{"location":"html/simple/code/#fazit","title":"\ud83d\udcda Fazit","text":"<p>Das <code>&lt;code&gt;</code>-Element ist ein zentrales HTML-Werkzeug f\u00fcr Dokumentation, Tutorials, API-Beschreibungen und technische Blogs. Es sorgt f\u00fcr klare, semantisch korrekte Kennzeichnung von Quelltext \u2013 in Kombination mit <code>&lt;pre&gt;</code>, CSS und ggf. JavaScript auch ideal f\u00fcr Syntax-Highlighting.</p>"},{"location":"html/simple/dfn/","title":"<code>&lt;dfn&gt;</code> \u2013 Begriff definieren (Definition Element)","text":""},{"location":"html/simple/dfn/#funktion","title":"\ud83e\udde9 Funktion","text":"<p>Das <code>&lt;dfn&gt;</code>-Element wird verwendet, um einen Begriff zu kennzeichnen, der an dieser Stelle definiert oder erkl\u00e4rt wird. Es hebt semantisch hervor, dass es sich um den ersten Auftritt eines Begriffs handelt, der f\u00fcr das Verst\u00e4ndnis des Inhalts wichtig ist.</p> <p>\ud83d\udccc <code>&lt;dfn&gt;</code> hilft Lesern, Screenreadern und Suchmaschinen, Definitionen zu erkennen und besser zu interpretieren.</p>"},{"location":"html/simple/dfn/#verwendung","title":"\u2705 Verwendung","text":"<pre><code>&lt;p&gt;\n  Ein &lt;dfn id=\"algorithmus\"&gt;Algorithmus&lt;/dfn&gt; ist eine Schritt-f\u00fcr-Schritt-Anleitung zur L\u00f6sung eines Problems.\n&lt;/p&gt;\n</code></pre> <p>\ud83d\udc49 Der Begriff \u201eAlgorithmus\u201c wird hier definiert \u2013 durch das <code>&lt;dfn&gt;</code> erh\u00e4lt er semantische Bedeutung.</p>"},{"location":"html/simple/dfn/#attribute","title":"\ud83d\udd27 Attribute","text":"Attribut Beschreibung <code>id</code> Wichtig, um z.\u202fB. mit <code>aria-describedby</code> oder internen Links darauf zu verweisen <code>title</code> Zus\u00e4tzliche Beschreibung als Tooltip (optional) <code>lang</code> Sprache des Begriffs (z.\u202fB. <code>lang=\"en\"</code> bei fremdsprachigen Termini) <code>class</code> F\u00fcr visuelles Styling <code>style</code> Direktes CSS-Styling (Inline)"},{"location":"html/simple/dfn/#beispiel-mit-tooltip-und-styling","title":"\ud83c\udfa8 Beispiel mit Tooltip und Styling","text":"<pre><code>&lt;dfn id=\"ml\" title=\"Machine Learning\"&gt;ML&lt;/dfn&gt;\n</code></pre> <pre><code>dfn {\n  font-style: italic;\n  border-bottom: 1px dotted #999;\n  cursor: help;\n}\n</code></pre> <p>\ud83d\udc49 So wird der definierte Begriff optisch kenntlich gemacht, z.\u202fB. in Glossaren oder Fachtexten.</p>"},{"location":"html/simple/dfn/#best-practices","title":"\ud83e\udde0 Best Practices","text":"Empfehlung Warum? Nur beim ersten Auftreten im Text <code>&lt;dfn&gt;</code> ist f\u00fcr die Einf\u00fchrung eines Begriffs gedacht Mit <code>id</code> kombinieren Erm\u00f6glicht Link-Ziele f\u00fcr Glossare oder Referenzen In Kombination mit <code>aria-describedby</code> oder <code>&lt;abbr&gt;</code> nutzbar F\u00fcr barrierefreie Begriffsdefinitionen"},{"location":"html/simple/dfn/#beispiel-definition-mit-bezug","title":"\ud83d\udcda Beispiel: Definition mit Bezug","text":"<pre><code>&lt;p&gt;\n  Das Konzept des &lt;dfn id=\"scraping\"&gt;Scrapings&lt;/dfn&gt; beschreibt das automatisierte Auslesen von Webseiteninhalten.\n&lt;/p&gt;\n\n&lt;p&gt;\n  Weitere Informationen zu &lt;a href=\"#scraping\"&gt;Scraping&lt;/a&gt; findest du im Glossar.\n&lt;/p&gt;\n</code></pre>"},{"location":"html/simple/dfn/#barrierefreiheit-seo","title":"\u267f Barrierefreiheit &amp; SEO","text":"<ul> <li>Screenreader erkennen <code>&lt;dfn&gt;</code> als \u201eDefinierter Begriff\u201c (sofern korrekt verwendet)</li> <li>In Verbindung mit <code>title</code> oder einem <code>&lt;abbr&gt;</code> kann die Bedeutung zus\u00e4tzlich vorgelesen oder angezeigt werden</li> <li>Strukturierte Begriffsdefinitionen sind gut f\u00fcr Suchmaschinen, insbesondere bei technischem oder wissenschaftlichem Inhalt</li> </ul>"},{"location":"html/simple/dfn/#haufige-fehler","title":"\u274c H\u00e4ufige Fehler","text":"Fehler Besser <code>&lt;dfn&gt;</code> f\u00fcr jedes Vorkommen des Begriffs Nur f\u00fcr die erste Erkl\u00e4rung oder Definition verwenden Keine Verbindung zu erkl\u00e4rendem Text Immer mit Erkl\u00e4rung oder Beschreibung verbinden Verwendung als Stilmittel (nur visuell) Daf\u00fcr lieber <code>&lt;span&gt;</code> + <code>class</code> nutzen"},{"location":"html/simple/dfn/#dfn-vs-abbr-vs-var","title":"\u2705 <code>&lt;dfn&gt;</code> vs. <code>&lt;abbr&gt;</code> vs. <code>&lt;var&gt;</code>","text":"Element Zweck Typischer Einsatz <code>&lt;dfn&gt;</code> Definition eines Begriffs Erster Auftritt eines Fachbegriffs <code>&lt;abbr&gt;</code> Abk\u00fcrzung mit Langform z.\u202fB. \u201eHTML\u201c <code>&lt;var&gt;</code> Variable/Symbol z.\u202fB. in Formeln, Code, Mathematik"},{"location":"html/simple/dfn/#fazit","title":"\ud83d\udcda Fazit","text":"<p><code>&lt;dfn&gt;</code> ist ein semantisch starkes HTML-Element, das hilft, Begriffe im Kontext korrekt zu definieren. Es verbessert sowohl die Zug\u00e4nglichkeit als auch die Struktur technischer, wissenschaftlicher und erkl\u00e4render Inhalte.</p>"},{"location":"html/simple/h/","title":"<code>&lt;h1&gt;</code> bis <code>&lt;h6&gt;</code> \u2013 HTML-\u00dcberschriften","text":""},{"location":"html/simple/h/#funktion","title":"\ud83e\udde9 Funktion","text":"<p>HTML-\u00dcberschriften <code>&lt;h1&gt;</code> bis <code>&lt;h6&gt;</code> sind strukturierende Elemente, die Inhalte hierarchisch gliedern. Sie geben einem Dokument semantische Struktur, erleichtern die Lesbarkeit, verbessern die Barrierefreiheit und sind entscheidend f\u00fcr SEO (Suchmaschinenoptimierung).</p> <p>\ud83d\udccc Eine gut strukturierte Seite nutzt \u00dcberschriften wie ein Inhaltsverzeichnis \u2013 von der Haupt\u00fcberschrift bis zu feinen Unterpunkten.</p>"},{"location":"html/simple/h/#hierarchie-bedeutung","title":"\ud83d\udd22 Hierarchie &amp; Bedeutung","text":"Tag Ebene Typischer Einsatz <code>&lt;h1&gt;</code> Haupttitel Seitentitel / Dokument\u00fcberschrift <code>&lt;h2&gt;</code> 1. Unterebene Gro\u00dfe Inhaltsbl\u00f6cke / Hauptabschnitte <code>&lt;h3&gt;</code> 2. Unterebene Untergliederung innerhalb eines Themas <code>&lt;h4&gt;</code> 3. Unterebene Feinere Abs\u00e4tze, Unterpunkte <code>&lt;h5&gt;</code> 4. Unterebene Selten genutzt, bei komplexen Layouts <code>&lt;h6&gt;</code> 5. Unterebene Sehr kleine Gliederungseinheiten <p>\u27a1 \u00dcberschriften sollen logisch und chronologisch gestaffelt werden \u2013 nicht springen (z.\u202fB. von <code>&lt;h2&gt;</code> direkt zu <code>&lt;h5&gt;</code> vermeiden).</p>"},{"location":"html/simple/h/#syntax-verwendung","title":"\u2705 Syntax &amp; Verwendung","text":"<pre><code>&lt;h1&gt;Was ist HTML?&lt;/h1&gt;\n  &lt;h2&gt;Einf\u00fchrung&lt;/h2&gt;\n    &lt;h3&gt;Was bedeutet Markup?&lt;/h3&gt;\n    &lt;h3&gt;Wof\u00fcr wird HTML verwendet?&lt;/h3&gt;\n  &lt;h2&gt;HTML-Grundstruktur&lt;/h2&gt;\n    &lt;h3&gt;Das head-Element&lt;/h3&gt;\n    &lt;h3&gt;Das body-Element&lt;/h3&gt;\n</code></pre>"},{"location":"html/simple/h/#wichtig","title":"Wichtig:","text":"<ul> <li>Die <code>&lt;h1&gt;</code> sollte nur einmal pro Seite verwendet werden \u2013 sie beschreibt den zentralen Inhalt.</li> <li>Verwende \u00dcberschriften immer mit inhaltlicher Bedeutung \u2013 nicht nur zum Stylen (daf\u00fcr CSS nutzen).</li> <li>Der sichtbare Text in \u00dcberschriften ist relevant f\u00fcr SEO \u2013 w\u00e4hle pr\u00e4gnante, keyword-relevante Formulierungen.</li> </ul>"},{"location":"html/simple/h/#semantik-seo","title":"\ud83c\udfaf Semantik &amp; SEO","text":"<ul> <li>Google und andere Suchmaschinen analysieren die Struktur anhand der \u00dcberschriften-Hierarchie.</li> <li>Eine Seite mit klarer Gliederung wird besser verstanden und indexiert.</li> <li>Screenreader nutzen \u00dcberschriften zur Navigation f\u00fcr sehbehinderte Menschen.</li> <li>Auch Suchergebnisse und Inhaltsvorschauen (z.\u202fB. Featured Snippets) profitieren von klaren <code>&lt;h1&gt;</code>- und <code>&lt;h2&gt;</code>-Strukturen.</li> </ul>"},{"location":"html/simple/h/#mogliche-attribute","title":"\ud83d\udd27 M\u00f6gliche Attribute","text":"Attribut Beschreibung <code>id</code> Erm\u00f6glicht direkte Verlinkung zu einer \u00dcberschrift (z.\u202fB. Sprunganker mit <code>#</code>) <code>class</code> Zuweisung einer CSS-Klasse f\u00fcr individuelles Styling <code>style</code> Inline-Styling (nicht empfohlen bei gr\u00f6\u00dferen Projekten) <code>title</code> Zus\u00e4tzlicher Tooltip-Text beim \u00dcberfahren der \u00dcberschrift <code>tabindex</code> Erm\u00f6glicht Tastaturfokus auf \u00dcberschrift (optional bei interaktiven Elementen)"},{"location":"html/simple/h/#beispiel-mit-css-klasse","title":"\ud83d\udd8c\ufe0f Beispiel mit CSS-Klasse","text":"<pre><code>&lt;h2 class=\"kapitel\"&gt;Einleitung&lt;/h2&gt;\n</code></pre> <pre><code>.kapitel {\n  color: #3366cc;\n  font-size: 1.6rem;\n  margin-bottom: 0.8em;\n}\n</code></pre>"},{"location":"html/simple/h/#haufige-fehler","title":"\u274c H\u00e4ufige Fehler","text":"Fehler Besser Mehrere <code>&lt;h1&gt;</code> pro Seite Nur ein <code>&lt;h1&gt;</code>, danach <code>&lt;h2&gt;</code>, <code>&lt;h3&gt;</code>, ... <code>&lt;h3&gt;</code> ohne vorheriges <code>&lt;h2&gt;</code> \u00dcberschriften hierarchisch aufbauen Verwendung von <code>&lt;h1&gt;</code> nur wegen Schriftgr\u00f6\u00dfe Stil per CSS definieren, nicht per Bedeutung Keine \u00dcberschriften auf der Seite Struktur fehlt \u2192 schlecht f\u00fcr SEO &amp; UX"},{"location":"html/simple/h/#barrierefreiheit","title":"\u267f Barrierefreiheit","text":"<ul> <li>Screenreader-Nutzer k\u00f6nnen per Tastatur von \u00dcberschrift zu \u00dcberschrift springen</li> <li>Eine logische \u00dcberschriftenstruktur ist ein Muss f\u00fcr barrierefreie Seiten</li> <li><code>&lt;h1&gt;</code> sollte das erste Element im sichtbaren Inhalt sein (nach <code>&lt;header&gt;</code> oder <code>&lt;nav&gt;</code>)</li> </ul>"},{"location":"html/simple/h/#fazit","title":"\ud83d\udcda Fazit","text":"<p>HTML-\u00dcberschriften sind mehr als nur gro\u00dfe Texte \u2013 sie gliedern Inhalte, geben Struktur, helfen bei Navigation und verbessern die Auffindbarkeit deiner Seiten im Web. Verwende sie sorgf\u00e4ltig, durchdacht und hierarchisch \u2013 sowohl f\u00fcr Leser als auch f\u00fcr Maschinen.</p>"},{"location":"html/simple/hr/","title":"<code>&lt;hr&gt;</code> \u2013 Horizontale Trennlinie (Horizontal Rule)","text":""},{"location":"html/simple/hr/#funktion","title":"\ud83e\udde9 Funktion","text":"<p>Das <code>&lt;hr&gt;</code>-Element steht f\u00fcr \u201eHorizontal Rule\u201c und wird verwendet, um eine visuelle und semantische Trennung zwischen zwei Themen oder Abschnitten innerhalb eines Dokuments darzustellen. In modernen HTML5-Seiten tr\u00e4gt <code>&lt;hr&gt;</code> zus\u00e4tzlich semantische Bedeutung: Es signalisiert einen thematischen Bruch oder eine inhaltliche Z\u00e4sur im Flie\u00dftext.</p> <p>\ud83d\udccc <code>&lt;hr&gt;</code> trennt Inhalte nicht nur optisch, sondern auch logisch \u2013 \u00e4hnlich wie ein Kapitelumbruch im Buch.</p>"},{"location":"html/simple/hr/#verwendung","title":"\u2705 Verwendung","text":"<pre><code>&lt;p&gt;Ein Thema&lt;/p&gt;\n&lt;hr /&gt;\n&lt;p&gt;Neues Thema&lt;/p&gt;\n</code></pre> <p>\ud83d\udc49 Der horizontale Strich zeigt an, dass der folgende Textabschnitt inhaltlich unabh\u00e4ngig oder thematisch abgesetzt ist.</p>"},{"location":"html/simple/hr/#eigenschaften","title":"\ud83d\udd27 Eigenschaften","text":"Merkmal Beschreibung Selbstschlie\u00dfend <code>&lt;hr&gt;</code> hat kein schlie\u00dfendes Tag \u2013 es ist ein leeres Element Block-Level Es nimmt standardm\u00e4\u00dfig die volle Breite seines Containers ein Visuell Wird vom Browser meist als graue Linie dargestellt (per CSS anpassbar) Semantik Seit HTML5: thematische Trennung eines Dokuments, z.\u202fB. zwischen Hauptinhalt und Fu\u00dfzeile"},{"location":"html/simple/hr/#beispiel-mit-css-styling","title":"\ud83c\udfa8 Beispiel mit CSS-Styling","text":"<pre><code>&lt;hr class=\"trennung\" /&gt;\n</code></pre> <pre><code>.trennung {\n  border: none;\n  height: 2px;\n  background-color: #333;\n  margin: 2em 0;\n}\n</code></pre> <p>\ud83d\udc49 So kann <code>&lt;hr&gt;</code> optisch an das Design angepasst werden (Dicke, Farbe, Abstand etc.).</p>"},{"location":"html/simple/hr/#typische-einsatzbereiche","title":"\ud83d\udcd0 Typische Einsatzbereiche","text":"Einsatz Zweck Zwischen Abs\u00e4tzen Thematische Trennung Vor einem Footer oder Fazit Abgrenzung vom Hauptinhalt In Blogartikeln oder Newsseiten Abschnittswechsel kennzeichnen Innerhalb von Formularen Inhaltliche Gruppierung (besser mit <code>&lt;fieldset&gt;</code>)"},{"location":"html/simple/hr/#barrierefreiheit-semantik","title":"\u267f Barrierefreiheit &amp; Semantik","text":"<ul> <li>Screenreader interpretieren <code>&lt;hr&gt;</code> als thematische Trennlinie \u2013 z.\u202fB. \u201eTrennung\u201c oder \u201eHorizontale Linie\u201c</li> <li>Das kann helfen, Inhalte besser einzuordnen und Struktur erkennbar zu machen</li> <li>In l\u00e4ngeren Texten oder One-Pager-Seiten ist es hilfreich, damit der Nutzer die gedankliche Gliederung nachvollziehen kann</li> </ul>"},{"location":"html/simple/hr/#haufige-fehler","title":"\u274c H\u00e4ufige Fehler","text":"Fehler Besser Verwendung als Design-Ersatz (Layout) Nutze CSS mit <code>&lt;div&gt;</code> oder <code>border</code> Mehrere <code>&lt;hr&gt;</code> ohne inhaltliche Funktion Nur einsetzen, wenn es eine Trennfunktion erf\u00fcllt Styling mit Inline-CSS \u00fcberall Lieber per Klasse und externem Stylesheet"},{"location":"html/simple/hr/#fazit","title":"\ud83d\udcda Fazit","text":"<p>Das <code>&lt;hr&gt;</code>-Tag ist ein visuelles und semantisches Werkzeug zur Strukturierung von Inhalten. Es signalisiert nicht nur einen Abschnittswechsel, sondern verbessert auch die Lesbarkeit und barrierefreie Struktur von Webseiten \u2013 vorausgesetzt, es wird sinnvoll und nicht rein dekorativ eingesetzt.</p>"},{"location":"html/simple/kbd/","title":"<code>&lt;kbd&gt;</code> \u2013 Tastatureingabe anzeigen","text":""},{"location":"html/simple/kbd/#funktion","title":"\ud83e\udde9 Funktion","text":"<p>Das <code>&lt;kbd&gt;</code>-Element (Keyboard Input) wird verwendet, um Tasteneingaben oder Tastenkombinationen darzustellen. Typischerweise wird der Text in Monospace-Schrift angezeigt \u2013 oft stilisiert wie eine Taste.</p> <p>\ud83d\udccc Ideal f\u00fcr Anleitungen, Tutorials, Shortcuts oder Formulare mit Tastatureingabe.</p>"},{"location":"html/simple/kbd/#verwendung","title":"\u2705 Verwendung","text":"<pre><code>&lt;p&gt;Dr\u00fccke &lt;kbd&gt;Strg&lt;/kbd&gt; + &lt;kbd&gt;S&lt;/kbd&gt;, um zu speichern.&lt;/p&gt;\n</code></pre> <p>\ud83d\udc49 So entsteht ein klar erkennbares Tastenk\u00fcrzel.</p>"},{"location":"html/simple/kbd/#attribute","title":"\ud83d\udd27 Attribute","text":"Attribut Beschreibung <code>class</code> F\u00fcr Styling z.\u202fB. als Taste <code>id</code> F\u00fcr Interaktionen mit JS <code>title</code> Tooltip zur Zusatzinfo"},{"location":"html/simple/kbd/#beispiel-mit-css","title":"\ud83c\udfa8 Beispiel mit CSS","text":"<pre><code>kbd {\n  background: #eee;\n  border: 1px solid #ccc;\n  padding: 2px 5px;\n  border-radius: 3px;\n  font-family: monospace;\n}\n</code></pre>"},{"location":"html/simple/kbd/#typische-einsatzbereiche","title":"\ud83e\udde0 Typische Einsatzbereiche","text":"<ul> <li>Keyboard-Shortcuts</li> <li>Text-Editor-Befehle</li> <li>Formulareingaben</li> <li>Barrierearme Navigationserkl\u00e4rungen</li> </ul>"},{"location":"html/simple/kbd/#fehler-vermeiden","title":"\u274c Fehler vermeiden","text":"Fehler Besser Nur <code>&lt;code&gt;</code> f\u00fcr Tastenk\u00fcrzel Verwende <code>&lt;kbd&gt;</code> f\u00fcr Eingaben Lange Texte im <code>&lt;kbd&gt;</code> Nur f\u00fcr konkrete Tasten gedacht"},{"location":"html/simple/kbd/#fazit","title":"\ud83d\udcda Fazit","text":"<p>Nutze <code>&lt;kbd&gt;</code>, wenn du dem Nutzer explizit Tasten oder Kombinationen zeigen willst \u2013 ideal f\u00fcr UX und Dokumentation.</p>"},{"location":"html/simple/mark/","title":"<code>&lt;mark&gt;</code> \u2013 Hervorgehobener Text","text":""},{"location":"html/simple/mark/#funktion","title":"\ud83e\udde9 Funktion","text":"<p>Das <code>&lt;mark&gt;</code>-Element wird verwendet, um Textstellen hervorzuheben, die f\u00fcr den aktuellen Zusammenhang besonders relevant oder auff\u00e4llig sind. Standardm\u00e4\u00dfig erscheint der Text mit einem gelben Hintergrund, \u00e4hnlich wie bei einem Textmarker.</p> <p>\ud83d\udccc Semantisch bedeutet <code>&lt;mark&gt;</code>, dass der markierte Text eine tempor\u00e4re Relevanz hat \u2013 etwa zur Hervorhebung von Suchbegriffen oder aktuellen Kontextbez\u00fcgen.</p>"},{"location":"html/simple/mark/#verwendung","title":"\u2705 Verwendung","text":"<pre><code>&lt;p&gt;Sie haben nach &lt;mark&gt;Maschinelles Lernen&lt;/mark&gt; gesucht.&lt;/p&gt;\n</code></pre> <p>\ud83d\udc49 Der markierte Ausdruck f\u00e4llt visuell ins Auge und signalisiert: Dieser Text ist in diesem Moment besonders wichtig.</p>"},{"location":"html/simple/mark/#semantische-bedeutung","title":"\ud83c\udfaf Semantische Bedeutung","text":"Einsatzgebiet Beispiel Suchergebnisse Markierte Treffer im Text Kommentierte \u00c4nderungen / Redaktionen Neu hinzugef\u00fcgter oder ge\u00e4nderter Text Fokus auf Begriffen bei Tooltips, Glossaren Begriffe bei Mouseover oder Kontextbezug Interaktive Lernumgebungen Markierte L\u00f6sungen oder Hinweise"},{"location":"html/simple/mark/#attribute","title":"\ud83d\udd27 Attribute","text":"Attribut Beschreibung <code>class</code> F\u00fcr CSS-Styling (z.\u202fB. Farbe \u00e4ndern) <code>style</code> Direktes Inline-Styling <code>id</code> Identifikation f\u00fcr JavaScript <code>lang</code> Sprachkennung f\u00fcr Screenreader <code>title</code> Hinweistext bei Mouseover"},{"location":"html/simple/mark/#beispiel-mit-css","title":"\ud83c\udfa8 Beispiel mit CSS","text":"<pre><code>&lt;p&gt;\n  Die Variable &lt;mark class=\"code-hint\"&gt;x&lt;/mark&gt; repr\u00e4sentiert das Ergebnis.\n&lt;/p&gt;\n</code></pre> <pre><code>.code-hint {\n  background-color: lightgreen;\n  color: black;\n  font-weight: bold;\n}\n</code></pre> <p>\ud83d\udc49 Mit CSS kannst du <code>&lt;mark&gt;</code> an das Design deiner Seite anpassen (z.\u202fB. bei dunklen Hintergr\u00fcnden).</p>"},{"location":"html/simple/mark/#unterschied-zu-anderen-hervorhebungen","title":"\u2696\ufe0f Unterschied zu anderen Hervorhebungen","text":"Element Bedeutung Stil Verwendung <code>&lt;mark&gt;</code> Tempor\u00e4r relevant im Kontext Gelb Suchtreffer, aktuelle Hinweise <code>&lt;strong&gt;</code> Wichtigkeit / Dringlichkeit Fett Warnungen, Anweisungen <code>&lt;em&gt;</code> Betonung Kursiv Sprachlich betonte Passagen <code>&lt;span&gt;</code> Keine Semantik \u2013 rein visuell beliebig Frei f\u00fcr Design &amp; CSS"},{"location":"html/simple/mark/#barrierefreiheit-semantik","title":"\u267f Barrierefreiheit &amp; Semantik","text":"<ul> <li>Screenreader geben <code>&lt;mark&gt;</code>-Inhalte m\u00f6glicherweise als \u201ehervorgehoben\u201c aus \u2013 je nach Unterst\u00fctzung</li> <li>F\u00fcr barrierefreie Hervorhebungen sollte <code>&lt;mark&gt;</code> mit zus\u00e4tzlichem Kontext oder <code>aria-label</code> erg\u00e4nzt werden, wenn n\u00f6tig</li> <li>Visuell sollte der Kontrast zum Text ausreichend hoch sein \u2192 Kontrast mit CSS ggf. anpassen</li> </ul>"},{"location":"html/simple/mark/#haufige-fehler","title":"\u274c H\u00e4ufige Fehler","text":"Fehler Besser <code>&lt;mark&gt;</code> als reines Stilmittel Nur verwenden, wenn Text inhaltlich relevant ist Markierung ohne Aussage oder Kontext Lieber <code>&lt;span&gt;</code> + CSS nutzen Zu viele Markierungen im Flie\u00dftext Selektiv &amp; gezielt einsetzen Geringer Farbkontrast bei Custom-Styling Gute Lesbarkeit und Kontrast sicherstellen"},{"location":"html/simple/mark/#fazit","title":"\ud83d\udcda Fazit","text":"<p>Das <code>&lt;mark&gt;</code>-Element ist ein semantisch sinnvolles Werkzeug, um Textpassagen hervorzuheben, die im aktuellen Kontext besondere Aufmerksamkeit verdienen. Es kombiniert visuelle Wirkung mit semantischer Aussagekraft \u2013 ideal f\u00fcr Suchanwendungen, Lernplattformen, Lesef\u00fchrung und interaktive Interfaces.</p>"},{"location":"html/simple/p/","title":"<code>&lt;p&gt;</code> \u2013 Absatz (Paragraph)","text":""},{"location":"html/simple/p/#funktion","title":"\ud83e\udde9 Funktion","text":"<p>Das <code>&lt;p&gt;</code>-Element steht f\u00fcr \u201eParagraph\u201c und wird verwendet, um Flie\u00dftext in Abs\u00e4tze zu gliedern. Es sorgt f\u00fcr lesbare, semantisch getrennte Textbl\u00f6cke, wie man sie aus klassischen Dokumenten oder B\u00fcchern kennt.</p> <p>\ud83d\udccc Jeder <code>&lt;p&gt;</code>-Block stellt einen eigenst\u00e4ndigen Textabschnitt dar \u2013 mit Abstand nach oben und unten (per CSS vordefiniert).</p>"},{"location":"html/simple/p/#verwendung","title":"\u2705 Verwendung","text":"<pre><code>&lt;p&gt;Dies ist ein einfacher Flie\u00dftextabsatz.&lt;/p&gt;\n</code></pre> <p>Der Text wird automatisch umbrochen und erh\u00e4lt durch den Browser einen sichtbaren Abstand zum n\u00e4chsten Element \u2013 \u00fcblicherweise durch <code>margin</code>.</p>"},{"location":"html/simple/p/#mogliche-attribute","title":"\ud83d\udd27 M\u00f6gliche Attribute","text":"Attribut Beschreibung <code>id</code> Erm\u00f6glicht das gezielte Ansteuern per Ankerlink (z.\u202fB. <code>#absatz1</code>) <code>class</code> Zuweisung von CSS-Klassen f\u00fcr Design &amp; Stil <code>style</code> Direktes Inline-Styling (z.\u202fB. <code>text-align</code>, <code>color</code>) <code>title</code> Tooltip-Text beim Mouseover <code>lang</code> Sprachkennzeichnung f\u00fcr Screenreader (z.\u202fB. <code>lang=\"en\"</code>) <code>dir</code> Schreibrichtung (z.\u202fB. <code>ltr</code>, <code>rtl</code>) f\u00fcr internationale Inhalte"},{"location":"html/simple/p/#beispiel-mit-css-styling","title":"\ud83c\udfa8 Beispiel mit CSS-Styling","text":"<pre><code>&lt;p class=\"info-text\"&gt;Dieser Absatz ist wichtig.&lt;/p&gt;\n</code></pre> <pre><code>.info-text {\n  font-style: italic;\n  background-color: #f5f5f5;\n  padding: 1em;\n  border-left: 4px solid #0077cc;\n}\n</code></pre>"},{"location":"html/simple/p/#mehrere-absatze-im-flietext","title":"\ud83d\udccf Mehrere Abs\u00e4tze im Flie\u00dftext","text":"<pre><code>&lt;p&gt;Einf\u00fchrung in das Thema Webentwicklung. HTML ist die Grundlage...&lt;/p&gt;\n\n&lt;p&gt;Im n\u00e4chsten Abschnitt betrachten wir CSS \u2013 das f\u00fcr das Styling zust\u00e4ndig ist.&lt;/p&gt;\n</code></pre> <p>\ud83d\udc49 Jeder <code>&lt;p&gt;</code>-Tag erzeugt einen eigenst\u00e4ndigen Textblock mit Abstand zum vorherigen.</p>"},{"location":"html/simple/p/#einschrankungen","title":"\u26a0\ufe0f Einschr\u00e4nkungen","text":"<ul> <li><code>&lt;p&gt;</code> darf keine Blockelemente enthalten, z.\u202fB. keine <code>&lt;div&gt;</code>, <code>&lt;section&gt;</code>, <code>&lt;ul&gt;</code> im Inneren.</li> <li>Verschachtelung von <code>&lt;p&gt;</code>-Tags ist nicht erlaubt:   <pre><code>&lt;p&gt;Dies ist &lt;p&gt;nicht g\u00fcltig&lt;/p&gt;&lt;/p&gt; \u274c\n</code></pre></li> </ul>"},{"location":"html/simple/p/#barrierefreiheit-semantik","title":"\u267f Barrierefreiheit &amp; Semantik","text":"<ul> <li><code>&lt;p&gt;</code>-Elemente sind f\u00fcr Screenreader klar verst\u00e4ndlich als Abs\u00e4tze.</li> <li>Kombiniert mit <code>lang</code> und <code>dir</code> kann die sprachliche und richtungsbezogene Darstellung verbessert werden.</li> <li>F\u00fcr spezielle Bedeutung (z.\u202fB. Zitate, Definitionen, Warnhinweise) k\u00f6nnen erg\u00e4nzend semantische Elemente wie <code>&lt;blockquote&gt;</code>, <code>&lt;mark&gt;</code>, <code>&lt;strong&gt;</code> verwendet werden.</li> </ul>"},{"location":"html/simple/p/#haufige-fehler","title":"\u274c H\u00e4ufige Fehler","text":"Fehler Korrekte Alternative Absatz durch <code>&lt;br&gt;&lt;br&gt;</code> statt <code>&lt;p&gt;</code> Verwende <code>&lt;p&gt;</code> f\u00fcr semantische Abs\u00e4tze Verschachtelte <code>&lt;p&gt;</code>-Elemente <code>&lt;p&gt;</code> darf nicht in sich selbst vorkommen <code>&lt;p&gt;</code> um ganze Layoutbereiche (<code>&lt;div&gt;</code>) Layout geh\u00f6rt au\u00dferhalb von <code>&lt;p&gt;</code> Nutzung nur zur Formatierung ohne Bedeutung Nutze <code>&lt;p&gt;</code> nur f\u00fcr echten Flie\u00dftext"},{"location":"html/simple/p/#fazit","title":"\ud83d\udcda Fazit","text":"<p>Das <code>&lt;p&gt;</code>-Element geh\u00f6rt zu den fundamentalsten HTML-Tags und ist unerl\u00e4sslich f\u00fcr gut strukturierte Texte. Es sorgt nicht nur f\u00fcr visuelle Gliederung, sondern gibt dem Inhalt auch semantische Bedeutung \u2013 wichtig f\u00fcr Lesbarkeit, SEO und Barrierefreiheit.</p>"},{"location":"html/simple/q/","title":"<code>&lt;q&gt;</code> \u2013 Kurzes Inline-Zitat","text":""},{"location":"html/simple/q/#funktion","title":"\ud83e\udde9 Funktion","text":"<p>Das <code>&lt;q&gt;</code>-Element (\u201equote\u201c) wird verwendet, um kurze Zitate direkt im Textfluss zu kennzeichnen. Es ist ein semantisches Inline-Element, das standardm\u00e4\u00dfig automatisch Anf\u00fchrungszeichen um den enthaltenen Text setzt (je nach Spracheinstellung des Dokuments).</p> <p>\ud83d\udccc <code>&lt;q&gt;</code> eignet sich f\u00fcr einzelne S\u00e4tze, Phrasen oder w\u00f6rtliche Aussagen innerhalb eines Absatzes \u2013 nicht f\u00fcr l\u00e4ngere Zitate (daf\u00fcr <code>&lt;blockquote&gt;</code> verwenden).</p>"},{"location":"html/simple/q/#verwendung","title":"\u2705 Verwendung","text":"<pre><code>&lt;p&gt;Steve Jobs sagte einst: &lt;q&gt;Stay hungry, stay foolish.&lt;/q&gt;&lt;/p&gt;\n</code></pre> <p>\ud83d\udc49 Das Zitat wird automatisch in Anf\u00fchrungszeichen gesetzt, z.\u202fB.:</p> <p>Steve Jobs sagte einst: \u201cStay hungry, stay foolish.\u201d</p> <p>(Je nach Spracheinstellung auch \u201edeutsche Anf\u00fchrungszeichen\u201c)</p>"},{"location":"html/simple/q/#attribute","title":"\ud83d\udd27 Attribute","text":"Attribut Beschreibung <code>cite</code> URL zur Quelle des Zitats (optional, maschinenlesbar) <code>lang</code> Sprache des Zitats (z.\u202fB. <code>lang=\"en\"</code> f\u00fcr fremdsprachige Abschnitte) <code>class</code> F\u00fcr CSS-Styling <code>style</code> Direktes Inline-Styling <code>id</code> Individuelle Kennung, z.\u202fB. f\u00fcr JavaScript-Zugriff"},{"location":"html/simple/q/#beispiel-mit-quelle","title":"Beispiel mit Quelle","text":"<pre><code>&lt;p&gt;\n  Laut Einstein: &lt;q cite=\"https://www.einstein-portal.de\"&gt;Phantasie ist wichtiger als Wissen.&lt;/q&gt;\n&lt;/p&gt;\n</code></pre> <p>Der <code>cite</code>-Wert ist nicht sichtbar, aber dient Maschinen und Tools zur Quellenverfolgung.</p>"},{"location":"html/simple/q/#styling-mit-css-optional","title":"\ud83c\udfa8 Styling mit CSS (optional)","text":"<pre><code>q {\n  quotes: \"\u201e\" \"\u201c\" \"\u201a\" \"\u2018\"; /* Deutsche Anf\u00fchrungszeichen */\n  font-style: italic;\n  color: #444;\n}\n</code></pre> <p>\ud83d\udc49 Damit kannst du Anf\u00fchrungszeichen-Stile kontrollieren oder entfernen:</p> <pre><code>q {\n  quotes: none;\n}\n</code></pre>"},{"location":"html/simple/q/#unterschied-zu-blockquote","title":"\ud83e\udde0 Unterschied zu <code>&lt;blockquote&gt;</code>","text":"Merkmal <code>&lt;q&gt;</code> (Inline-Zitat) <code>&lt;blockquote&gt;</code> (Block-Zitat) Textl\u00e4nge Kurz (ein Satz oder Ausdruck) L\u00e4nger (Abs\u00e4tze oder mehrere S\u00e4tze) Position Innerhalb eines Textflusses Einger\u00fcckt / eigener Block Anf\u00fchrungszeichen Automatisch gesetzt Manuell mit <code>&amp;bdquo;</code>, <code>&amp;ldquo;</code> o.\u202f\u00e4. Typische Anwendung Zitat im Satz Zitat mit Quelle oder l\u00e4ngerer Passage"},{"location":"html/simple/q/#barrierefreiheit-semantik","title":"\u267f Barrierefreiheit &amp; Semantik","text":"<ul> <li>Screenreader erkennen <code>&lt;q&gt;</code> als Zitat</li> <li>Browser interpretieren es sprachabh\u00e4ngig \u2192 richtige Anf\u00fchrungszeichen bei korrekt gesetztem <code>lang</code>-Attribut</li> <li>Ideal zur semantischen Kennzeichnung von w\u00f6rtlichen Reden, Zitaten, Aussagen im Text</li> </ul>"},{"location":"html/simple/q/#haufige-fehler","title":"\u274c H\u00e4ufige Fehler","text":"Fehler Besser Zitate mit Anf\u00fchrungszeichen im <code>&lt;p&gt;</code> nur visuell <code>&lt;q&gt;</code> nutzen f\u00fcr semantisch korrektes Zitat Verwendung f\u00fcr lange Abs\u00e4tze Nutze <code>&lt;blockquote&gt;</code> statt <code>&lt;q&gt;</code> Keine Spracheinstellung (<code>lang</code>) bei fremdsprachigem Zitat <code>lang=\"en\"</code> oder <code>lang=\"fr\"</code> erg\u00e4nzen"},{"location":"html/simple/q/#fazit","title":"\ud83d\udcda Fazit","text":"<p>Das <code>&lt;q&gt;</code>-Element ist das richtige Mittel f\u00fcr kurze, eingebettete Zitate. Es bringt semantische Bedeutung, sorgt f\u00fcr automatisch gesetzte Anf\u00fchrungszeichen und hilft beim barrierefreien und suchmaschinenfreundlichen Markieren von Aussagen.</p>"},{"location":"html/simple/samp/","title":"<code>&lt;samp&gt;</code> \u2013 Beispielausgabe (Sample Output)","text":""},{"location":"html/simple/samp/#funktion","title":"\ud83e\udde9 Funktion","text":"<p>Das <code>&lt;samp&gt;</code>-Element (Sample Output) zeigt die Ausgabe eines Programms, einer Konsole oder eines Systems. Es stellt typischerweise eine Antwort oder ein Resultat dar \u2013 meist im Monospace-Stil.</p> <p>\ud83d\udccc F\u00fcr Entwickler:innen-Dokumentation oder CLI-Beispiele sehr sinnvoll.</p>"},{"location":"html/simple/samp/#verwendung","title":"\u2705 Verwendung","text":"<pre><code>&lt;p&gt;Nach dem Login zeigt das System:&lt;/p&gt;\n&lt;pre&gt;&lt;samp&gt;Willkommen, Benutzer!&lt;/samp&gt;&lt;/pre&gt;\n</code></pre>"},{"location":"html/simple/samp/#attribute","title":"\ud83d\udd27 Attribute","text":"Attribut Beschreibung <code>class</code> F\u00fcr Design (z.\u202fB. \u201eoutput\u201c) <code>id</code> JS oder Linkziele <code>style</code> Direktes Styling"},{"location":"html/simple/samp/#beispiel-mit-css","title":"\ud83c\udfa8 Beispiel mit CSS","text":"<pre><code>samp {\n  color: #006400;\n  background-color: #f4f4f4;\n  font-family: monospace;\n}\n</code></pre>"},{"location":"html/simple/samp/#einsatzszenarien","title":"\ud83e\udde0 Einsatzszenarien","text":"<ul> <li>Terminalausgabe (z.\u202fB. Fehlermeldung)</li> <li>Log-Eintr\u00e4ge</li> <li>API-Responses</li> <li>Debug-Ausgaben</li> </ul>"},{"location":"html/simple/samp/#fehler-vermeiden","title":"\u274c Fehler vermeiden","text":"Fehler Besser Nur <code>&lt;pre&gt;</code> f\u00fcr Output Kombiniere mit <code>&lt;samp&gt;</code> f\u00fcr Semantik <code>&lt;samp&gt;</code> f\u00fcr Benutzereingaben Daf\u00fcr lieber <code>&lt;kbd&gt;</code> verwenden"},{"location":"html/simple/samp/#fazit","title":"\ud83d\udcda Fazit","text":"<p>Verwende <code>&lt;samp&gt;</code>, wenn du Ausgaben aus Programmen oder Systemen realistisch darstellen willst \u2013 besonders n\u00fctzlich f\u00fcr technische Dokus.</p>"},{"location":"html/simple/span/","title":"<code>&lt;span&gt;</code> \u2013 Inline-Container f\u00fcr Textauszeichnung","text":""},{"location":"html/simple/span/#funktion","title":"\ud83e\udde9 Funktion","text":"<p>Das <code>&lt;span&gt;</code>-Element ist ein semantikfreies, generisches Inline-Element, das verwendet wird, um einzelne Textabschnitte oder Inline-Inhalte gezielt zu markieren oder zu stylen. Im Gegensatz zu <code>&lt;div&gt;</code> (Block-Element) wirkt <code>&lt;span&gt;</code> nicht layoutver\u00e4ndernd, sondern bleibt innerhalb des Textflusses.</p> <p>\ud83d\udccc Verwende <code>&lt;span&gt;</code> immer dann, wenn du Text innerhalb eines Satzes formatieren oder logisch markieren willst \u2013 ohne dass daraus ein eigener Block wird.</p>"},{"location":"html/simple/span/#verwendung","title":"\u2705 Verwendung","text":"<pre><code>&lt;p&gt;Das Wort &lt;span class=\"highlight\"&gt;wichtig&lt;/span&gt; ist hervorgehoben.&lt;/p&gt;\n</code></pre> <p>\ud83d\udc49 Der markierte Abschnitt kann per CSS formatiert oder \u00fcber JavaScript angesprochen werden.</p>"},{"location":"html/simple/span/#mogliche-attribute","title":"\ud83d\udd27 M\u00f6gliche Attribute","text":"Attribut Beschreibung <code>class</code> Erm\u00f6glicht CSS-Styling \u00fcber definierte Klassen <code>style</code> Inline-CSS zur direkten Formatierung (z.\u202fB. <code>color</code>, <code>font-weight</code>) <code>id</code> Individuelle Identifikation (z.\u202fB. f\u00fcr JavaScript oder Anker) <code>title</code> Tooltip-Text beim Mouseover <code>lang</code> Sprachkennung f\u00fcr Screenreader <code>data-*</code> Eigene HTML5-Datenattribute f\u00fcr JS (z.\u202fB. <code>data-status=\"active\"</code>)"},{"location":"html/simple/span/#beispiel-mit-css-klasse","title":"\ud83c\udfa8 Beispiel mit CSS-Klasse","text":"<pre><code>&lt;style&gt;\n  .highlight {\n    background-color: yellow;\n    font-weight: bold;\n  }\n&lt;/style&gt;\n\n&lt;p&gt;Dies ist ein &lt;span class=\"highlight\"&gt;wichtiger&lt;/span&gt; Hinweis.&lt;/p&gt;\n</code></pre>"},{"location":"html/simple/span/#wann-span-verwenden","title":"\ud83e\udde0 Wann <code>&lt;span&gt;</code> verwenden?","text":"Situation Element Du m\u00f6chtest Text innerhalb eines Absatzes visuell hervorheben \u2705 <code>&lt;span&gt;</code> Du willst ein ganzes Layout-Element strukturieren \u274c besser <code>&lt;div&gt;</code> Du brauchst semantische Bedeutung wie \"Wichtig\" \u274c besser <code>&lt;strong&gt;</code> oder <code>&lt;em&gt;</code>"},{"location":"html/simple/span/#unterschiede-zu-ahnlichen-elementen","title":"\ud83d\udcd0 Unterschiede zu \u00e4hnlichen Elementen","text":"Element Block/Inline Semantik Typischer Einsatz <code>&lt;span&gt;</code> Inline Keine Styling / JS-Zugriff auf Textabschnitte <code>&lt;div&gt;</code> Block Keine Layoutstruktur <code>&lt;strong&gt;</code> Inline Wichtigkeit Semantisch hervorgehobener Text <code>&lt;em&gt;</code> Inline Betonung Hervorhebung durch Betonung (z.\u202fB. wirklich)"},{"location":"html/simple/span/#haufige-fehler","title":"\u274c H\u00e4ufige Fehler","text":"Fehler Besser <code>&lt;span&gt;</code> als Container f\u00fcr ganze Layoutbl\u00f6cke Verwende <code>&lt;div&gt;</code> f\u00fcr strukturierende Elemente <code>&lt;span&gt;</code> f\u00fcr semantisch bedeutenden Text Nutze <code>&lt;strong&gt;</code> oder <code>&lt;em&gt;</code> f\u00fcr echte Bedeutung Inline-JavaScript in <code>&lt;span onclick=\"...\"&gt;</code> Nutze <code>addEventListener</code> \u00fcber JS"},{"location":"html/simple/span/#barrierefreiheit","title":"\u267f Barrierefreiheit","text":"<ul> <li><code>&lt;span&gt;</code> hat keine Bedeutung f\u00fcr Screenreader \u2013 gut f\u00fcr rein visuelle Hervorhebungen</li> <li>Wenn Bedeutung vorhanden ist (z.\u202fB. \u201eFehler\u201c), sollte zus\u00e4tzlich eine ARIA-Rolle oder semantisches Tag verwendet werden</li> <li>Mit <code>lang</code> kann z.\u202fB. ein Fremdwort markiert werden: <pre><code>&lt;span lang=\"fr\"&gt;bonjour&lt;/span&gt;\n</code></pre></li> </ul>"},{"location":"html/simple/span/#fazit","title":"\ud83d\udcda Fazit","text":"<p><code>&lt;span&gt;</code> ist ein vielseitiges Werkzeug zur Inline-Auszeichnung ohne strukturelle Wirkung. Es ist besonders n\u00fctzlich f\u00fcr Designzwecke, JS-Zugriff oder Detailanpassungen innerhalb von Text \u2013 solange du dir bewusst bist, dass es keine semantische Bedeutung tr\u00e4gt.</p>"},{"location":"html/simple/strong/","title":"<code>&lt;strong&gt;</code> \u2013 Wichtige Textauszeichnung","text":""},{"location":"html/simple/strong/#funktion","title":"\ud83e\udde9 Funktion","text":"<p>Das <code>&lt;strong&gt;</code>-Element dient dazu, Text inhaltlich hervorzuheben, der besonders wichtig oder relevant ist. Es unterscheidet sich von rein visueller Hervorhebung (z.\u202fB. durch <code>&lt;b&gt;</code>) dadurch, dass es auch semantische Bedeutung hat.</p> <p>\ud83d\udccc Screenreader betonen <code>&lt;strong&gt;</code>-Text akustisch oder visuell, weil er als wichtig markiert ist.</p>"},{"location":"html/simple/strong/#verwendung","title":"\u2705 Verwendung","text":"<pre><code>&lt;p&gt;Bitte &lt;strong&gt;vergiss nicht&lt;/strong&gt;, das Formular abzusenden!&lt;/p&gt;\n</code></pre> <p>\ud83d\udc49 In diesem Fall weist der Satz auf etwas Wichtiges hin \u2013 <code>&lt;strong&gt;</code> unterstreicht das inhaltliche Gewicht.</p>"},{"location":"html/simple/strong/#bedeutung-semantik","title":"\ud83c\udfaf Bedeutung &amp; Semantik","text":"Merkmal Beschreibung Semantisch wichtig Betont inhaltliche Wichtigkeit, nicht blo\u00df visuelles Styling Barrierefrei Screenreader lesen <code>&lt;strong&gt;</code> mit betonter Stimme SEO-relevant Wird von Suchmaschinen als gewichteter Text wahrgenommen Inline-Element Kann innerhalb von Abs\u00e4tzen oder S\u00e4tzen verwendet werden"},{"location":"html/simple/strong/#attribute","title":"\ud83d\udd27 Attribute","text":"Attribut Beschreibung <code>class</code> CSS-Styling f\u00fcr visuelle Anpassungen <code>style</code> Inline-Styling (z.\u202fB. <code>color</code>, <code>font-weight</code>) <code>id</code> JS-Zugriff oder direkte Verlinkung <code>lang</code> Sprachkennung f\u00fcr den Inhalt innerhalb der Hervorhebung"},{"location":"html/simple/strong/#beispiel-mit-css","title":"\ud83c\udfa8 Beispiel mit CSS","text":"<pre><code>&lt;p&gt;\n  Dieses Produkt ist &lt;strong class=\"highlight\"&gt;nur noch heute&lt;/strong&gt; zum Sonderpreis erh\u00e4ltlich.\n&lt;/p&gt;\n</code></pre> <pre><code>.highlight {\n  color: darkred;\n  background-color: #fff1f1;\n  font-weight: bold;\n  padding: 0 4px;\n}\n</code></pre>"},{"location":"html/simple/strong/#unterschied-zu-b","title":"\ud83d\udcd0 Unterschied zu <code>&lt;b&gt;</code>","text":"Element Semantik Bedeutung f\u00fcr Screenreader / SEO <code>&lt;strong&gt;</code> Ja \u2705 Wird als wichtig markiert <code>&lt;b&gt;</code> Nein \u274c Nur optisch fett <p>\ud83d\udc49 Verwende <code>&lt;strong&gt;</code>, wenn du eine Aussage oder ein Wort inhaltlich hervorheben willst. Nutze <code>&lt;b&gt;</code> nur f\u00fcr rein visuelle Hervorhebungen ohne semantische Relevanz (z.\u202fB. im Layout, technischen UIs).</p>"},{"location":"html/simple/strong/#barrierefreiheit","title":"\u267f Barrierefreiheit","text":"<ul> <li>Screenreader sprechen den Text betonter aus oder machen eine kurze Pause.</li> <li>Ideal f\u00fcr Warnungen, Hinweise, Befehle, Anweisungen, Regeln, Pflichtangaben.</li> <li>Auch f\u00fcr \u00dcberschriften oder Labels innerhalb von Formularen sinnvoll.</li> </ul>"},{"location":"html/simple/strong/#haufige-fehler","title":"\u274c H\u00e4ufige Fehler","text":"Fehler Besser Verwendung nur zum \u201efett machen\u201c Nutze CSS oder <code>&lt;b&gt;</code> stattdessen Einsatz f\u00fcr unbedeutende dekorative Texte <code>&lt;strong&gt;</code> nur bei inhaltlicher Bedeutung <code>&lt;strong&gt;</code> als Blockelement Es ist ein Inline-Element \u2013 f\u00fcr Textteile, keine Abs\u00e4tze"},{"location":"html/simple/strong/#fazit","title":"\ud83d\udcda Fazit","text":"<p>Das <code>&lt;strong&gt;</code>-Tag ist die semantisch korrekte Wahl f\u00fcr wichtige Textpassagen. Es sollte gezielt und sparsam eingesetzt werden, um Bedeutung zu vermitteln, nicht nur Stil. In Kombination mit CSS kann es sowohl funktional als auch optisch wirksam sein.</p>"},{"location":"html/simple/time/","title":"<code>&lt;time&gt;</code> \u2013 Zeit- und Datumsangabe","text":""},{"location":"html/simple/time/#funktion","title":"\ud83e\udde9 Funktion","text":"<p>Das <code>&lt;time&gt;</code>-Element wird verwendet, um Zeitpunkte oder Zeitr\u00e4ume anzugeben \u2013 sowohl f\u00fcr Menschen sichtbar als auch f\u00fcr Maschinen interpretierbar (z.\u202fB. Suchmaschinen, Kalender, Browser, Screenreader). Mit dem <code>datetime</code>-Attribut wird eine standardisierte Zeitangabe mitgeliefert, die von Maschinen verarbeitet werden kann \u2013 z.\u202fB. f\u00fcr Reminder, strukturierte Daten, Kalenderfunktionen, RSS-Feeds u.\u202fv.\u202fm.</p> <p>\ud83d\udccc <code>&lt;time&gt;</code> bringt semantische Bedeutung f\u00fcr Zeitinformationen und erm\u00f6glicht eine strukturierte Verarbeitung von Datum/Zeit durch Suchmaschinen &amp; Tools.</p>"},{"location":"html/simple/time/#verwendung","title":"\u2705 Verwendung","text":"<pre><code>&lt;p&gt;Der Artikel wurde am &lt;time datetime=\"2025-06-08\"&gt;8. Juni 2025&lt;/time&gt; ver\u00f6ffentlicht.&lt;/p&gt;\n</code></pre> <p>\ud83d\udc49 Der Leser sieht ein sch\u00f6nes, formatiertes Datum \u2013 Maschinen erkennen exakt: 2025-06-08.</p>"},{"location":"html/simple/time/#attribute","title":"\ud83d\udd27 Attribute","text":"Attribut Beschreibung <code>datetime</code> Pflicht f\u00fcr maschinenlesbare Zeitformate (ISO 8601) <code>class</code> F\u00fcr visuelles Styling \u00fcber CSS <code>id</code> F\u00fcr Verlinkung oder JavaScript-Zugriff <code>title</code> Tooltip mit erg\u00e4nzenden Infos"},{"location":"html/simple/time/#anwendungsbeispiele","title":"\ud83c\udfaf Anwendungsbeispiele","text":""},{"location":"html/simple/time/#1-datum-eines-events","title":"1. \ud83d\udcc5 Datum eines Events","text":"<pre><code>&lt;p&gt;Unser Webinar findet am &lt;time datetime=\"2025-07-01\"&gt;1. Juli 2025&lt;/time&gt; statt.&lt;/p&gt;\n</code></pre>"},{"location":"html/simple/time/#2-zeitspanne-mit-startende","title":"2. \u23f3 Zeitspanne (mit Start\u2013Ende)","text":"<pre><code>&lt;p&gt;Das Projekt lief von \n  &lt;time datetime=\"2024-01-01\"&gt;Januar 2024&lt;/time&gt; \n  bis \n  &lt;time datetime=\"2024-12-31\"&gt;Dezember 2024&lt;/time&gt;.\n&lt;/p&gt;\n</code></pre>"},{"location":"html/simple/time/#3-uhrzeit","title":"3. \u23f0 Uhrzeit","text":"<pre><code>&lt;p&gt;Der Livestream startet um &lt;time datetime=\"14:00\"&gt;14:00 Uhr&lt;/time&gt;.&lt;/p&gt;\n</code></pre>"},{"location":"html/simple/time/#4-kombination-mit-kalender-apps","title":"4. \ud83d\udcc6 Kombination mit Kalender-Apps","text":"<p>Suchmaschinen und Kalenderanwendungen k\u00f6nnen <code>&lt;time&gt;</code>-Elemente auslesen und z.\u202fB. als strukturierte Daten (Schema.org) verarbeiten.</p>"},{"location":"html/simple/time/#iso-8601-gultige-datetime-formate","title":"\ud83e\udde0 ISO 8601 \u2013 g\u00fcltige <code>datetime</code>-Formate","text":"Formattyp Beispiel Bedeutung Datum <code>2025-06-08</code> 8. Juni 2025 Uhrzeit <code>14:30</code> 14:30 Uhr Datum + Uhrzeit <code>2025-06-08T14:30</code> 8. Juni 2025, 14:30 Uhr Mit Zeitzone <code>2025-06-08T14:30+02:00</code> 8. Juni 2025, MESZ Wochentag (nicht zul\u00e4ssig in <code>datetime</code>) <code>Monday</code> (visuell ja, maschinell nein)"},{"location":"html/simple/time/#barrierefreiheit-semantik","title":"\u267f Barrierefreiheit &amp; Semantik","text":"<ul> <li>Screenreader erkennen <code>&lt;time&gt;</code> als Zeitinformation und k\u00f6nnen sie entsprechend vorlesen oder betonen</li> <li>Strukturierte Daten helfen Assistenzsystemen, Datums-/Zeitangaben korrekt einzuordnen</li> <li>Barrierefreie Tooltip-Texte k\u00f6nnen zus\u00e4tzlich \u00fcber <code>title</code> erg\u00e4nzt werden</li> </ul>"},{"location":"html/simple/time/#haufige-fehler","title":"\u274c H\u00e4ufige Fehler","text":"Fehler Besser Nur visueller Text ohne <code>datetime</code>-Attribut <code>&lt;time datetime=\"...\"&gt;...&lt;/time&gt;</code> verwenden Falsches Datumsformat im <code>datetime</code> Immer ISO 8601 (z.\u202fB. <code>YYYY-MM-DD</code>) nutzen Zeitr\u00e4ume in einem einzigen <code>&lt;time&gt;</code>-Element Besser: Zwei <code>&lt;time&gt;</code>-Elemente (Start und Ende) <code>&lt;time&gt;</code> nur f\u00fcrs Styling Verwende nur, wenn wirklich Zeitinformation"},{"location":"html/simple/time/#fazit","title":"\ud83d\udcda Fazit","text":"<p>Das <code>&lt;time&gt;</code>-Element ist ein modernes, semantisch korrektes Werkzeug, um Datums- und Zeitangaben maschinenlesbar in HTML zu integrieren. Es verbessert die Struktur, Auffindbarkeit und Nutzbarkeit von Zeitdaten f\u00fcr Benutzer und Systeme \u2013 von Suchmaschinen bis hin zu Kalender-Plugins und Screenreadern.</p>"},{"location":"html/simple/var/","title":"<code>&lt;var&gt;</code> \u2013 Variable oder Platzhalter","text":""},{"location":"html/simple/var/#funktion","title":"\ud83e\udde9 Funktion","text":"<p>Das <code>&lt;var&gt;</code>-Element kennzeichnet Variablen, mathematische Symbole oder Platzhalternamen in Text oder Code. Es hat semantische Bedeutung und wird meist kursiv dargestellt.</p> <p>\ud83d\udccc F\u00fcr mathematische Formeln, Codebeispiele oder allgemeine Platzhalter ideal.</p>"},{"location":"html/simple/var/#verwendung","title":"\u2705 Verwendung","text":"<pre><code>&lt;p&gt;Die Fl\u00e4che berechnet sich mit &lt;var&gt;a&lt;/var&gt; \u00d7 &lt;var&gt;b&lt;/var&gt;.&lt;/p&gt;\n</code></pre> <p>\ud83d\udc49 \u201ea\u201c und \u201eb\u201c werden als Variable ausgezeichnet \u2013 visuell und semantisch.</p>"},{"location":"html/simple/var/#attribute","title":"\ud83d\udd27 Attribute","text":"Attribut Beschreibung <code>class</code> F\u00fcr eigenes Styling <code>title</code> Optionaler Hinweistext <code>id</code> F\u00fcr gezielte JS-Zugriffe"},{"location":"html/simple/var/#beispiel-mit-css","title":"\ud83c\udfa8 Beispiel mit CSS","text":"<pre><code>var {\n  font-style: italic;\n  color: #005;\n}\n</code></pre>"},{"location":"html/simple/var/#typische-einsatzbereiche","title":"\ud83e\udde0 Typische Einsatzbereiche","text":"<ul> <li>Variablen in mathematischen Formeln</li> <li>Funktionsparameter oder Platzhalter in Code</li> <li>Technische Beschreibungen mit Parametern</li> </ul>"},{"location":"html/simple/var/#fehler-vermeiden","title":"\u274c Fehler vermeiden","text":"Fehler Besser <code>&lt;var&gt;</code> f\u00fcr Funktionsnamen Verwende <code>&lt;code&gt;</code> oder <code>&lt;dfn&gt;</code> <code>&lt;i&gt;</code> f\u00fcr Variablen Nutze <code>&lt;var&gt;</code> f\u00fcr semantische Bedeutung"},{"location":"html/simple/var/#fazit","title":"\ud83d\udcda Fazit","text":"<p>Nutze <code>&lt;var&gt;</code>, wenn du technische oder mathematische Variablen klar auszeichnen willst \u2013 in Kombination mit <code>&lt;code&gt;</code>, <code>&lt;samp&gt;</code> und <code>&lt;dfn&gt;</code> besonders effektiv.</p>"},{"location":"js/dates/","title":"\ud83d\udd52 Date (Datum &amp; Zeit)","text":"<p>JavaScript bietet mit dem <code>Date</code>-Objekt eine eingebaute M\u00f6glichkeit, um mit Datum und Uhrzeit zu arbeiten. Es unterst\u00fctzt das Abrufen, Setzen, Formatieren und Berechnen von Zeitwerten.</p>"},{"location":"js/dates/#erstellen-eines-date-objekts","title":"\ud83d\udce6 Erstellen eines Date-Objekts","text":"<pre><code>const jetzt = new Date(); // aktuelles Datum &amp; Uhrzeit\nconst bestimmtesDatum = new Date(\"2025-06-08T12:00:00\");\nconst ausWerten = new Date(2025, 5, 8, 12, 0, 0); // (Jahr, Monat, Tag, Std, Min, Sek)\n</code></pre> <p>\u26a0\ufe0f Achtung: Monate starten bei <code>0</code> (Januar), also ist <code>5</code> der Juni!</p>"},{"location":"js/dates/#datum-abrufen-getter","title":"\ud83d\udcc6 Datum abrufen (Getter)","text":"<pre><code>const datum = new Date(\"2025-06-08T12:34:56\");\n\ndatum.getFullYear();   // 2025\ndatum.getMonth();      // 5 (Juni)\ndatum.getDate();       // 8\ndatum.getDay();        // 0 = Sonntag, 1 = Montag, ...\ndatum.getHours();      // 12\ndatum.getMinutes();    // 34\ndatum.getSeconds();    // 56\ndatum.getMilliseconds(); // 0\ndatum.getTime();       // Millisekunden seit 01.01.1970 (Unix-Zeit)\n</code></pre>"},{"location":"js/dates/#datum-setzen-setter","title":"\ud83e\udde9 Datum setzen (Setter)","text":"<pre><code>datum.setFullYear(2030);\ndatum.setMonth(0);       // Januar\ndatum.setDate(1);        // 1. Tag im Monat\ndatum.setHours(14);\ndatum.setMinutes(0);\n</code></pre>"},{"location":"js/dates/#zeit-mit-zeitzonen","title":"\ud83c\udf0d Zeit mit Zeitzonen","text":"<pre><code>datum.toString();         // lokale Darstellung\ndatum.toUTCString();      // UTC Zeit\ndatum.toISOString();      // 2025-06-08T10:34:56.000Z\ndatum.toLocaleString();   // lokal angepasst\ndatum.toLocaleDateString(); // nur Datum\ndatum.toLocaleTimeString(); // nur Uhrzeit\n</code></pre> <p>Du kannst <code>toLocale...</code> Methoden mit Optionen anpassen:</p> <pre><code>datum.toLocaleString(\"de-DE\", {\n  weekday: \"long\",\n  year: \"numeric\",\n  month: \"long\",\n  day: \"numeric\"\n});\n// \u2192 Sonntag, 8. Juni 2025\n</code></pre>"},{"location":"js/dates/#vergleich-von-daten","title":"\ud83e\uddea Vergleich von Daten","text":"<pre><code>const a = new Date(\"2025-01-01\");\nconst b = new Date(\"2025-06-01\");\n\na &lt; b; // true\na.getTime() === b.getTime(); // false\n</code></pre>"},{"location":"js/dates/#zeitdifferenz-berechnen","title":"\ud83e\uddee Zeitdifferenz berechnen","text":"<pre><code>const start = new Date(\"2025-01-01\");\nconst ende = new Date(\"2025-06-01\");\n\nconst differenzMS = ende - start;           // in Millisekunden\nconst tage = differenzMS / (1000 * 60 * 60 * 24); // in Tagen\nconsole.log(tage); // \u2248 151 Tage\n</code></pre>"},{"location":"js/dates/#zeit-utilities","title":"\ud83e\uddf0 Zeit-Utilities","text":"Methode Beschreibung <code>Date.now()</code> aktuelle Zeit in ms (seit 1970) <code>new Date().getTime()</code> wie <code>Date.now()</code> <code>Date.parse(string)</code> Zeitwert aus String (in ms) <code>isNaN(new Date(...))</code> Pr\u00fcfen, ob g\u00fcltiges Datum"},{"location":"js/dates/#mini-beispiel-aktuelles-datum-formatieren","title":"\ud83d\udcc6 Mini-Beispiel: Aktuelles Datum formatieren","text":"<pre><code>const heute = new Date();\n\nconst tag = heute.getDate().toString().padStart(2, \"0\");\nconst monat = (heute.getMonth() + 1).toString().padStart(2, \"0\");\nconst jahr = heute.getFullYear();\n\nconsole.log(`${tag}.${monat}.${jahr}`); // z.\u202fB. 08.06.2025\n</code></pre>"},{"location":"js/dates/#alternative-libs-fur-komplexere-falle","title":"\ud83d\udce6 Alternative Libs (f\u00fcr komplexere F\u00e4lle)","text":"<ul> <li>Luxon (moderne Zeitzonen &amp; Formate)</li> <li>date-fns (leichtgewichtig, modulare Funktionen)</li> <li>Day.js (kompakt, \u00e4hnlich wie Moment.js)</li> <li>\u26a0\ufe0f Moment.js wird nicht mehr empfohlen (veraltet, gro\u00df)</li> </ul>"},{"location":"js/dates/#zusammenfassung","title":"\ud83e\udde0 Zusammenfassung","text":"Thema Methoden (Beispiele) Aktuelles Datum <code>new Date()</code> Teile abfragen <code>getFullYear()</code>, <code>getMonth()</code>, <code>getDate()</code> Teile setzen <code>setHours()</code>, <code>setFullYear()</code> Vergleich <code>&lt;</code>, <code>&gt;</code>, <code>getTime()</code> Formatieren <code>toLocaleDateString()</code>, <code>toISOString()</code> Berechnen Differenz mit <code>-</code>, dann umrechnen"},{"location":"js/einf%C3%BChrung/","title":"\u2728 Einf\u00fchrung in JavaScript","text":"<p>JavaScript (JS) ist eine dynamische, interpretierte Programmiersprache, die urspr\u00fcnglich f\u00fcr die Interaktivit\u00e4t im Web entwickelt wurde. Heute ist sie ein zentraler Bestandteil moderner Webentwicklung und wird sowohl im Browser als auch auf Servern (z.\u202fB. mit Node.js) verwendet.</p>"},{"location":"js/einf%C3%BChrung/#was-ist-javascript","title":"\ud83d\udccc Was ist JavaScript?","text":"<p>JavaScript ist:</p> <ul> <li>Skriptsprache: Wird direkt im Browser ausgef\u00fchrt \u2013 ohne vorherige Kompilierung.</li> <li>Clientseitig &amp; serverseitig: Urspr\u00fcnglich f\u00fcr den Browser entwickelt, inzwischen auch f\u00fcr Backend-Entwicklung (Node.js, Deno).</li> <li>Dynamisch typisiert: Variablen k\u00f6nnen zur Laufzeit unterschiedliche Typen annehmen.</li> <li>Event-basiert: Ideal f\u00fcr reaktive UI und Benutzerinteraktionen.</li> <li>Objektorientiert &amp; funktional: Unterst\u00fctzt verschiedene Paradigmen.</li> </ul>"},{"location":"js/einf%C3%BChrung/#geschichte","title":"\ud83d\udcdc Geschichte","text":"Jahr Meilenstein 1995 Erfindung von \u201eLiveScript\u201c durch Netscape 1996 Umbenannt in JavaScript 1997 Standardisierung als ECMAScript (ES1) 2009 Ver\u00f6ffentlichung von Node.js 2015 ES6 / ES2015 bringt moderne Sprachelemente heute Laufzeitumgebungen \u00fcberall (Browser, Server, IoT)"},{"location":"js/einf%C3%BChrung/#wozu-wird-javascript-verwendet","title":"\ud83d\udd27 Wozu wird JavaScript verwendet?","text":"Bereich Beispiele Webseiten Interaktive Elemente, Formvalidierung, Animationen Single Page Apps (SPA) React, Vue, Angular Backend Node.js + Express.js, REST APIs Mobile Apps React Native, Ionic Desktop Apps Electron (z.\u202fB. Visual Studio Code) Spiele HTML5 Canvas, Phaser, Three.js IoT / Ger\u00e4te Johnny-Five (Arduino), Raspberry Pi mit Node.js"},{"location":"js/einf%C3%BChrung/#grundstruktur-eines-js-skripts","title":"\ud83e\uddf1 Grundstruktur eines JS-Skripts","text":"<pre><code>&lt;script&gt;\n  // JavaScript-Code\n  alert(\"Hallo Welt!\");\n&lt;/script&gt;\n</code></pre> <p>Oder extern eingebunden:</p> <pre><code>&lt;script src=\"script.js\"&gt;&lt;/script&gt;\n</code></pre>"},{"location":"js/einf%C3%BChrung/#merkmale","title":"\ud83d\udccb Merkmale","text":"<ul> <li>Interaktivit\u00e4t: Klick-Events, Eingaben, Hover usw.</li> <li>Manipulation des DOM: Inhalte dynamisch \u00e4ndern</li> <li>Asynchronit\u00e4t: <code>setTimeout</code>, <code>fetch</code>, <code>async/await</code>, Promises</li> <li>Modularit\u00e4t: Unterst\u00fctzung f\u00fcr <code>import</code> / <code>export</code></li> <li>Breite \u00d6kosysteme: NPM, Frameworks, Tools</li> </ul>"},{"location":"js/einf%C3%BChrung/#warum-javascript-lernen","title":"\ud83e\udde0 Warum JavaScript lernen?","text":"<ul> <li>Standard f\u00fcr Webentwicklung</li> <li>Enormer Bedarf in der Industrie</li> <li>Gro\u00dfe Community und Ressourcen</li> <li>Eine Sprache f\u00fcr Frontend UND Backend</li> <li>Vielseitig einsetzbar \u2013 vom UI bis zur Server-API</li> </ul>"},{"location":"js/einf%C3%BChrung/#beispiel-einfache-interaktion","title":"\u2705 Beispiel: Einfache Interaktion","text":"<pre><code>&lt;button onclick=\"zeigeNachricht()\"&gt;Klick mich!&lt;/button&gt;\n\n&lt;script&gt;\n  function zeigeNachricht() {\n    alert(\"Du hast den Button geklickt!\");\n  }\n&lt;/script&gt;\n</code></pre>"},{"location":"js/einf%C3%BChrung/#weiterfuhrende-themen","title":"\ud83d\udcda Weiterf\u00fchrende Themen","text":"<ul> <li><code>Variablen &amp; Datentypen</code></li> <li><code>Funktionen &amp; Methoden</code></li> <li><code>Arrays &amp; Objekte</code></li> <li><code>DOM-Manipulation</code></li> <li><code>Ereignisse (Events)</code></li> <li><code>Asynchrone Programmierung</code></li> <li><code>JavaScript Module</code></li> <li><code>Fehlerbehandlung</code></li> <li><code>Tooling &amp; Buildprozesse (z.\u202fB. Webpack, Babel)</code></li> <li><code>Moderne Frameworks (React, Vue, Svelte, ...)</code></li> </ul>"},{"location":"js/einf%C3%BChrung/#nutzliche-ressourcen","title":"\ud83d\udd17 N\u00fctzliche Ressourcen","text":"<ul> <li>MDN JavaScript Guide</li> <li>JavaScript.info</li> <li>Eloquent JavaScript</li> <li>JS30 by Wes Bos</li> </ul>"},{"location":"js/fetch/","title":"\ud83c\udf10 <code>fetch()</code> f\u00fcr HTTP-Anfragen","text":"<p>Mit <code>fetch()</code> kannst du in JavaScript Daten von Servern laden oder senden \u2013 z.\u202fB. JSON von einer API abrufen, Formulare verschicken oder Dateien hochladen.</p> <p><code>fetch()</code> ist modern, basiert auf Promises und ersetzt \u00e4ltere Techniken wie <code>XMLHttpRequest</code>.</p>"},{"location":"js/fetch/#syntax-grundstruktur","title":"\ud83d\udce6 Syntax \u2013 Grundstruktur","text":"<pre><code>fetch(\"https://api.example.com/daten\")\n  .then(response =&gt; response.json())\n  .then(data =&gt; console.log(data))\n  .catch(error =&gt; console.error(\"Fehler:\", error));\n</code></pre>"},{"location":"js/fetch/#erklarung","title":"Erkl\u00e4rung:","text":"<ul> <li><code>fetch(URL)</code> \u2013 startet eine HTTP-Anfrage</li> <li><code>.then()</code> \u2013 wartet auf Antwort (Promise)</li> <li><code>.json()</code> \u2013 wandelt Antwort in echtes JS-Objekt um</li> <li><code>.catch()</code> \u2013 f\u00e4ngt Fehler ab</li> </ul>"},{"location":"js/fetch/#get-anfrage-daten-abrufen","title":"\u2705 GET-Anfrage (Daten abrufen)","text":"<pre><code>fetch(\"https://jsonplaceholder.typicode.com/posts/1\")\n  .then(res =&gt; res.json())\n  .then(data =&gt; {\n    console.log(\"Titel:\", data.title);\n  });\n</code></pre>"},{"location":"js/fetch/#post-anfrage-daten-senden","title":"\u2709\ufe0f POST-Anfrage (Daten senden)","text":"<pre><code>fetch(\"https://jsonplaceholder.typicode.com/posts\", {\n  method: \"POST\",\n  headers: {\n    \"Content-Type\": \"application/json\"\n  },\n  body: JSON.stringify({\n    title: \"Hallo Welt\",\n    body: \"Das ist ein Beispiel\",\n    userId: 1\n  })\n})\n  .then(res =&gt; res.json())\n  .then(data =&gt; console.log(data));\n</code></pre>"},{"location":"js/fetch/#weitere-http-methoden","title":"\ud83e\udde0 Weitere HTTP-Methoden","text":"Methode Zweck <code>GET</code> Daten abrufen (Standard) <code>POST</code> Neue Daten senden <code>PUT</code> Vorhandene Daten \u00fcberschreiben <code>PATCH</code> Teilweise aktualisieren <code>DELETE</code> Daten l\u00f6schen"},{"location":"js/fetch/#optionen-objekt","title":"\ud83d\udd27 Optionen-Objekt","text":"<pre><code>fetch(url, {\n  method: \"POST\",         // GET, POST, PUT, DELETE, ...\n  headers: {\n    \"Content-Type\": \"application/json\"\n  },\n  body: JSON.stringify(daten) // nur bei POST, PUT, PATCH\n});\n</code></pre>"},{"location":"js/fetch/#fehlerbehandlung","title":"\u2757 Fehlerbehandlung","text":"<pre><code>fetch(\"/api/info\")\n  .then(res =&gt; {\n    if (!res.ok) {\n      throw new Error(`HTTP-Fehler: ${res.status}`);\n    }\n    return res.json();\n  })\n  .then(data =&gt; console.log(data))\n  .catch(err =&gt; console.error(\"Fehler:\", err.message));\n</code></pre>"},{"location":"js/fetch/#asynchrone-schreibweise-mit-asyncawait","title":"\ud83d\udd04 Asynchrone Schreibweise mit <code>async/await</code>","text":"<pre><code>async function ladeDaten() {\n  try {\n    const res = await fetch(\"https://api.example.com\");\n    if (!res.ok) throw new Error(\"Fehler beim Laden\");\n    const data = await res.json();\n    console.log(data);\n  } catch (e) {\n    console.error(\"Fehler:\", e.message);\n  }\n}\n\nladeDaten();\n</code></pre>"},{"location":"js/fetch/#formulardaten-mit-formdata","title":"\ud83d\udce4 Formulardaten mit <code>FormData</code>","text":"<pre><code>const form = document.querySelector(\"form\");\nconst daten = new FormData(form);\n\nfetch(\"/kontakt\", {\n  method: \"POST\",\n  body: daten\n});\n</code></pre> <p><code>FormData</code> sendet alle Felder automatisch im richtigen Format!</p>"},{"location":"js/fetch/#mit-authentifizierung-z-b-bearer-token","title":"\ud83d\udd10 Mit Authentifizierung (z.\u202fB. Bearer Token)","text":"<pre><code>fetch(\"https://api.example.com/user\", {\n  headers: {\n    \"Authorization\": \"Bearer DEIN_TOKEN\"\n  }\n})\n  .then(res =&gt; res.json())\n  .then(data =&gt; console.log(data));\n</code></pre>"},{"location":"js/fetch/#beispiel-benutzer-aus-api-laden","title":"\ud83e\uddea Beispiel: Benutzer aus API laden","text":"<pre><code>async function holeBenutzer(id) {\n  const res = await fetch(`https://jsonplaceholder.typicode.com/users/${id}`);\n  const user = await res.json();\n  console.log(`Name: ${user.name}, Email: ${user.email}`);\n}\n\nholeBenutzer(3);\n</code></pre>"},{"location":"js/fetch/#zusammenfassung","title":"\u2705 Zusammenfassung","text":"Was? Wie? Daten abrufen <code>fetch(url)</code> Daten senden <code>method: \"POST\"</code>, <code>body</code>, <code>headers</code> JSON verarbeiten <code>res.json()</code> Fehler abfangen <code>if (!res.ok) throw Error()</code> + <code>catch()</code> Einfach schreiben mit <code>async/await</code> Form senden <code>FormData</code> verwenden Auth verwenden <code>Authorization</code>-Header setzen"},{"location":"js/for/","title":"\ud83d\udd01 <code>for</code>-Schleifen komplett erkl\u00e4rt","text":"<p>Mit <code>for</code>-Schleifen kannst du Wiederholungen (Loops) im Code umsetzen. Sie helfen dabei, Aufgaben mehrfach automatisch auszuf\u00fchren, z.\u202fB. durch Arrays zu gehen oder Zahlen hochzuz\u00e4hlen.</p>"},{"location":"js/for/#klassische-for-schleife","title":"\ud83e\udde9 Klassische <code>for</code>-Schleife","text":"<p>Die bekannteste Form:</p> <pre><code>for (let i = 0; i &lt; 5; i++) {\n  console.log(\"Zahl:\", i);\n}\n</code></pre>"},{"location":"js/for/#erklarung","title":"Erkl\u00e4rung:","text":"Teil Funktion <code>let i = 0</code> Startwert <code>i &lt; 5</code> Schleife l\u00e4uft, solange das wahr ist <code>i++</code> Z\u00e4hler wird bei jedem Durchlauf erh\u00f6ht <p>\u27a1\ufe0f Gibt aus: <code>0</code>, <code>1</code>, <code>2</code>, <code>3</code>, <code>4</code></p>"},{"location":"js/for/#forof-fur-arrays-und-iterierbares","title":"\ud83d\udd04 <code>for...of</code> \u2013 f\u00fcr Arrays und Iterierbares","text":"<pre><code>const namen = [\"Anna\", \"Ben\", \"Clara\"];\n\nfor (const name of namen) {\n  console.log(name);\n}\n</code></pre> <ul> <li>Geht automatisch Element f\u00fcr Element durch das Array</li> <li>Funktioniert auch mit Strings, Sets, Maps, NodeLists</li> </ul> <p>\u27a1\ufe0f Gibt aus: <code>\"Anna\"</code>, <code>\"Ben\"</code>, <code>\"Clara\"</code></p>"},{"location":"js/for/#forin-fur-objekte-und-arrays-mit-index","title":"\ud83d\udd04 <code>for...in</code> \u2013 f\u00fcr Objekte (und Arrays mit Index)","text":"<pre><code>const person = {\n  name: \"Max\",\n  alter: 30\n};\n\nfor (const eigenschaft in person) {\n  console.log(eigenschaft + \": \" + person[eigenschaft]);\n}\n</code></pre> <ul> <li>Gibt Schl\u00fcssel (Keys) aus</li> <li>Auch f\u00fcr Arrays nutzbar, aber nicht empfohlen</li> </ul> <p>\u27a1\ufe0f Gibt aus: <code>name: Max</code> <code>alter: 30</code></p>"},{"location":"js/for/#unterschied-forof-vs-forin","title":"\ud83e\udde0 Unterschied <code>for...of</code> vs <code>for...in</code>","text":"Zweck <code>for...in</code> <code>for...of</code> Objekte \u2705 Ja \u274c Nein Arrays \u26a0\ufe0f Ja (liefert Index) \u2705 Ja (liefert Wert) Strings \u274c Nein \u2705 Ja Ergebnis Key (String) Wert"},{"location":"js/for/#weitere-varianten","title":"\ud83d\udcda Weitere Varianten","text":""},{"location":"js/for/#ruckwarts-zahlen","title":"\ud83d\udd01 R\u00fcckw\u00e4rts z\u00e4hlen","text":"<pre><code>for (let i = 10; i &gt;= 0; i--) {\n  console.log(i);\n}\n</code></pre> <p>\u27a1\ufe0f Z\u00e4hlt von 10 bis 0 runter</p>"},{"location":"js/for/#mehrfachbedingungen","title":"\ud83d\udd01 Mehrfachbedingungen","text":"<pre><code>for (let i = 0, j = 10; i &lt; j; i++, j--) {\n  console.log(i, j);\n}\n</code></pre> <p>\u27a1\ufe0f Zwei Z\u00e4hler gleichzeitig</p>"},{"location":"js/for/#break-continue","title":"\u23ed\ufe0f <code>break</code> &amp; <code>continue</code>","text":""},{"location":"js/for/#break-schleife-abbrechen","title":"<code>break</code> \u2013 Schleife abbrechen","text":"<pre><code>for (let i = 0; i &lt; 10; i++) {\n  if (i === 5) break;\n  console.log(i); // Nur bis 4\n}\n</code></pre>"},{"location":"js/for/#continue-aktuellen-durchlauf-uberspringen","title":"<code>continue</code> \u2013 aktuellen Durchlauf \u00fcberspringen","text":"<pre><code>for (let i = 0; i &lt; 5; i++) {\n  if (i === 2) continue;\n  console.log(i); // Gibt 0, 1, 3, 4 aus\n}\n</code></pre>"},{"location":"js/for/#array-mit-index-wert","title":"\ud83d\udd01 Array mit Index &amp; Wert","text":"<pre><code>const zahlen = [10, 20, 30];\n\nfor (let i = 0; i &lt; zahlen.length; i++) {\n  console.log(`Index ${i}: ${zahlen[i]}`);\n}\n</code></pre> <p>Oder:</p> <pre><code>zahlen.forEach((wert, index) =&gt; {\n  console.log(`Index ${index}: ${wert}`);\n});\n</code></pre>"},{"location":"js/for/#beispiel-summe-von-array-werten","title":"\ud83e\uddea Beispiel: Summe von Array-Werten","text":"<pre><code>const werte = [5, 8, 3];\nlet summe = 0;\n\nfor (const wert of werte) {\n  summe += wert;\n}\n\nconsole.log(\"Gesamtsumme:\", summe); // 16\n</code></pre>"},{"location":"js/for/#zusammenfassung","title":"\u2705 Zusammenfassung","text":"Schleife Wann verwenden? <code>for</code> Klassisch \u2013 mit Start, Bedingung, Z\u00e4hler <code>for...of</code> Durch Arrays, Strings, Iterables gehen <code>for...in</code> Durch Objekte (Schl\u00fcssel) <code>forEach()</code> Arrays elegant durchlaufen (Callback)"},{"location":"js/funktionen/","title":"\ud83d\udd27 Funktionen","text":"<p>Funktionen sind Bausteine in JavaScript, mit denen du Code einmal schreibst und immer wieder verwenden kannst. Sie helfen, dein Programm \u00fcbersichtlicher und modularer zu gestalten.</p>"},{"location":"js/funktionen/#was-ist-eine-funktion","title":"\ud83d\udccc Was ist eine Funktion?","text":"<p>Eine Funktion ist ein St\u00fcck Code, das einen bestimmten Zweck erf\u00fcllt. Du kannst ihr einen Namen geben, Daten \u00fcbergeben (Parameter) und bekommst bei Bedarf ein Ergebnis zur\u00fcck.</p>"},{"location":"js/funktionen/#beispiel","title":"\u25b6\ufe0f Beispiel:","text":"<pre><code>function sagHallo() {\n  console.log(\"Hallo Welt!\");\n}\n\nsagHallo(); // \u2192 Gibt \"Hallo Welt!\" in der Konsole aus\n</code></pre>"},{"location":"js/funktionen/#arten-von-funktionen","title":"\ud83e\uddf1 Arten von Funktionen","text":""},{"location":"js/funktionen/#1-funktions-deklaration","title":"1\ufe0f\u20e3 Funktions-Deklaration","text":"<pre><code>function addiere(a, b) {\n  return a + b;\n}\n\nconsole.log(addiere(2, 3)); // 5\n</code></pre> <ul> <li>Beginnt mit dem Wort <code>function</code></li> <li>Du kannst sie auch vor ihrer Definition benutzen (Hoisting)</li> </ul>"},{"location":"js/funktionen/#2-funktions-ausdruck-expression","title":"2\ufe0f\u20e3 Funktions-Ausdruck (Expression)","text":"<pre><code>const begruessung = function(name) {\n  return `Hallo, ${name}`;\n};\n\nconsole.log(begruessung(\"Florian\"));\n</code></pre> <ul> <li>Funktion wird einer Variable zugewiesen</li> <li>Erst verf\u00fcgbar, nachdem sie im Code erscheint</li> </ul>"},{"location":"js/funktionen/#3-pfeilfunktion-arrow-function","title":"3\ufe0f\u20e3 Pfeilfunktion (Arrow Function)","text":"<pre><code>const quadrat = (x) =&gt; x * x;\n</code></pre> <p>Oder ausf\u00fchrlicher:</p> <pre><code>const begruessung = (name) =&gt; {\n  return `Hallo, ${name}`;\n};\n</code></pre> <ul> <li>Kurzschreibweise</li> <li>Sehr beliebt f\u00fcr kurze Funktionen</li> <li>Achtung: Hat kein eigenes <code>this</code></li> </ul>"},{"location":"js/funktionen/#4-anonyme-funktion","title":"4\ufe0f\u20e3 Anonyme Funktion","text":"<p>Eine Funktion ohne Namen, z.\u202fB. f\u00fcr Zeitverz\u00f6gerungen:</p> <pre><code>setTimeout(function() {\n  console.log(\"Wird nach 1 Sekunde ausgef\u00fchrt\");\n}, 1000);\n</code></pre>"},{"location":"js/funktionen/#parameter-ruckgabewerte","title":"\ud83d\udd01 Parameter &amp; R\u00fcckgabewerte","text":"<p>Funktionen k\u00f6nnen Werte entgegennehmen (Parameter) und mit <code>return</code> einen Wert zur\u00fcckgeben.</p> <pre><code>function multipliziere(a, b) {\n  return a * b;\n}\n\nlet ergebnis = multipliziere(4, 5); // \u2192 20\n</code></pre>"},{"location":"js/funktionen/#standardwerte-default-parameter","title":"\ud83e\uddee Standardwerte (Default-Parameter)","text":"<p>Falls kein Wert \u00fcbergeben wird, greift ein Standardwert:</p> <pre><code>function begruessung(name = \"Gast\") {\n  console.log(`Willkommen, ${name}!`);\n}\n\nbegruessung();           // Willkommen, Gast!\nbegruessung(\"Anna\");     // Willkommen, Anna!\n</code></pre>"},{"location":"js/funktionen/#rest-parameter-beliebig-viele-argumente","title":"\ud83d\udce6 Rest-Parameter (beliebig viele Argumente)","text":"<pre><code>function summe(...zahlen) {\n  return zahlen.reduce((a, b) =&gt; a + b);\n}\n\nsumme(1, 2, 3); // \u2192 6\n</code></pre> <ul> <li>Mit <code>...</code> kannst du beliebig viele Werte sammeln</li> </ul>"},{"location":"js/funktionen/#callback-funktionen","title":"\ud83e\uddea Callback-Funktionen","text":"<p>Eine Funktion wird als Argument an eine andere Funktion \u00fcbergeben:</p> <pre><code>function verarbeite(callback) {\n  console.log(\"Start\");\n  callback();\n  console.log(\"Ende\");\n}\n\nverarbeite(() =&gt; console.log(\"Ich bin der Callback\"));\n</code></pre>"},{"location":"js/funktionen/#funktionen-werte","title":"\ud83e\udde0 Funktionen = Werte","text":"<p>Funktionen k\u00f6nnen:</p> <ul> <li>In Variablen gespeichert werden</li> <li>An andere Funktionen \u00fcbergeben werden</li> <li>Von Funktionen zur\u00fcckgegeben werden</li> </ul> <p>Das macht JavaScript extrem flexibel.</p>"},{"location":"js/funktionen/#rekursion-funktion-ruft-sich-selbst-auf","title":"\ud83d\udd04 Rekursion \u2013 Funktion ruft sich selbst auf","text":"<pre><code>function fakultaet(n) {\n  if (n &lt;= 1) return 1;\n  return n * fakultaet(n - 1);\n}\n\nconsole.log(fakultaet(5)); // \u2192 120\n</code></pre> <p>\ud83d\udca1 Wird verwendet, um Schritte zu wiederholen, z.\u202fB. bei B\u00e4umen oder mathematischen Aufgaben.</p>"},{"location":"js/funktionen/#iife-sofort-ausgefuhrte-funktion","title":"\ud83d\udee0\ufe0f IIFE \u2013 sofort ausgef\u00fchrte Funktion","text":"<pre><code>(function() {\n  console.log(\"Ich starte direkt!\");\n})();\n</code></pre> <ul> <li>Praktisch, wenn man einmaligen Code ausf\u00fchren will</li> <li>Auch n\u00fctzlich, um Variablen privat zu halten</li> </ul>"},{"location":"js/funktionen/#funktionen-vs-methoden","title":"\ud83d\udcd8 Funktionen vs. Methoden","text":"<pre><code>function globalFunktion() {\n  return \"Ich bin global\";\n}\n\nconst person = {\n  name: \"Florian\",\n  begruessung() {\n    return `Hallo ${this.name}`;\n  }\n};\n</code></pre> <ul> <li>Funktion: unabh\u00e4ngig</li> <li>Methode: geh\u00f6rt zu einem Objekt</li> </ul>"},{"location":"js/ifelse/","title":"\ud83e\udde0 <code>if</code>, <code>else if</code>, <code>else</code>","text":"<p>Mit <code>if</code>-Anweisungen kannst du in JavaScript Entscheidungen treffen. Sie f\u00fchren Code nur dann aus, wenn eine bestimmte Bedingung erf\u00fcllt ist.</p>"},{"location":"js/ifelse/#grundstruktur","title":"\ud83e\udde9 Grundstruktur","text":"<pre><code>if (Bedingung) {\n  // Dieser Block wird ausgef\u00fchrt, wenn die Bedingung wahr ist\n} else if (zweiteBedingung) {\n  // Wird gepr\u00fcft, wenn die erste Bedingung falsch war\n} else {\n  // F\u00e4ngt alles andere ab\n}\n</code></pre>"},{"location":"js/ifelse/#einfaches-beispiel","title":"\u2705 Einfaches Beispiel","text":"<pre><code>let punkte = 85;\n\nif (punkte &gt;= 90) {\n  console.log(\"Note: Sehr gut\");\n} else if (punkte &gt;= 75) {\n  console.log(\"Note: Gut\");\n} else if (punkte &gt;= 60) {\n  console.log(\"Note: Befriedigend\");\n} else {\n  console.log(\"Note: Nicht bestanden\");\n}\n</code></pre>"},{"location":"js/ifelse/#bedingungen-in-javascript","title":"\ud83d\udd0d Bedingungen in JavaScript","text":"<p>Bedingungen sind Ausdr\u00fccke, die entweder <code>true</code> oder <code>false</code> ergeben.</p> <p>Beispiele:</p> <pre><code>x &gt; 10\nname === \"Florian\"\nalter &lt;= 18\npreis !== 0\n</code></pre> <p>Du kannst auch logische Operatoren verwenden:</p> <pre><code>if (alter &gt;= 18 &amp;&amp; land === \"DE\") { ... }\nif (punkte &gt; 70 || bonus === true) { ... }\n</code></pre>"},{"location":"js/ifelse/#was-passiert-bei-false","title":"\ud83d\udeab Was passiert bei <code>false</code>?","text":"<pre><code>if (false) {\n  console.log(\"Dies wird NICHT ausgef\u00fchrt\");\n} else {\n  console.log(\"Das schon!\");\n}\n</code></pre>"},{"location":"js/ifelse/#tipps","title":"\ud83e\udde0 Tipps","text":"<ul> <li>Nur eine Bedingung trifft zu \u2013 sobald eine <code>true</code> ist, wird der Rest \u00fcbersprungen.</li> <li>Bedingungen k\u00f6nnen beliebig verschachtelt werden.</li> <li>Werte wie <code>0</code>, <code>\"\"</code>, <code>null</code>, <code>undefined</code>, <code>NaN</code>, <code>false</code> gelten als falsy.</li> </ul>"},{"location":"js/ifelse/#mini-beispiele","title":"\ud83e\uddea Mini-Beispiele","text":""},{"location":"js/ifelse/#altersprufung","title":"Alterspr\u00fcfung:","text":"<pre><code>let alter = 20;\n\nif (alter &lt; 18) {\n  console.log(\"Minderj\u00e4hrig\");\n} else {\n  console.log(\"Vollj\u00e4hrig\");\n}\n</code></pre>"},{"location":"js/ifelse/#benutzerrolle","title":"Benutzerrolle:","text":"<pre><code>let rolle = \"admin\";\n\nif (rolle === \"admin\") {\n  console.log(\"Zugriff erlaubt\");\n} else if (rolle === \"editor\") {\n  console.log(\"Bearbeitung erlaubt\");\n} else {\n  console.log(\"Nur Leserechte\");\n}\n</code></pre>"},{"location":"js/ifelse/#optional-kurzform-mit-ternarem-operator","title":"\ud83d\udce6 Optional: Kurzform mit tern\u00e4rem Operator","text":"<pre><code>let status = (punkte &gt;= 50) ? \"Bestanden\" : \"Nicht bestanden\";\n</code></pre>"},{"location":"js/ifelse/#zusammenfassung","title":"\u2705 Zusammenfassung","text":"Schl\u00fcsselwort Funktion <code>if</code> F\u00fchrt Code aus, wenn Bedingung wahr ist <code>else if</code> Weitere Bedingung, wenn vorherige falsch <code>else</code> Wird ausgef\u00fchrt, wenn alle Bedingungen falsch sind"},{"location":"js/klasse/","title":"\ud83e\uddf1 Klassen (<code>class</code>)","text":"<p>Mit Klassen kannst du Objektvorlagen erstellen, die Eigenschaften (Daten) und Methoden (Funktionen) kombinieren. Sie helfen, deinen Code strukturierter, wiederverwendbarer und objektorientiert zu gestalten.</p> <p>Klassen wurden mit ES6 (2015) eingef\u00fchrt und sind syntaktischer Zucker \u00fcber dem Prototypensystem von JavaScript.</p>"},{"location":"js/klasse/#grundstruktur-einer-klasse","title":"\ud83d\udccc Grundstruktur einer Klasse","text":"<pre><code>class Auto {\n  constructor(marke, ps) {\n    this.marke = marke;\n    this.ps = ps;\n  }\n\n  starten() {\n    console.log(`${this.marke} startet mit ${this.ps} PS.`);\n  }\n}\n</code></pre>"},{"location":"js/klasse/#objekt-aus-klasse-erzeugen","title":"\ud83e\uddea Objekt aus Klasse erzeugen","text":"<pre><code>const meinAuto = new Auto(\"BMW\", 200);\nmeinAuto.starten(); // BMW startet mit 200 PS.\n</code></pre> <p>Du verwendest <code>new</code>, um ein neues Instanz-Objekt der Klasse zu erzeugen.</p>"},{"location":"js/klasse/#constructor-der-bauplan","title":"\ud83d\udd27 <code>constructor()</code> \u2013 Der Bauplan","text":"<ul> <li>Die <code>constructor()</code>-Methode wird automatisch aufgerufen, wenn eine neue Instanz erzeugt wird.</li> <li>Sie dient zur Initialisierung von Eigenschaften (z.\u202fB. <code>this.name</code>).</li> </ul>"},{"location":"js/klasse/#methoden-in-klassen","title":"\ud83d\udd01 Methoden in Klassen","text":"<p>Methoden sind einfach Funktionen innerhalb einer Klasse:</p> <pre><code>class Rechner {\n  addiere(x, y) {\n    return x + y;\n  }\n}\n\nconst r = new Rechner();\nconsole.log(r.addiere(2, 3)); // 5\n</code></pre>"},{"location":"js/klasse/#this-in-klassen","title":"\ud83e\udde0 <code>this</code> in Klassen","text":"<ul> <li>Innerhalb einer Methode verweist <code>this</code> auf die aktuelle Instanz.</li> <li>Dadurch kannst du auf Eigenschaften und Methoden derselben Klasse zugreifen.</li> </ul>"},{"location":"js/klasse/#vererbung-mit-extends","title":"\ud83e\uddec Vererbung mit <code>extends</code>","text":"<p>Du kannst eine Klasse von einer anderen erben lassen:</p> <pre><code>class Tier {\n  constructor(name) {\n    this.name = name;\n  }\n\n  sprechen() {\n    console.log(`${this.name} macht ein Ger\u00e4usch.`);\n  }\n}\n\nclass Hund extends Tier {\n  sprechen() {\n    console.log(`${this.name} bellt.`);\n  }\n}\n\nconst rex = new Hund(\"Rex\");\nrex.sprechen(); // Rex bellt.\n</code></pre>"},{"location":"js/klasse/#super-auf-elternklasse-zugreifen","title":"\ud83d\udd17 <code>super()</code> \u2013 Auf Elternklasse zugreifen","text":"<p>Wenn du von einer Klasse erbst, kannst du mit <code>super()</code> den Konstruktor oder Methoden der Elternklasse aufrufen:</p> <pre><code>class Katze extends Tier {\n  constructor(name) {\n    super(name); // ruft Tier's constructor auf\n  }\n}\n</code></pre>"},{"location":"js/klasse/#private-eigenschaften-ab-es2022","title":"\ud83d\udd12 Private Eigenschaften (ab ES2022)","text":"<pre><code>class Benutzer {\n  #passwort;\n\n  constructor(name, passwort) {\n    this.name = name;\n    this.#passwort = passwort;\n  }\n\n  pruefen(pw) {\n    return pw === this.#passwort;\n  }\n}\n\nconst u = new Benutzer(\"Anna\", \"geheim\");\nu.pruefen(\"geheim\"); // true\nu.#passwort; // \u274c Fehler: privat\n</code></pre>"},{"location":"js/klasse/#static-methoden-eigenschaften","title":"\u2699\ufe0f Static Methoden &amp; Eigenschaften","text":"<ul> <li>Geh\u00f6ren zur Klasse, nicht zur Instanz:</li> </ul> <pre><code>class Mathe {\n  static quadrieren(x) {\n    return x * x;\n  }\n}\n\nconsole.log(Mathe.quadrieren(5)); // 25\n</code></pre>"},{"location":"js/klasse/#klassen-vs-funktionen","title":"\ud83e\udde0 Klassen vs. Funktionen","text":"Aspekt Funktion Klasse Syntax flexibel, traditionell moderner, klarer Konstruktor beliebige Funktion <code>constructor()</code> Vererbung \u00fcber <code>prototype</code> mit <code>extends</code>, <code>super()</code> Kapselung schwieriger mit <code>#private</code> m\u00f6glich"},{"location":"js/klasse/#mini-beispiel-bankkonto","title":"\ud83d\udd01 Mini-Beispiel: Bankkonto","text":"<pre><code>class Konto {\n  constructor(name, saldo) {\n    this.name = name;\n    this.saldo = saldo;\n  }\n\n  einzahlen(betrag) {\n    this.saldo += betrag;\n  }\n\n  anzeigen() {\n    console.log(`${this.name} hat \u20ac${this.saldo}`);\n  }\n}\n\nconst konto = new Konto(\"Florian\", 100);\nkonto.einzahlen(50);\nkonto.anzeigen(); // Florian hat \u20ac150\n</code></pre>"},{"location":"js/klasse/#zusammenfassung","title":"\u2705 Zusammenfassung","text":"Element Zweck <code>class</code> Neue Klasse definieren <code>constructor()</code> Startwerte setzen <code>this</code> Aktuelle Instanz <code>extends</code> Vererbung von anderer Klasse <code>super()</code> Zugriff auf Elternklasse <code>static</code> Funktion geh\u00f6rt nicht zur Instanz <code>#privat</code> Private Felder ab ES2022"},{"location":"js/math/","title":"\ud83d\udcd0 Math (Mathematische Funktionen)","text":"<p>Das <code>Math</code>-Objekt in JavaScript stellt dir viele mathematische Funktionen und Konstanten zur Verf\u00fcgung \u2013 von Rundungen und Zufallszahlen bis zu Trigonometrie und Potenzen.</p> <p><code>Math</code> ist kein Konstruktor \u2013 du musst es nicht mit <code>new</code> verwenden.</p>"},{"location":"js/math/#grundlegende-verwendung","title":"\ud83d\udccc Grundlegende Verwendung","text":"<pre><code>Math.PI           // 3.14159...\nMath.E            // Eulersche Zahl \u2248 2.718\nMath.SQRT2        // \u221a2\nMath.LN2          // nat\u00fcrlicher Logarithmus von 2\n</code></pre>"},{"location":"js/math/#rundungsfunktionen","title":"\ud83d\udd22 Rundungsfunktionen","text":"Methode Beschreibung Beispiel <code>Math.round(x)</code> Rundet auf/ab (normal) <code>Math.round(4.6)</code> \u2192 <code>5</code> <code>Math.floor(x)</code> Rundet ab <code>Math.floor(4.9)</code> \u2192 <code>4</code> <code>Math.ceil(x)</code> Rundet auf <code>Math.ceil(4.1)</code> \u2192 <code>5</code> <code>Math.trunc(x)</code> Entfernt Nachkommastellen <code>Math.trunc(4.9)</code> \u2192 <code>4</code>"},{"location":"js/math/#zufallszahlen","title":"\ud83c\udfb2 Zufallszahlen","text":"<pre><code>Math.random(); // Zahl zwischen 0 (inkl.) und 1 (exkl.)\n</code></pre>"},{"location":"js/math/#zufallszahl-in-bestimmtem-bereich","title":"\ud83e\udde9 Zufallszahl in bestimmtem Bereich","text":"<pre><code>function zufall(min, max) {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nzufall(1, 10); // z.\u202fB. 7\n</code></pre>"},{"location":"js/math/#rechnen","title":"\u2795 Rechnen","text":"Methode Beschreibung <code>Math.max(a, b, \u2026)</code> Gr\u00f6\u00dfter Wert <code>Math.min(a, b, \u2026)</code> Kleinster Wert <code>Math.abs(x)</code> Absoluter Betrag <code>Math.pow(x, y)</code> Potenz (x hoch y) <code>Math.sqrt(x)</code> Quadratwurzel <code>Math.cbrt(x)</code> Kubikwurzel <code>Math.sign(x)</code> -1, 0 oder 1 je nach Vorzeichen <code>Math.hypot(x, y)</code> \u221a(x\u00b2 + y\u00b2), z.\u202fB. f\u00fcr Vektoren"},{"location":"js/math/#trigonometrie","title":"\ud83d\udcd0 Trigonometrie","text":"<p>Alle Winkelangaben in Radiant (nicht Grad!)</p> <pre><code>Math.sin(x);   // Sinus\nMath.cos(x);   // Kosinus\nMath.tan(x);   // Tangens\nMath.asin(x);  // Arkussinus (umgekehrte Funktion)\n</code></pre>"},{"location":"js/math/#grad-in-radiant-umrechnen","title":"Grad in Radiant umrechnen:","text":"<pre><code>function degToRad(deg) {\n  return deg * (Math.PI / 180);\n}\n\nMath.sin(degToRad(90)); // \u2248 1\n</code></pre>"},{"location":"js/math/#logarithmen-exponentialfunktionen","title":"\ud83e\uddee Logarithmen &amp; Exponentialfunktionen","text":"Methode Bedeutung <code>Math.log(x)</code> nat\u00fcrlicher Logarithmus (Basis e) <code>Math.log10(x)</code> Logarithmus zur Basis 10 <code>Math.exp(x)</code> e hoch x"},{"location":"js/math/#beispiel-kreisflache-berechnen","title":"\ud83e\udde0 Beispiel: Kreisfl\u00e4che berechnen","text":"<pre><code>function kreisFlaeche(radius) {\n  return Math.PI * radius * radius;\n}\n\nconsole.log(kreisFlaeche(5)); // \u2248 78.54\n</code></pre>"},{"location":"js/math/#werte-begrenzen-clamping","title":"\ud83d\udd04 Werte begrenzen (Clamping)","text":"<pre><code>function clamp(value, min, max) {\n  return Math.max(min, Math.min(max, value));\n}\n\nclamp(120, 0, 100); // \u2192 100\n</code></pre>"},{"location":"js/math/#zusammenfassung","title":"\u2705 Zusammenfassung","text":"Aufgabe Methode Runden <code>round()</code>, <code>floor()</code>, <code>ceil()</code> Zufallswert <code>random()</code> Betrag <code>abs()</code> Potenz / Wurzel <code>pow()</code>, <code>sqrt()</code>, <code>cbrt()</code> Maximum / Minimum <code>max()</code>, <code>min()</code> Trigonometrie <code>sin()</code>, <code>cos()</code>, <code>tan()</code> Logarithmus / Exponential <code>log()</code>, <code>exp()</code>"},{"location":"js/operatoren/","title":"\u2699\ufe0f Operatoren","text":"<p>In JavaScript helfen dir Operatoren, bestimmte Aktionen auszuf\u00fchren \u2013 z.\u202fB. rechnen, vergleichen, Texte verketten oder Bedingungen pr\u00fcfen. Sie geh\u00f6ren zu den absoluten Grundlagen beim Programmieren.</p>"},{"location":"js/operatoren/#ubersicht-der-operatoren","title":"\ud83d\udce6 \u00dcbersicht der Operatoren","text":"Kategorie Beschreibung Arithmetisch Zahlen addieren, subtrahieren, multiplizieren usw. Vergleich Sind Werte gleich? Ist etwas gr\u00f6\u00dfer oder kleiner? Logisch Bedingungen miteinander verkn\u00fcpfen Zuweisung Werte in Variablen speichern oder ver\u00e4ndern Strings Texte zusammenf\u00fcgen Typpr\u00fcfung Herausfinden, welcher Datentyp vorliegt Sonstige z.\u202fB. <code>? :</code> oder <code>delete</code>"},{"location":"js/operatoren/#arithmetische-operatoren-rechnen-in-javascript","title":"\u2795 Arithmetische Operatoren \u2013 Rechnen in JavaScript","text":"<pre><code>let x = 10;\nlet y = 3;\n\nx + y   // 13 \u2192 Plus\nx - y   // 7 \u2192 Minus\nx * y   // 30 \u2192 Mal\nx / y   // 3.333... \u2192 Geteilt\nx % y   // 1 \u2192 Rest (Modulo)\nx ** y  // 1000 \u2192 Potenz (10\u00b3)\n</code></pre>"},{"location":"js/operatoren/#hoch-und-runterzahlen-inkrement-dekrement","title":"\ud83d\udd01 Hoch- und runterz\u00e4hlen: Inkrement &amp; Dekrement","text":"<pre><code>let i = 5;\n\ni++;    // i wird um 1 erh\u00f6ht (nachher)\n++i;    // i wird sofort erh\u00f6ht\n\ni--;    // i wird um 1 verringert\n--i;    // sofort verringert\n</code></pre> <p>\ud83d\udca1 Wird oft in Schleifen verwendet!</p>"},{"location":"js/operatoren/#vergleichsoperatoren-sind-werte-gleich","title":"\ud83d\udccf Vergleichsoperatoren \u2013 Sind Werte gleich?","text":"Operator Bedeutung Beispiel (<code>a = 5</code>, <code>b = \"5\"</code>) <code>==</code> Ist gleich (nur Wert) <code>a == b</code> \u2192 <code>true</code> <code>===</code> Streng gleich (Typ &amp; Wert) <code>a === b</code> \u2192 <code>false</code> <code>!=</code> Ungleich (Wert) <code>a != b</code> \u2192 <code>false</code> <code>!==</code> Streng ungleich <code>a !== b</code> \u2192 <code>true</code> <code>&gt;</code> <code>&lt;</code> Gr\u00f6\u00dfer / Kleiner <code>a &gt; 3</code> \u2192 <code>true</code> <code>&gt;=</code> <code>&lt;=</code> Gr\u00f6\u00dfer-/Kleiner-gleich <code>a &lt;= 5</code> \u2192 <code>true</code> <p>\ud83e\udde0 Merke: Immer <code>===</code> statt <code>==</code> verwenden, um sicherzugehen, dass auch der Datentyp stimmt.</p>"},{"location":"js/operatoren/#logische-operatoren-bedingungen-verbinden","title":"\ud83d\udd17 Logische Operatoren \u2013 Bedingungen verbinden","text":"<pre><code>true &amp;&amp; false   // false \u2192 UND (beide m\u00fcssen stimmen)\ntrue || false   // true  \u2192 ODER (eine reicht)\n!true           // false \u2192 NICHT (umkehren)\n</code></pre> Symbol Name Erkl\u00e4rung <code>&amp;&amp;</code> UND Nur <code>true</code>, wenn beide stimmen <code>||</code> ODER <code>true</code>, wenn mind. eine stimmt <code>!</code> NICHT Wandelt <code>true</code> in <code>false</code> um"},{"location":"js/operatoren/#zuweisungsoperatoren-variablen-verandern","title":"\ud83e\uddee Zuweisungsoperatoren \u2013 Variablen ver\u00e4ndern","text":"<pre><code>let a = 10;\n\na += 5;  // a = a + 5 \u2192 15\na -= 3;  // a = a - 3 \u2192 12\na *= 2;  // a = a * 2 \u2192 24\na /= 6;  // a = a / 6 \u2192 4\na %= 3;  // a = a % 3 \u2192 1\na **= 2; // a = a ** 2 \u2192 1\n</code></pre>"},{"location":"js/operatoren/#texte-verketten-strings","title":"\ud83e\uddf5 Texte verketten (Strings)","text":"<pre><code>let vorname = \"Max\";\nlet nachname = \"Muster\";\n\nlet name = vorname + \" \" + nachname;\n// Max Muster\n</code></pre>"},{"location":"js/operatoren/#der-ternare-operator-kurzform-fur-ifelse","title":"\u2753 Der tern\u00e4re Operator \u2013 Kurzform f\u00fcr if/else","text":"<pre><code>let alter = 20;\nlet status = (alter &gt;= 18) ? \"Erwachsen\" : \"Kind\";\n</code></pre> <p>Bedeutung:</p> <pre><code>// Wenn alter \u2265 18 \u2192 \"Erwachsen\", sonst \u2192 \"Kind\"\n</code></pre>"},{"location":"js/operatoren/#typ-prufen-mit-typeof-instanceof-in","title":"\ud83d\udd0d Typ pr\u00fcfen mit <code>typeof</code>, <code>instanceof</code>, <code>in</code>","text":"<pre><code>typeof 123            // \"number\"\ntypeof \"Hallo\"        // \"string\"\ntypeof null           // \"object\" (Sonderfall!)\n\n[1, 2, 3] instanceof Array  // true\n\n\"length\" in [1, 2, 3]       // true\n</code></pre>"},{"location":"js/operatoren/#weitere-wichtige-operatoren","title":"\ud83d\udcd8 Weitere wichtige Operatoren","text":"Operator Bedeutung <code>delete</code> L\u00f6scht eine Eigenschaft aus einem Objekt <code>typeof</code> Zeigt an, welcher Typ vorliegt (<code>\"number\"</code>, <code>\"object\"</code>, \u2026) <code>in</code> Pr\u00fcft, ob eine Eigenschaft vorhanden ist <code>instanceof</code> Ist ein Objekt eine Instanz eines bestimmten Typs? <code>??</code> Nullish Coalescing: liefert rechten Wert, wenn links <code>null</code> oder <code>undefined</code> ist <pre><code>let name = null;\nlet username = name ?? \"Gast\";  // \u2192 \"Gast\"\n</code></pre>"},{"location":"js/operatoren/#mini-beispiel-mit-allem-kombiniert","title":"\ud83e\uddea Mini-Beispiel mit allem kombiniert","text":"<pre><code>let score = 85;\n\nlet note = (score &gt;= 90) ? \"Sehr gut\" :\n           (score &gt;= 75) ? \"Gut\" :\n           (score &gt;= 60) ? \"Befriedigend\" :\n           \"Nicht bestanden\";\n\nconsole.log(note); // Gut\n</code></pre>"},{"location":"js/vardata/","title":"\ud83e\uddee Variablen &amp; Datentypen","text":"<p>In JavaScript dienen Variablen dazu, Daten zu speichern und im Code wiederzuverwenden. Sie sind flexibel, dynamisch typisiert und ein zentrales Werkzeug beim Programmieren.</p>"},{"location":"js/vardata/#was-ist-eine-variable","title":"\ud83d\udcdd Was ist eine Variable?","text":"<p>Eine Variable ist ein benannter Speicherplatz, der einen Wert enth\u00e4lt. Der Wert kann sich im Laufe des Programms \u00e4ndern (mutable) \u2013 je nach Deklarationsart.</p>"},{"location":"js/vardata/#variablen-deklarieren","title":"\ud83d\udccc Variablen deklarieren","text":""},{"location":"js/vardata/#var","title":"\ud83d\udd39 <code>var</code>","text":"<pre><code>var x = 5;\n</code></pre> <ul> <li>\u00c4lterer Standard (seit 1995)</li> <li>Funktionaler G\u00fcltigkeitsbereich</li> <li>Wird gehoisted (nach oben gezogen)</li> <li>Wird heute selten empfohlen</li> </ul>"},{"location":"js/vardata/#let","title":"\ud83d\udd39 <code>let</code>","text":"<pre><code>let name = \"Anna\";\n</code></pre> <ul> <li>Blockscoped (z.\u202fB. <code>{ ... }</code>)</li> <li>Wert kann ge\u00e4ndert werden</li> <li>Empfohlene Standardvariante</li> </ul>"},{"location":"js/vardata/#const","title":"\ud83d\udd39 <code>const</code>","text":"<pre><code>const PI = 3.14;\n</code></pre> <ul> <li>Blockscoped</li> <li>Nicht neu zuweisbar (konstant)</li> <li>Achtung: Objekte und Arrays bleiben ver\u00e4nderbar!</li> </ul> <pre><code>const arr = [1, 2];\narr.push(3); // Erlaubt!\n</code></pre>"},{"location":"js/vardata/#dynamische-typisierung","title":"\ud83e\udde0 Dynamische Typisierung","text":"<p>JavaScript ist nicht typensicher \u2013 der Typ ergibt sich aus dem gespeicherten Wert:</p> <pre><code>let x = 5;        // Zahl\nx = \"Hallo\";      // jetzt: String\n</code></pre>"},{"location":"js/vardata/#primitive-datentypen","title":"\ud83d\udd20 Primitive Datentypen","text":"Typ Beispiel Beschreibung <code>string</code> <code>\"Hallo\"</code>, <code>'Test'</code> Textinhalt <code>number</code> <code>42</code>, <code>3.14</code>, <code>-7</code> Ganzzahlen &amp; Flie\u00dfkommazahlen <code>boolean</code> <code>true</code>, <code>false</code> Logische Werte <code>undefined</code> <code>let a;</code> \u2192 <code>a === undefined</code> Variable deklariert, aber kein Wert <code>null</code> <code>let b = null</code> Absichtliche Leere <code>bigint</code> <code>123n</code> F\u00fcr gro\u00dfe Ganzzahlen <code>symbol</code> <code>Symbol(\"id\")</code> Einzigartige, unver\u00e4nderliche Kennung"},{"location":"js/vardata/#strukturelle-datentypen-referenztypen","title":"\ud83d\udce6 Strukturelle Datentypen (Referenztypen)","text":"Typ Beispiel Beschreibung <code>object</code> <code>{ name: \"Anna\", age: 30 }</code> Schl\u00fcssel-Wert-Paare <code>array</code> <code>[1, 2, 3]</code> Auflistung von Werten <code>function</code> <code>function greet() {}</code> Funktionen sind auch Objekte <code>date</code> <code>new Date()</code> Zeit- und Datumsobjekte <code>regexp</code> <code>/abc/i</code> Regul\u00e4re Ausdr\u00fccke <code>map</code> <code>new Map()</code> Schl\u00fcssel-Wert-Kollektion (beliebige Schl\u00fcssel) <code>set</code> <code>new Set()</code> Einfache Liste ohne Duplikate"},{"location":"js/vardata/#typen-prufen","title":"\ud83d\udd0d Typen pr\u00fcfen","text":"<pre><code>typeof \"Hallo\"    // \"string\"\ntypeof 42         // \"number\"\ntypeof true       // \"boolean\"\ntypeof undefined  // \"undefined\"\ntypeof null       // \"object\" \u2190 historischer Bug\ntypeof {}         // \"object\"\ntypeof []         // \"object\"\ntypeof function() {} // \"function\"\n</code></pre> <p>F\u00fcr Arrays und <code>null</code> besser:</p> <pre><code>Array.isArray([]);    // true\nvalue === null;       // true\n</code></pre>"},{"location":"js/vardata/#typumwandlung-casting","title":"\ud83c\udfaf Typumwandlung (Casting)","text":""},{"location":"js/vardata/#explizit","title":"\ud83d\udd38 Explizit","text":"<pre><code>Number(\"5\");       // 5\nString(123);       // \"123\"\nBoolean(0);        // false\n</code></pre>"},{"location":"js/vardata/#implizit","title":"\ud83d\udd38 Implizit","text":"<pre><code>\"5\" + 2;           // \"52\" (String)\n\"5\" - 2;           // 3 (Number)\ntrue + false;      // 1\n</code></pre>"},{"location":"js/vardata/#const-let-var-im-vergleich","title":"\ud83d\udd10 <code>const</code>, <code>let</code>, <code>var</code> im Vergleich","text":"Eigenschaft <code>var</code> <code>let</code> <code>const</code> G\u00fcltigkeitsbereich Funktion Block Block Neuzuweisung \u2714 \u2714 \u274c Wiederdeklaration \u2714 \u274c \u274c Hoisting \u2714 (initial <code>undefined</code>) \u2714 (kein Zugriff vorher) \u2714 (kein Zugriff vorher)"},{"location":"js/vardata/#beispiel","title":"\ud83d\udcda Beispiel","text":"<pre><code>let vorname = \"Lisa\";\nconst alter = 28;\nvar status = \"aktiv\";\n\nconsole.log(`${vorname} ist ${alter} Jahre alt.`); // Lisa ist 28 Jahre alt\n</code></pre>"},{"location":"js/vardata/#teste-dich-selbst","title":"\ud83e\uddea Teste dich selbst","text":"<ol> <li>Was ist der Unterschied zwischen <code>null</code> und <code>undefined</code>?</li> <li>Wann verwendet man <code>const</code>, wann <code>let</code>?</li> <li>Was gibt <code>typeof null</code> zur\u00fcck?</li> </ol>"},{"location":"js/websocket/","title":"\ud83c\udf10 WebSockets","text":"<p>WebSockets erm\u00f6glichen eine dauerhafte, bidirektionale Verbindung zwischen Client (Browser) und Server. Ideal f\u00fcr Live-Daten, wie Chats, Echtzeit-Updates, Spiele, B\u00f6rsenkurse oder IoT.</p> <p>Anders als <code>fetch</code> oder <code>AJAX</code> basiert WebSocket nicht auf einzelnen HTTP-Anfragen, sondern auf einem offenen Kanal, der Daten jederzeit senden und empfangen kann.</p>"},{"location":"js/websocket/#was-ist-ein-websocket","title":"\ud83e\udde9 Was ist ein WebSocket?","text":"<p>Ein Protokoll (<code>ws://</code> oder <code>wss://</code>), das den st\u00e4ndigen Austausch zwischen Client und Server erm\u00f6glicht:</p> <ul> <li>Schnell</li> <li>Geringe Latenz</li> <li>Beidseitig (Client \u2194 Server)</li> <li>Ideal f\u00fcr Realtime-Kommunikation</li> </ul>"},{"location":"js/websocket/#verbindung-aufbauen","title":"\ud83d\udd0c Verbindung aufbauen","text":"<pre><code>const socket = new WebSocket(\"wss://echo.websocket.org\");\n\nsocket.onopen = () =&gt; {\n  console.log(\"\u2705 Verbindung ge\u00f6ffnet\");\n  socket.send(\"Hallo Server!\");\n};\n\nsocket.onmessage = (event) =&gt; {\n  console.log(\"\ud83d\udce9 Nachricht erhalten:\", event.data);\n};\n\nsocket.onerror = (error) =&gt; {\n  console.error(\"\u274c Fehler:\", error);\n};\n\nsocket.onclose = () =&gt; {\n  console.log(\"\ud83d\udd0c Verbindung geschlossen\");\n};\n</code></pre> <p><code>wss://</code> ist verschl\u00fcsselt (wie HTTPS), <code>ws://</code> ist unverschl\u00fcsselt (wie HTTP)</p>"},{"location":"js/websocket/#daten-senden","title":"\ud83d\udce6 Daten senden","text":"<pre><code>socket.send(\"Hallo Welt\");\n</code></pre> <ul> <li>Du kannst einfache Strings oder mit <code>JSON.stringify()</code> auch Objekte senden.</li> </ul> <pre><code>socket.send(JSON.stringify({ benutzer: \"Max\", nachricht: \"Hi!\" }));\n</code></pre>"},{"location":"js/websocket/#daten-empfangen","title":"\ud83d\udce5 Daten empfangen","text":"<pre><code>socket.onmessage = function(event) {\n  const daten = event.data;\n  console.log(\"Server sagt:\", daten);\n};\n</code></pre>"},{"location":"js/websocket/#verbindung-schlieen","title":"\u274c Verbindung schlie\u00dfen","text":"<pre><code>socket.close();\n</code></pre> <p>Optionale Parameter:</p> <pre><code>socket.close(1000, \"Normales Ende\");\n</code></pre>"},{"location":"js/websocket/#beispiel-echo-dienst-nur-zu-testzwecken","title":"\ud83e\uddea Beispiel: Echo-Dienst (nur zu Testzwecken)","text":"<pre><code>const socket = new WebSocket(\"wss://echo.websocket.org\");\n\nsocket.onopen = () =&gt; {\n  socket.send(\"Testnachricht\");\n};\n\nsocket.onmessage = (event) =&gt; {\n  alert(\"Antwort vom Server: \" + event.data);\n};\n</code></pre>"},{"location":"js/websocket/#statuswerte","title":"\ud83d\udcd8 Statuswerte","text":"<pre><code>socket.readyState\n</code></pre> Wert Bedeutung 0 <code>CONNECTING</code> 1 <code>OPEN</code> 2 <code>CLOSING</code> 3 <code>CLOSED</code>"},{"location":"js/websocket/#json-handling-typisch","title":"\ud83e\udde0 JSON-Handling (typisch)","text":"<pre><code>socket.onmessage = (event) =&gt; {\n  const daten = JSON.parse(event.data);\n  console.log(daten.typ, daten.nachricht);\n};\n</code></pre>"},{"location":"js/websocket/#anwendungsszenarien","title":"\ud83d\udee0 Anwendungsszenarien","text":"<ul> <li>\u2705 Chats</li> <li>\ud83d\udcc8 B\u00f6rsenticker</li> <li>\ud83c\udfae Echtzeit-Spiele</li> <li>\ud83d\udece\ufe0f Notifications</li> <li>\ud83d\udce1 IoT / Ger\u00e4tekommunikation</li> </ul>"},{"location":"js/websocket/#sicherheit-beachten","title":"\ud83d\udea7 Sicherheit beachten!","text":"<ul> <li>Verwende <code>wss://</code> (WebSocket Secure)</li> <li>Authentifiziere Benutzer, z.\u202fB. mit Tokens</li> <li>Verwalte Timeouts &amp; fehlerhafte Verbindungen</li> <li>Nutze Fallbacks (Long Polling etc.)</li> </ul>"},{"location":"js/websocket/#reconnect-logik-basisidee","title":"\ud83d\udd01 Reconnect-Logik (Basisidee)","text":"<pre><code>let socket;\n\nfunction verbinde() {\n  socket = new WebSocket(\"wss://example.com\");\n\n  socket.onclose = () =&gt; {\n    console.log(\"Verbindung verloren. Neuer Versuch in 5 Sek...\");\n    setTimeout(verbinde, 5000);\n  };\n}\n\nverbinde();\n</code></pre>"},{"location":"js/websocket/#zusammenfassung","title":"\u2705 Zusammenfassung","text":"Methode / Event Bedeutung <code>new WebSocket(url)</code> Verbindung aufbauen <code>socket.send()</code> Nachricht senden <code>socket.onmessage</code> Nachricht empfangen <code>socket.close()</code> Verbindung beenden <code>onopen</code> / <code>onclose</code> Verbindungsstatus \u00fcberwachen <code>onerror</code> Fehlerbehandlung"},{"location":"js/array/array/","title":"\ud83d\udcda Arrays","text":"<p>Arrays sind geordnete Listen in JavaScript. Sie erlauben es dir, mehrere Werte in einer einzigen Variablen zu speichern \u2013 z.\u202fB. Namen, Zahlen, Objekte oder gemischte Datentypen.</p>"},{"location":"js/array/array/#was-ist-ein-array","title":"\ud83d\udccc Was ist ein Array?","text":"<p>Ein Array ist ein Container f\u00fcr Werte in einer festgelegten Reihenfolge:</p> <pre><code>const farben = [\"rot\", \"gr\u00fcn\", \"blau\"];\n</code></pre> <p>\u27a1\ufe0f Jeder Eintrag hat einen Index, beginnend bei <code>0</code>.</p>"},{"location":"js/array/array/#zugriff-auf-elemente","title":"\ud83d\udd22 Zugriff auf Elemente","text":"<pre><code>console.log(farben[0]); // \"rot\"\nconsole.log(farben[2]); // \"blau\"\n</code></pre>"},{"location":"js/array/array/#elemente-andern","title":"\u270f\ufe0f Elemente \u00e4ndern","text":"<pre><code>farben[1] = \"gelb\";\nconsole.log(farben); // [\"rot\", \"gelb\", \"blau\"]\n</code></pre>"},{"location":"js/array/array/#neue-elemente-hinzufugen","title":"\u2795 Neue Elemente hinzuf\u00fcgen","text":"<pre><code>farben.push(\"lila\");     // ans Ende\nfarben.unshift(\"pink\");  // an den Anfang\n</code></pre>"},{"location":"js/array/array/#elemente-entfernen","title":"\u274c Elemente entfernen","text":"<pre><code>farben.pop();    // entfernt letztes Element\nfarben.shift();  // entfernt erstes Element\n</code></pre>"},{"location":"js/array/array/#array-erstellen","title":"\ud83e\uddf1 Array erstellen","text":"<pre><code>const leer = [];\nconst zahlen = [1, 2, 3, 4];\nconst gemischt = [\"Text\", 42, true];\n</code></pre>"},{"location":"js/array/array/#uber-ein-array-iterieren","title":"\ud83d\udd01 \u00dcber ein Array iterieren","text":"<pre><code>for (let i = 0; i &lt; farben.length; i++) {\n  console.log(farben[i]);\n}\n\n// Oder:\nfarben.forEach(farbe =&gt; console.log(farbe));\n</code></pre>"},{"location":"js/array/array/#nutzliche-array-methoden","title":"\ud83d\udd27 N\u00fctzliche Array-Methoden","text":"Methode Beschreibung <code>push()</code> ans Ende anh\u00e4ngen <code>pop()</code> letztes Element entfernen <code>unshift()</code> an Anfang einf\u00fcgen <code>shift()</code> erstes Element entfernen <code>length</code> Anzahl der Elemente <code>includes()</code> pr\u00fcft, ob ein Wert enthalten ist <code>indexOf()</code> Position eines Elements (oder -1) <code>slice()</code> Teilarray erzeugen <code>splice()</code> Elemente entfernen/ersetzen <code>join()</code> Array zu String verbinden <code>reverse()</code> Reihenfolge umdrehen <code>sort()</code> sortieren (Standard: alphabetisch)"},{"location":"js/array/array/#beispiel-splice-slice","title":"\ud83e\uddea Beispiel: <code>splice()</code> &amp; <code>slice()</code>","text":"<pre><code>const zahlen = [1, 2, 3, 4, 5];\n\nlet teil = zahlen.slice(1, 3);  // [2, 3] \u2013 Original bleibt\nzahlen.splice(2, 1);           // entfernt 1 Element ab Index 2\n</code></pre>"},{"location":"js/array/array/#suche-prufung","title":"\ud83d\udd0d Suche &amp; Pr\u00fcfung","text":"<pre><code>zahlen.includes(3);   // true\nzahlen.indexOf(4);    // z.\u202fB. 2\n</code></pre>"},{"location":"js/array/array/#mapping-filtern","title":"\ud83c\udfaf Mapping &amp; Filtern","text":"<pre><code>const quadrate = zahlen.map(n =&gt; n * n);\nconst gerade = zahlen.filter(n =&gt; n % 2 === 0);\n</code></pre>"},{"location":"js/array/array/#transformation","title":"\ud83c\udf9b\ufe0f Transformation","text":"<pre><code>const namen = [\"Max\", \"Anna\", \"Luca\"];\nconsole.log(namen.join(\", \")); // \"Max, Anna, Luca\"\n</code></pre>"},{"location":"js/array/array/#mehrdimensionale-arrays-arrays-in-arrays","title":"\ud83e\udde0 Mehrdimensionale Arrays (Arrays in Arrays)","text":"<pre><code>const matrix = [\n  [1, 2],\n  [3, 4]\n];\n\nconsole.log(matrix[0][1]); // 2\n</code></pre>"},{"location":"js/array/array/#array-vs-objekt","title":"\ud83e\uddfe Array vs. Objekt","text":"Typ Verwendung Array geordnete Liste (Index) Objekt benannte Daten (Key:Value)"},{"location":"js/array/array/#tipps","title":"\u2705 Tipps","text":"<ul> <li>Arrays sind ver\u00e4nderlich (mutable)</li> <li>Zugriff auf nicht vorhandene Indizes gibt <code>undefined</code></li> <li>Nutze <code>const</code> f\u00fcr Arrays, wenn sie nicht neu zugewiesen werden sollen</li> </ul>"},{"location":"js/array/array/#beispiele","title":"\ud83d\udcda Beispiele","text":"<pre><code>const todos = [];\n\nfunction addTodo(text) {\n  todos.push(text);\n}\n\nfunction zeigeTodos() {\n  todos.forEach((t, i) =&gt; console.log(`${i + 1}: ${t}`));\n}\n\naddTodo(\"Einkaufen\");\naddTodo(\"\u00dcben\");\nzeigeTodos();\n// 1: Einkaufen\n// 2: \u00dcben\n</code></pre>"},{"location":"js/array/const/","title":"\ud83d\udd12 <code>const</code> bei Arrays","text":"<p>In JavaScript wird <code>const</code> verwendet, um eine Konstante Variable zu deklarieren. Das bedeutet: Die Referenz kann nicht neu zugewiesen werden \u2013 der Inhalt eines Arrays kann aber sehr wohl ver\u00e4ndert werden!</p>"},{"location":"js/array/const/#grundregel","title":"\ud83d\udccc Grundregel","text":"<pre><code>const zahlen = [1, 2, 3];\n\n// \u2705 Inhalt darf ver\u00e4ndert werden\nzahlen.push(4); // \u2192 [1, 2, 3, 4]\n\n// \u274c Aber nicht neu zugewiesen!\nzahlen = [9, 8]; // \u274c TypeError\n</code></pre> <p><code>const</code> verhindert das Ersetzen der Referenz, nicht die Ver\u00e4nderung der Daten.</p>"},{"location":"js/array/const/#warum-const-bei-arrays-sinnvoll-ist","title":"\ud83e\udde0 Warum <code>const</code> bei Arrays sinnvoll ist","text":"<ul> <li>Sch\u00fctzt vor versehentlichem \u00dcberschreiben der Variable</li> <li>Macht den Code vorhersehbarer und lesbarer</li> <li>Besonders praktisch bei Arrays, die mutiert, aber nicht ersetzt werden sollen</li> </ul>"},{"location":"js/array/const/#erlaubte-operationen-mit-const-arrays","title":"\u2705 Erlaubte Operationen mit <code>const</code> Arrays","text":"<pre><code>const farben = [\"rot\", \"blau\"];\n\n// Elemente hinzuf\u00fcgen\nfarben.push(\"gr\u00fcn\");   // [\"rot\", \"blau\", \"gr\u00fcn\"]\n\n// Elemente entfernen\nfarben.pop();          // [\"rot\", \"blau\"]\n\n// Elemente \u00e4ndern\nfarben[0] = \"gelb\";    // [\"gelb\", \"blau\"]\n</code></pre>"},{"location":"js/array/const/#nicht-erlaubt","title":"\u274c Nicht erlaubt","text":"<pre><code>const farben = [\"rot\", \"blau\"];\n\n// \u274c Neue Referenz zuweisen\nfarben = [\"gr\u00fcn\", \"schwarz\"]; // Fehler!\n</code></pre>"},{"location":"js/array/const/#beispiel-mutable-vs-immutable","title":"\ud83e\uddea Beispiel: mutable vs immutable","text":"<pre><code>const liste = [1, 2, 3];\n\n// Direkt ver\u00e4ndern (mutable)\nliste.push(4);       // \u2705\n\n// Neue Kopie erzeugen (immutable)\nconst neueListe = [...liste, 5]; // \u2705, neue Referenz\n</code></pre>"},{"location":"js/array/const/#vergleich-let-vs-const-vs-var","title":"\ud83d\udcda Vergleich: <code>let</code> vs. <code>const</code> vs. <code>var</code>","text":"Deklaration Wiederzuweisbar Ver\u00e4nderbar (z.\u202fB. Array-Push) Blockscope <code>const</code> \u274c Nein \u2705 Ja \u2705 Ja <code>let</code> \u2705 Ja \u2705 Ja \u2705 Ja <code>var</code> \u2705 Ja \u2705 Ja \u274c Nein"},{"location":"js/array/const/#fazit","title":"\u2705 Fazit","text":"<ul> <li>Verwende <code>const</code> f\u00fcr Arrays, wenn du die Referenz nicht \u00e4ndern willst</li> <li>Es bleibt m\u00f6glich, den Inhalt (Elemente) zu ver\u00e4ndern</li> <li>F\u00fcr unver\u00e4nderliche Datenstrukturen nutzt du z.\u202fB. <code>Object.freeze()</code> oder Libraries wie Immer.js</li> </ul>"},{"location":"js/array/iteration/","title":"\ud83d\udd01 Array Iteration","text":"<p>Die Iteration ist das Durchlaufen eines Arrays, um jedes Element zu verarbeiten. JavaScript bietet daf\u00fcr viele M\u00f6glichkeiten \u2013 von einfachen Schleifen bis zu modernen Methoden wie <code>map()</code> oder <code>forEach()</code>.</p>"},{"location":"js/array/iteration/#ubersicht","title":"\ud83d\udccb \u00dcbersicht","text":"Methode Beschreibung <code>for</code> Klassische Z\u00e4hlschleife <code>for...of</code> Iteration \u00fcber Werte <code>forEach()</code> Funktion wird pro Element ausgef\u00fchrt <code>map()</code> Neues Array mit ver\u00e4nderten Werten <code>filter()</code> Neues Array mit passenden Werten <code>reduce()</code> Auf einen Wert reduzieren (z.\u202fB. Summe) <code>while</code>, <code>do...while</code> klassische Schleifen mit Bedingung"},{"location":"js/array/iteration/#for-klassische-schleife","title":"\ud83e\uddee <code>for</code> \u2013 Klassische Schleife","text":"<pre><code>const zahlen = [10, 20, 30];\n\nfor (let i = 0; i &lt; zahlen.length; i++) {\n  console.log(zahlen[i]);\n}\n</code></pre>"},{"location":"js/array/iteration/#forof-moderne-schleife-fur-werte","title":"\ud83c\udf00 <code>for...of</code> \u2013 moderne Schleife f\u00fcr Werte","text":"<pre><code>for (let zahl of zahlen) {\n  console.log(zahl);\n}\n</code></pre>"},{"location":"js/array/iteration/#foreach-callback-fur-jedes-element","title":"\ud83e\udde9 <code>forEach()</code> \u2013 Callback f\u00fcr jedes Element","text":"<pre><code>zahlen.forEach((wert, index) =&gt; {\n  console.log(index + \": \" + wert);\n});\n</code></pre> <ul> <li>Ver\u00e4ndert nichts \u2013 dient nur zum Durchlaufen</li> <li>Kein <code>break</code>/<code>continue</code> m\u00f6glich</li> </ul>"},{"location":"js/array/iteration/#map-werte-umwandeln","title":"\ud83d\udd01 <code>map()</code> \u2013 Werte umwandeln","text":"<pre><code>let doppelt = zahlen.map(n =&gt; n * 2);\nconsole.log(doppelt); // [20, 40, 60]\n</code></pre> <ul> <li>Gibt ein neues Array zur\u00fcck</li> <li>Unver\u00e4nderlich: Original bleibt erhalten</li> </ul>"},{"location":"js/array/iteration/#filter-nur-passende-elemente-behalten","title":"\ud83d\udd0d <code>filter()</code> \u2013 nur passende Elemente behalten","text":"<pre><code>let gross = zahlen.filter(n =&gt; n &gt; 15);\nconsole.log(gross); // [20, 30]\n</code></pre>"},{"location":"js/array/iteration/#reduce-alles-auf-einen-wert-zusammenfuhren","title":"\ud83e\uddee <code>reduce()</code> \u2013 alles auf einen Wert zusammenf\u00fchren","text":"<pre><code>let summe = zahlen.reduce((acc, val) =&gt; acc + val, 0);\nconsole.log(summe); // 60\n</code></pre>"},{"location":"js/array/iteration/#while-wiederholen-solange-bedingung-erfullt","title":"\ud83d\udd04 <code>while</code> \u2013 wiederholen solange Bedingung erf\u00fcllt","text":"<pre><code>let i = 0;\nwhile (i &lt; zahlen.length) {\n  console.log(zahlen[i]);\n  i++;\n}\n</code></pre>"},{"location":"js/array/iteration/#dowhile-mindestens-einmal-ausfuhren","title":"\u23f3 <code>do...while</code> \u2013 mindestens einmal ausf\u00fchren","text":"<pre><code>let j = 0;\ndo {\n  console.log(zahlen[j]);\n  j++;\n} while (j &lt; zahlen.length);\n</code></pre>"},{"location":"js/array/iteration/#beispiel-mit-map-filter-reduce","title":"\ud83e\uddea Beispiel mit <code>map()</code>, <code>filter()</code>, <code>reduce()</code>","text":"<pre><code>const noten = [1, 4, 2, 5, 3];\n\n// Nur gute Noten\nconst gut = noten.filter(n =&gt; n &lt;= 3);\n\n// Alle verdoppeln\nconst doppelt = noten.map(n =&gt; n * 2);\n\n// Durchschnitt berechnen\nconst schnitt = noten.reduce((a, b) =&gt; a + b, 0) / noten.length;\n</code></pre>"},{"location":"js/array/iteration/#zusammenfassung","title":"\u2705 Zusammenfassung","text":"Methode Zweck R\u00fcckgabewert <code>forEach()</code> ausf\u00fchren, kein R\u00fcckgabewert <code>undefined</code> <code>map()</code> transformieren neues Array <code>filter()</code> filtern neues Array <code>reduce()</code> auf Wert reduzieren z.\u202fB. Zahl <code>for...of</code> einfache Schleife \u00fcber Werte \u2014"},{"location":"js/array/methoden/","title":"\ud83d\udee0\ufe0f Array-Methoden","text":"<p>Arrays in JavaScript bieten eine riesige Sammlung an Methoden, um Daten einfach zu ver\u00e4ndern, zu filtern, zu sortieren oder zu durchlaufen. Hier findest du die wichtigsten Methoden mit Erkl\u00e4rung und Beispielen.</p>"},{"location":"js/array/methoden/#ubersicht","title":"\ud83d\udccb \u00dcbersicht","text":"Kategorie Methoden-Beispiele Hinzuf\u00fcgen/Entfernen <code>push()</code>, <code>pop()</code>, <code>shift()</code>, <code>unshift()</code>, <code>splice()</code> Durchlaufen <code>forEach()</code>, <code>map()</code> Suchen &amp; Pr\u00fcfen <code>includes()</code>, <code>indexOf()</code>, <code>find()</code>, <code>some()</code>, <code>every()</code> Filtern &amp; Transformieren <code>filter()</code>, <code>map()</code>, <code>reduce()</code> Sortieren <code>sort()</code>, <code>reverse()</code> Kombinieren <code>concat()</code>, <code>join()</code>, <code>flat()</code> Kopieren/Teilen <code>slice()</code>, <code>splice()</code>, <code>toSorted()</code>, <code>toReversed()</code>"},{"location":"js/array/methoden/#hinzufugen-entfernen","title":"\u2795 Hinzuf\u00fcgen &amp; Entfernen","text":""},{"location":"js/array/methoden/#push-ans-ende-anhangen","title":"<code>push()</code> \u2013 ans Ende anh\u00e4ngen","text":"<pre><code>let farben = [\"rot\", \"blau\"];\nfarben.push(\"gr\u00fcn\"); // [\"rot\", \"blau\", \"gr\u00fcn\"]\n</code></pre>"},{"location":"js/array/methoden/#pop-letztes-element-entfernen","title":"<code>pop()</code> \u2013 letztes Element entfernen","text":"<pre><code>farben.pop(); // [\"rot\", \"blau\"]\n</code></pre>"},{"location":"js/array/methoden/#unshift-an-den-anfang-einfugen","title":"<code>unshift()</code> \u2013 an den Anfang einf\u00fcgen","text":"<pre><code>farben.unshift(\"gelb\"); // [\"gelb\", \"rot\", \"blau\"]\n</code></pre>"},{"location":"js/array/methoden/#shift-erstes-element-entfernen","title":"<code>shift()</code> \u2013 erstes Element entfernen","text":"<pre><code>farben.shift(); // [\"rot\", \"blau\"]\n</code></pre>"},{"location":"js/array/methoden/#splice-elemente-loschen-ersetzen-oder-einfugen","title":"<code>splice()</code> \u2013 Elemente l\u00f6schen, ersetzen oder einf\u00fcgen","text":"<pre><code>let zahlen = [1, 2, 3, 4];\nzahlen.splice(1, 2); // entfernt ab Index 1, 2 Elemente \u2192 [1, 4]\n</code></pre>"},{"location":"js/array/methoden/#durchlaufen","title":"\ud83d\udd01 Durchlaufen","text":""},{"location":"js/array/methoden/#foreach-fuhrt-funktion-fur-jedes-element-aus","title":"<code>forEach()</code> \u2013 f\u00fchrt Funktion f\u00fcr jedes Element aus","text":"<pre><code>let namen = [\"Anna\", \"Ben\"];\nnamen.forEach(name =&gt; console.log(\"Hallo \" + name));\n</code></pre>"},{"location":"js/array/methoden/#map-neues-array-mit-verandertem-inhalt","title":"<code>map()</code> \u2013 neues Array mit ver\u00e4ndertem Inhalt","text":"<pre><code>let zahlen = [1, 2, 3];\nlet quadrate = zahlen.map(x =&gt; x * x); // [1, 4, 9]\n</code></pre>"},{"location":"js/array/methoden/#suchen-prufen","title":"\ud83d\udd0d Suchen &amp; Pr\u00fcfen","text":""},{"location":"js/array/methoden/#includes-pruft-ob-wert-enthalten-ist","title":"<code>includes()</code> \u2013 pr\u00fcft ob Wert enthalten ist","text":"<pre><code>let obst = [\"Apfel\", \"Banane\"];\nobst.includes(\"Banane\"); // true\n</code></pre>"},{"location":"js/array/methoden/#indexof-position-eines-elements","title":"<code>indexOf()</code> \u2013 Position eines Elements","text":"<pre><code>obst.indexOf(\"Apfel\"); // 0\n</code></pre>"},{"location":"js/array/methoden/#find-erstes-element-das-bedingung-erfullt","title":"<code>find()</code> \u2013 erstes Element, das Bedingung erf\u00fcllt","text":"<pre><code>let zahlen = [1, 5, 10];\nlet ersteGroessere5 = zahlen.find(n =&gt; n &gt; 5); // 10\n</code></pre>"},{"location":"js/array/methoden/#some-pruft-ob-mindestens-ein-element-passt","title":"<code>some()</code> \u2013 pr\u00fcft ob mindestens ein Element passt","text":"<pre><code>zahlen.some(n =&gt; n &lt; 0); // false\n</code></pre>"},{"location":"js/array/methoden/#every-pruft-ob-alle-elemente-passen","title":"<code>every()</code> \u2013 pr\u00fcft ob alle Elemente passen","text":"<pre><code>zahlen.every(n =&gt; n &gt; 0); // true\n</code></pre>"},{"location":"js/array/methoden/#filtern-reduzieren","title":"\ud83c\udfaf Filtern &amp; Reduzieren","text":""},{"location":"js/array/methoden/#filter-erstellt-neues-array-mit-passenden-werten","title":"<code>filter()</code> \u2013 erstellt neues Array mit passenden Werten","text":"<pre><code>let noten = [1, 2, 3, 4, 5];\nlet guteNoten = noten.filter(n =&gt; n &lt;= 3); // [1, 2, 3]\n</code></pre>"},{"location":"js/array/methoden/#reduce-auf-einen-wert-reduzieren","title":"<code>reduce()</code> \u2013 auf einen Wert \u201ereduzieren\u201c","text":"<pre><code>let summe = [1, 2, 3].reduce((acc, val) =&gt; acc + val, 0); // 6\n</code></pre>"},{"location":"js/array/methoden/#sortieren","title":"\ud83d\udd00 Sortieren","text":""},{"location":"js/array/methoden/#sort-alphabetisch-oder-benutzerdefiniert","title":"<code>sort()</code> \u2013 alphabetisch oder benutzerdefiniert","text":"<pre><code>[3, 1, 10].sort(); // [1, 10, 3] \u2192 Achtung: als Strings!\n[3, 1, 10].sort((a, b) =&gt; a - b); // [1, 3, 10]\n</code></pre>"},{"location":"js/array/methoden/#reverse-reihenfolge-umkehren","title":"<code>reverse()</code> \u2013 Reihenfolge umkehren","text":"<pre><code>[1, 2, 3].reverse(); // [3, 2, 1]\n</code></pre>"},{"location":"js/array/methoden/#kombinieren-trennen","title":"\ud83e\udde9 Kombinieren &amp; Trennen","text":""},{"location":"js/array/methoden/#concat-arrays-zusammenfuhren","title":"<code>concat()</code> \u2013 Arrays zusammenf\u00fchren","text":"<pre><code>[1, 2].concat([3, 4]); // [1, 2, 3, 4]\n</code></pre>"},{"location":"js/array/methoden/#join-array-zu-string-verbinden","title":"<code>join()</code> \u2013 Array zu String verbinden","text":"<pre><code>[\"Hallo\", \"Welt\"].join(\" \"); // \"Hallo Welt\"\n</code></pre>"},{"location":"js/array/methoden/#flat-verschachtelte-arrays-glatten","title":"<code>flat()</code> \u2013 verschachtelte Arrays \u201egl\u00e4tten\u201c","text":"<pre><code>[1, [2, [3]]].flat(2); // [1, 2, 3]\n</code></pre>"},{"location":"js/array/methoden/#kopieren-ausschneiden","title":"\u2702\ufe0f Kopieren &amp; Ausschneiden","text":""},{"location":"js/array/methoden/#slice-teilarray-kopieren","title":"<code>slice()</code> \u2013 Teilarray kopieren","text":"<pre><code>let zahlen = [0, 1, 2, 3];\nzahlen.slice(1, 3); // [1, 2]\n</code></pre>"},{"location":"js/array/methoden/#toreversed-tosorted-ab-es2023","title":"<code>toReversed()</code> / <code>toSorted()</code> (ab ES2023)","text":"<pre><code>[1, 2, 3].toReversed(); // [3, 2, 1]\n[3, 1, 2].toSorted();   // [1, 2, 3]\n</code></pre>"},{"location":"js/array/methoden/#weitere-tricks","title":"\ud83e\udde0 Weitere Tricks","text":"<ul> <li><code>Array.isArray(variable)</code> \u2192 Pr\u00fcft, ob es sich um ein Array handelt</li> <li><code>new Array(5).fill(0)</code> \u2192 Erstellt Array mit 5 Nullen</li> <li><code>[...array]</code> \u2192 Kopie des Arrays</li> </ul>"},{"location":"js/array/methoden/#zusammenfassung","title":"\u2705 Zusammenfassung","text":"Methode Zweck <code>push/pop</code> Ende bearbeiten <code>shift/unshift</code> Anfang bearbeiten <code>map/filter</code> transformieren und filtern <code>reduce</code> zusammenrechnen <code>find/some</code> pr\u00fcfen/suchen <code>sort/slice</code> sortieren oder ausschneiden <code>forEach</code> durchlaufen"},{"location":"js/array/search/","title":"\ud83d\udd0d Array Search (Suchen in Arrays)","text":"<p>JavaScript bietet verschiedene Methoden, um in Arrays gezielt nach Werten, Positionen oder bestimmten Bedingungen zu suchen.</p>"},{"location":"js/array/search/#ubersicht","title":"\ud83d\udccb \u00dcbersicht","text":"Methode Zweck Gibt zur\u00fcck <code>indexOf()</code> Position eines Werts finden Zahl (<code>-1</code> bei nicht gefunden) <code>lastIndexOf()</code> letzte Position eines Werts finden Zahl (<code>-1</code> bei nicht gefunden) <code>includes()</code> Pr\u00fcfen, ob ein Wert enthalten ist <code>true</code> oder <code>false</code> <code>find()</code> Erstes passendes Element finden Wert oder <code>undefined</code> <code>findIndex()</code> Index des ersten passenden Elements Index oder <code>-1</code> <code>some()</code> Pr\u00fcfen, ob ein Element passt <code>true</code> oder <code>false</code> <code>every()</code> Pr\u00fcfen, ob alle Elemente passen <code>true</code> oder <code>false</code>"},{"location":"js/array/search/#indexof-index-eines-werts","title":"\ud83d\udd22 <code>indexOf()</code> \u2013 Index eines Werts","text":"<pre><code>const farben = [\"rot\", \"gr\u00fcn\", \"blau\"];\n\nfarben.indexOf(\"gr\u00fcn\");   // 1\nfarben.indexOf(\"gelb\");   // -1 (nicht gefunden)\n</code></pre>"},{"location":"js/array/search/#lastindexof-letzter-fund","title":"\ud83d\udd01 <code>lastIndexOf()</code> \u2013 Letzter Fund","text":"<pre><code>const zahlen = [1, 2, 3, 2, 1];\n\nzahlen.lastIndexOf(2);    // 3\n</code></pre>"},{"location":"js/array/search/#includes-enthalt-der-array-diesen-wert","title":"\u2705 <code>includes()</code> \u2013 Enth\u00e4lt der Array diesen Wert?","text":"<pre><code>let tiere = [\"Hund\", \"Katze\", \"Vogel\"];\n\ntiere.includes(\"Katze\");   // true\ntiere.includes(\"Fisch\");   // false\n</code></pre>"},{"location":"js/array/search/#find-erstes-element-nach-bedingung","title":"\ud83d\udd0d <code>find()</code> \u2013 Erstes Element nach Bedingung","text":"<pre><code>let zahlen = [5, 12, 8, 130, 44];\n\nlet gefunden = zahlen.find(n =&gt; n &gt; 10);\nconsole.log(gefunden); // 12\n</code></pre>"},{"location":"js/array/search/#findindex-index-des-ersten-passenden-werts","title":"\ud83d\udd0e <code>findIndex()</code> \u2013 Index des ersten passenden Werts","text":"<pre><code>let index = zahlen.findIndex(n =&gt; n &gt; 100);\nconsole.log(index); // 3 (Index von 130)\n</code></pre>"},{"location":"js/array/search/#some-prufen-ob-mindestens-1-element-passt","title":"\ud83d\udd18 <code>some()</code> \u2013 Pr\u00fcfen, ob mindestens 1 Element passt","text":"<pre><code>let ergebnisse = [1, 3, 7, 10];\n\nergebnisse.some(x =&gt; x &gt; 8); // true\n</code></pre>"},{"location":"js/array/search/#every-prufen-ob-alle-elemente-passen","title":"\ud83d\udd17 <code>every()</code> \u2013 Pr\u00fcfen, ob alle Elemente passen","text":"<pre><code>ergebnisse.every(x =&gt; x &lt; 20); // true\nergebnisse.every(x =&gt; x &gt; 5);  // false\n</code></pre>"},{"location":"js/array/search/#kombiniert-verwenden","title":"\ud83e\uddea Kombiniert verwenden","text":"<pre><code>const personen = [\n  { name: \"Anna\", alter: 25 },\n  { name: \"Ben\", alter: 32 },\n  { name: \"Clara\", alter: 19 }\n];\n\npersonen.find(p =&gt; p.alter &lt; 30);       // { name: \"Anna\", alter: 25 }\npersonen.some(p =&gt; p.name === \"Ben\");   // true\npersonen.every(p =&gt; p.alter &gt; 18);      // true\n</code></pre>"},{"location":"js/array/search/#zusammenfassung","title":"\ud83e\udde0 Zusammenfassung","text":"Methode Ziel R\u00fcckgabewert <code>indexOf()</code> Index eines Werts <code>0</code>, <code>1</code>, ..., <code>-1</code> <code>includes()</code> Existiert der Wert? <code>true</code> / <code>false</code> <code>find()</code> Erstes Element nach Bedingung Element / <code>undefined</code> <code>findIndex()</code> Index des ersten Treffers Index / <code>-1</code> <code>some()</code> Mindestens ein Treffer? <code>true</code> / <code>false</code> <code>every()</code> Alle m\u00fcssen Bedingung erf\u00fcllen <code>true</code> / <code>false</code>"},{"location":"js/array/sort/","title":"\ud83d\udd00 Arrays sortieren","text":"<p>Die Methode <code>sort()</code> wird verwendet, um Elemente eines Arrays zu sortieren. Sie kann alphabetisch, numerisch oder nach benutzerdefinierten Regeln sortieren.</p>"},{"location":"js/array/sort/#standardverhalten","title":"\ud83d\udccc Standardverhalten","text":"<pre><code>let namen = [\"Max\", \"Anna\", \"Zoe\"];\nnamen.sort(); // [\"Anna\", \"Max\", \"Zoe\"]\n</code></pre>"},{"location":"js/array/sort/#vorsicht-bei-zahlen","title":"\u26a0\ufe0f Vorsicht bei Zahlen!","text":"<pre><code>let zahlen = [10, 2, 5];\nzahlen.sort(); // [\"10\", \"2\", \"5\"] \u2192 wird als STRING sortiert!\n</code></pre> <p>\ud83d\udd27 L\u00f6sung: Eigene Vergleichsfunktion verwenden!</p>"},{"location":"js/array/sort/#numerisch-sortieren-aufsteigend-absteigend","title":"\ud83e\uddee Numerisch sortieren (aufsteigend &amp; absteigend)","text":"<pre><code>let zahlen = [10, 2, 5];\n\n// Aufsteigend\nzahlen.sort((a, b) =&gt; a - b); // [2, 5, 10]\n\n// Absteigend\nzahlen.sort((a, b) =&gt; b - a); // [10, 5, 2]\n</code></pre>"},{"location":"js/array/sort/#zeichenketten-alphabetisch-sortieren","title":"\ud83d\udd21 Zeichenketten alphabetisch sortieren","text":"<pre><code>let namen = [\"Zo\u00eb\", \"Anna\", \"\u00c4nne\"];\n\n// Standard\nnamen.sort(); // [\"Anna\", \"Zo\u00eb\", \"\u00c4nne\"]\n\n// Richtig mit localeCompare (inkl. Umlaute etc.)\nnamen.sort((a, b) =&gt; a.localeCompare(b)); // [\"Anna\", \"\u00c4nne\", \"Zo\u00eb\"]\n</code></pre>"},{"location":"js/array/sort/#objekte-sortieren-nach-eigenschaft","title":"\ud83d\udd01 Objekte sortieren nach Eigenschaft","text":"<pre><code>let personen = [\n  { name: \"Tom\", alter: 30 },\n  { name: \"Anna\", alter: 25 },\n  { name: \"Luca\", alter: 28 }\n];\n\n// Nach Alter\npersonen.sort((a, b) =&gt; a.alter - b.alter);\n/*\n[\n  { name: \"Anna\", alter: 25 },\n  { name: \"Luca\", alter: 28 },\n  { name: \"Tom\", alter: 30 }\n]\n*/\n</code></pre>"},{"location":"js/array/sort/#sortierte-kopie-mit-tosorted-ab-es2023","title":"\ud83d\udd04 Sortierte Kopie mit <code>toSorted()</code> (ab ES2023)","text":"<pre><code>let zahlen = [3, 1, 4];\nlet sortiert = zahlen.toSorted(); // [1, 3, 4]\nconsole.log(zahlen); // Original bleibt [3, 1, 4]\n</code></pre>"},{"location":"js/array/sort/#mit-reverse-kombinieren","title":"\ud83e\udde9 Mit <code>.reverse()</code> kombinieren","text":"<pre><code>let wochentage = [\"Montag\", \"Dienstag\", \"Mittwoch\"];\nwochentage.reverse(); // [\"Mittwoch\", \"Dienstag\", \"Montag\"]\n</code></pre> <p>Oder:</p> <pre><code>let zahlen = [1, 2, 3];\nzahlen.sort((a, b) =&gt; b - a); // direkt absteigend\n</code></pre>"},{"location":"js/array/sort/#tipps","title":"\ud83e\udde0 Tipps","text":"<ul> <li>Die <code>sort()</code>-Methode ver\u00e4ndert das Original-Array!</li> <li>Verwende <code>toSorted()</code> f\u00fcr nicht-destruktive Sortierung</li> <li>Verwende <code>localeCompare()</code> f\u00fcr korrekte Sprach-Sortierung</li> </ul>"},{"location":"js/array/sort/#mini-projekt-sortierung-eines-todo-arrays","title":"\ud83e\uddea Mini-Projekt: Sortierung eines Todo-Arrays","text":"<pre><code>const todos = [\n  { text: \"Einkaufen\", prio: 2 },\n  { text: \"JavaScript lernen\", prio: 1 },\n  { text: \"Fitness\", prio: 3 }\n];\n\ntodos.sort((a, b) =&gt; a.prio - b.prio);\nconsole.log(todos);\n</code></pre>"},{"location":"js/bom/cookies/","title":"\ud83c\udf6a BOM \u2013 Cookies","text":""},{"location":"js/bom/cookies/#was-sind-cookies","title":"\ud83e\udde9 Was sind Cookies?","text":"<p>Cookies sind kleine Textinformationen, die im Browser gespeichert werden, um Daten zwischen Seitenaufrufen zu behalten. Sie werden typischerweise verwendet f\u00fcr:</p> <ul> <li>Benutzer-Logins</li> <li>Session-IDs</li> <li>Spracheinstellungen</li> <li>Tracking und Analytics</li> </ul> <p>Cookies bestehen aus Schl\u00fcssel-Wert-Paaren und werden automatisch mit jeder HTTP-Anfrage an den Server gesendet (au\u00dfer <code>HttpOnly</code>).</p>"},{"location":"js/bom/cookies/#einfache-cookie-erstellung","title":"\u2705 Einfache Cookie-Erstellung","text":"<pre><code>document.cookie = \"username=Florian\";\n</code></pre> <p>\ud83d\udcdd Diese Zeile speichert den Cookie <code>username=Florian</code> im Browser.</p>"},{"location":"js/bom/cookies/#ablaufdatum-setzen-expires","title":"\ud83d\udcc5 Ablaufdatum setzen (expires)","text":"<pre><code>document.cookie = \"user=Anna; expires=Fri, 31 Dec 2025 23:59:59 GMT\";\n</code></pre> <ul> <li>Nach Ablauf wird der Cookie automatisch gel\u00f6scht.</li> <li>Ohne <code>expires</code> oder <code>max-age</code> \u2192 Session-Cookie (l\u00f6scht sich beim Schlie\u00dfen des Browsers).</li> </ul>"},{"location":"js/bom/cookies/#alternativ-max-age","title":"\ud83d\udd50 Alternativ: <code>max-age</code>","text":"<pre><code>document.cookie = \"theme=dark; max-age=3600\"; // 1 Stunde\n</code></pre>"},{"location":"js/bom/cookies/#domain-pfad","title":"\ud83c\udf10 Domain &amp; Pfad","text":"<pre><code>document.cookie = \"info=test; path=/; domain=example.com\";\n</code></pre> <ul> <li><code>path=/admin</code> \u2192 Nur g\u00fcltig auf bestimmten Pfaden</li> <li><code>domain=example.com</code> \u2192 Auch f\u00fcr Subdomains</li> </ul>"},{"location":"js/bom/cookies/#sicherheit-optional","title":"\ud83d\udd12 Sicherheit (optional)","text":"Attribut Beschreibung <code>secure</code> Nur \u00fcber HTTPS senden <code>SameSite</code> Cookie-Schutz bei Cross-Site Requests <code>HttpOnly</code> Nur \u00fcber HTTP, nicht \u00fcber JavaScript zug\u00e4nglich"},{"location":"js/bom/cookies/#cookies-lesen","title":"\ud83d\udd0e Cookies lesen","text":"<pre><code>console.log(document.cookie);\n// \"username=Florian; theme=dark\"\n</code></pre> <p>\u27a1\ufe0f Du bekommst einen String mit allen Cookies der aktuellen Seite.</p> <p>Um einzelne Werte zu extrahieren, musst du sie parsen:</p> <pre><code>function getCookie(name) {\n  const cookies = document.cookie.split(\"; \");\n  for (let cookie of cookies) {\n    const [key, value] = cookie.split(\"=\");\n    if (key === name) return value;\n  }\n  return null;\n}\n\ngetCookie(\"username\"); // z.\u202fB. \"Florian\"\n</code></pre>"},{"location":"js/bom/cookies/#cookie-loschen","title":"\u274c Cookie l\u00f6schen","text":"<p>Ein Cookie l\u00f6schen = mit gleichem Namen + <code>expires</code> in der Vergangenheit:</p> <pre><code>document.cookie = \"username=; expires=Thu, 01 Jan 1970 00:00:00 UTC;\";\n</code></pre>"},{"location":"js/bom/cookies/#tipps","title":"\ud83e\udde0 Tipps","text":"<ul> <li>Cookies sind maximal 4 KB gro\u00df</li> <li>Nutze sie nicht f\u00fcr sensible Daten (z.\u202fB. Passw\u00f6rter!)</li> <li>Bei neuen Cookies immer <code>path</code> und <code>expires</code> mitdenken</li> <li>F\u00fcr komplexere Speicherung: lieber <code>localStorage</code> oder <code>sessionStorage</code> verwenden</li> </ul>"},{"location":"js/bom/cookies/#zusammenfassung","title":"\u2705 Zusammenfassung","text":"Aktion Beispielcode Cookie setzen <code>document.cookie = \"key=value\"</code> Ablaufdatum setzen <code>; expires=...</code> oder <code>; max-age=...</code> Cookie lesen <code>document.cookie</code> oder eigene Funktion Cookie l\u00f6schen <code>expires=Vergangenheit</code> setzen Sicherheitsflags <code>; secure; HttpOnly; SameSite=Strict</code>"},{"location":"js/bom/einf%C3%BChrung/","title":"\ud83c\udf10 BOM \u2013 Einf\u00fchrung","text":""},{"location":"js/bom/einf%C3%BChrung/#was-ist-das-bom","title":"\ud83e\udde9 Was ist das BOM?","text":"<p>Das BOM (Browser Object Model) beschreibt alle browserseitigen Funktionen, die au\u00dferhalb des DOM existieren, aber trotzdem mit JavaScript genutzt werden k\u00f6nnen. Es erlaubt dir, direkt mit dem Browser-Fenster, dem Verlauf, der Adresse, dem Bildschirm, den Cookies, dem Speicher und vielem mehr zu interagieren.</p> <p>\ud83d\udc49 W\u00e4hrend das DOM f\u00fcr den Inhalt zust\u00e4ndig ist, erm\u00f6glicht das BOM die Interaktion mit dem Browser selbst.</p>"},{"location":"js/bom/einf%C3%BChrung/#bom-vs-dom","title":"\ud83d\udce6 BOM vs DOM","text":"DOM BOM Manipuliert HTML &amp; CSS Steuert Browserfunktionen Zugriff auf Seiteninhalte Zugriff auf Fenster, URL, Tabs etc. <code>document</code> <code>window</code>, <code>location</code>, <code>navigator</code> etc."},{"location":"js/bom/einf%C3%BChrung/#wichtige-bom-komponenten","title":"\ud83d\udcda Wichtige BOM-Komponenten","text":"Objekt Beschreibung <code>window</code> Das Browserfenster selbst \u2013 Wurzel aller BOM-Objekte <code>screen</code> Informationen \u00fcber den Bildschirm (Gr\u00f6\u00dfe, Aufl\u00f6sung) <code>location</code> Aktuelle URL &amp; Weiterleitungen <code>history</code> Browser-Verlauf (vor/zur\u00fcck navigieren) <code>navigator</code> Infos \u00fcber den Browser &amp; das Ger\u00e4t <code>alert</code> / <code>confirm</code> / <code>prompt</code> Einfache Dialogboxen <code>setTimeout</code>, <code>setInterval</code> Zeitgesteuerte Funktionen <code>localStorage</code>, <code>sessionStorage</code> Lokaler Webspeicher im Browser <code>cookies</code> Informationen speichern (z.\u202fB. Nutzerzustimmung) <code>geolocation</code> Aktuellen Standort ermitteln"},{"location":"js/bom/einf%C3%BChrung/#warum-ist-das-bom-wichtig","title":"\u2705 Warum ist das BOM wichtig?","text":"<ul> <li>Erm\u00f6glicht Browser-Steuerung aus JavaScript heraus</li> <li>Unverzichtbar f\u00fcr moderne Web-Apps</li> <li>Grundlage f\u00fcr Sicherheit, Lokalisierung, Nutzererfahrung</li> <li>Wird von jedem Browser unterst\u00fctzt</li> </ul>"},{"location":"js/bom/einf%C3%BChrung/#beispiele-fur-bom-einsatze","title":"\ud83d\udd17 Beispiele f\u00fcr BOM-Eins\u00e4tze","text":"<ul> <li>URL umleiten: <code>location.href = \"https://example.com\"</code></li> <li>Fenster \u00f6ffnen: <code>window.open()</code></li> <li>Popups blockieren: <code>alert(\"Achtung!\")</code></li> <li>Lokale Daten speichern: <code>localStorage.setItem(\"name\", \"Florian\")</code></li> <li>Position abfragen: <code>navigator.geolocation.getCurrentPosition(...)</code></li> <li>Zur\u00fcck navigieren: <code>history.back()</code></li> </ul>"},{"location":"js/bom/einf%C3%BChrung/#merksatz","title":"\ud83e\udde0 Merksatz","text":"<p>BOM = JavaScript + Browsersteuerung</p> <p>Ohne BOM k\u00f6nnten Webseiten keine Tabs \u00f6ffnen, keine URL \u00e4ndern, keine Infos \u00fcber den User sammeln oder sich merken, was im letzten Besuch passiert ist.</p>"},{"location":"js/bom/geolocation/","title":"\ud83d\udccd BOM \u2013 Geolocation","text":""},{"location":"js/bom/geolocation/#was-ist-geolocation","title":"\ud83e\udde9 Was ist Geolocation?","text":"<p>Die Geolocation API erlaubt es dir, den aktuellen geografischen Standort des Nutzers zu ermitteln \u2013 z.\u202fB. f\u00fcr Karten, Wetterdaten, Navigation oder standortbasierte Dienste.</p> <p>\u2705 Funktioniert nur, wenn der Nutzer zustimmt (z.\u202fB. \u00fcber einen Browser-Dialog).</p>"},{"location":"js/bom/geolocation/#prufung-auf-unterstutzung","title":"\u2705 Pr\u00fcfung auf Unterst\u00fctzung","text":"<pre><code>if (\"geolocation\" in navigator) {\n  console.log(\"Geolocation wird unterst\u00fctzt!\");\n} else {\n  console.log(\"Geolocation ist nicht verf\u00fcgbar.\");\n}\n</code></pre>"},{"location":"js/bom/geolocation/#standort-abrufen-getcurrentposition","title":"\ud83d\uddfa\ufe0f Standort abrufen \u2013 <code>getCurrentPosition()</code>","text":"<pre><code>navigator.geolocation.getCurrentPosition(\n  (position) =&gt; {\n    console.log(\"Latitude:\", position.coords.latitude);\n    console.log(\"Longitude:\", position.coords.longitude);\n  },\n  (error) =&gt; {\n    console.warn(\"Fehler:\", error.message);\n  }\n);\n</code></pre>"},{"location":"js/bom/geolocation/#ruckgabe-objekt-positioncoords","title":"\ud83d\udd27 R\u00fcckgabe-Objekt: <code>position.coords</code>","text":"Eigenschaft Beschreibung <code>latitude</code> Breitengrad <code>longitude</code> L\u00e4ngengrad <code>accuracy</code> Genauigkeit in Metern <code>altitude</code> H\u00f6he (nicht immer verf\u00fcgbar) <code>speed</code> Geschwindigkeit <code>heading</code> Bewegungsrichtung"},{"location":"js/bom/geolocation/#optionen-mit-getcurrentposition","title":"\ud83d\udce1 Optionen mit <code>getCurrentPosition()</code>","text":"<pre><code>const options = {\n  enableHighAccuracy: true,\n  timeout: 5000,\n  maximumAge: 0,\n};\n\nnavigator.geolocation.getCurrentPosition(success, error, options);\n</code></pre> Option Beschreibung <code>enableHighAccuracy</code> GPS nutzen (langsamer, aber genauer) <code>timeout</code> Abbruchzeit in ms <code>maximumAge</code> Alter der zwischengespeicherten Position (ms)"},{"location":"js/bom/geolocation/#live-tracking-mit-watchposition","title":"\ud83d\udd04 Live-Tracking mit <code>watchPosition()</code>","text":"<pre><code>const watcher = navigator.geolocation.watchPosition(\n  (position) =&gt; {\n    console.log(\"Neue Position:\", position.coords.latitude, position.coords.longitude);\n  }\n);\n</code></pre>"},{"location":"js/bom/geolocation/#stoppen-mit-clearwatch","title":"\ud83d\uded1 Stoppen mit <code>clearWatch()</code>","text":"<pre><code>navigator.geolocation.clearWatch(watcher);\n</code></pre>"},{"location":"js/bom/geolocation/#sicherheit-datenschutz","title":"\ud83e\udde0 Sicherheit &amp; Datenschutz","text":"<ul> <li>Funktioniert nur \u00fcber HTTPS (au\u00dfer <code>localhost</code>)</li> <li>Nutzer m\u00fcssen aktiv zustimmen</li> <li>Daten k\u00f6nnen je nach Ger\u00e4t/GPS sehr unterschiedlich genau sein</li> <li>Du solltest eine Fallback-Funktion anbieten</li> </ul>"},{"location":"js/bom/geolocation/#zusammenfassung","title":"\u2705 Zusammenfassung","text":"Ziel Methode Einmaliger Standort <code>getCurrentPosition()</code> Kontinuierliches Tracking <code>watchPosition()</code> Stoppen des Trackings <code>clearWatch(id)</code> Genauigkeit erh\u00f6hen <code>enableHighAccuracy: true</code> Fehlerbehandlung Fehler-Callback im zweiten Argument"},{"location":"js/bom/geolocation/#beispiel-karte-mit-koordinaten","title":"\ud83e\uddea Beispiel: Karte mit Koordinaten","text":"<pre><code>navigator.geolocation.getCurrentPosition((pos) =&gt; {\n  const { latitude, longitude } = pos.coords;\n  window.location.href = `https://www.google.com/maps?q=${latitude},${longitude}`;\n});\n</code></pre>"},{"location":"js/bom/history/","title":"\ud83d\udd58 BOM \u2013 <code>history</code>","text":""},{"location":"js/bom/history/#was-ist-das-history-objekt","title":"\ud83e\udde9 Was ist das <code>history</code>-Objekt?","text":"<p>Das <code>history</code>-Objekt erm\u00f6glicht dir, mit dem Verlauf des Browsers zu interagieren. Du kannst pr\u00fcfen, wie viele Seiten besucht wurden, und vorw\u00e4rts oder r\u00fcckw\u00e4rts im Verlauf navigieren \u2013 \u00e4hnlich wie die Zur\u00fcck-/Weiter-Schaltfl\u00e4chen im Browser.</p> <p>\ud83d\udc49 Das ist besonders n\u00fctzlich f\u00fcr Single Page Applications (SPAs) und Benutzerf\u00fchrung.</p>"},{"location":"js/bom/history/#zugriff","title":"\u2705 Zugriff","text":"<pre><code>console.log(window.history);\n</code></pre> <p>oder einfach:</p> <pre><code>console.log(history);\n</code></pre>"},{"location":"js/bom/history/#wichtige-methoden","title":"\ud83d\udcda Wichtige Methoden","text":"Methode Beschreibung <code>history.back()</code> Geht eine Seite zur\u00fcck im Verlauf <code>history.forward()</code> Geht eine Seite vor im Verlauf <code>history.go(n)</code> Navigiert relativ zur aktuellen Seite <code>history.pushState()</code> F\u00fcgt eine neue Seite in den Verlauf ein (SPA) <code>history.replaceState()</code> Ersetzt die aktuelle Seite im Verlauf <code>history.length</code> Anzahl der besuchten Seiten in dieser Session"},{"location":"js/bom/history/#beispiele","title":"\ud83d\udd01 Beispiele","text":""},{"location":"js/bom/history/#eine-seite-zuruck","title":"\ud83d\udd19 Eine Seite zur\u00fcck","text":"<pre><code>history.back(); // wie Klick auf \"Zur\u00fcck\"-Button\n</code></pre>"},{"location":"js/bom/history/#eine-seite-vor","title":"\ud83d\udd1c Eine Seite vor","text":"<pre><code>history.forward(); // wie Klick auf \"Vor\"-Button\n</code></pre>"},{"location":"js/bom/history/#n-schritte-vorzuruck","title":"\ud83d\udd04 N Schritte vor/zur\u00fcck","text":"<pre><code>history.go(-1); // zur\u00fcck\nhistory.go(1);  // vor\nhistory.go(0);  // Seite neu laden\n</code></pre>"},{"location":"js/bom/history/#pushstate-replacestate","title":"\u2699\ufe0f pushState() &amp; replaceState()","text":"<p>Diese Methoden \u00e4ndern die URL ohne die Seite neu zu laden \u2013 n\u00fctzlich f\u00fcr dynamische Apps.</p>"},{"location":"js/bom/history/#beispiel-url-andern-ohne-neu-zu-laden","title":"\ud83e\uddea Beispiel \u2013 URL \u00e4ndern, ohne neu zu laden","text":"<pre><code>history.pushState({ name: \"Florian\" }, \"\", \"/profil\");\n</code></pre>"},{"location":"js/bom/history/#unterschiede","title":"Unterschiede:","text":"Methode Effekt <code>pushState()</code> Neuer Verlaufseintrag wird hinzugef\u00fcgt <code>replaceState()</code> Aktueller Eintrag wird ersetzt (kein Zur\u00fcck)"},{"location":"js/bom/history/#popstate-event","title":"\ud83d\udce3 <code>popstate</code>-Event","text":"<p>Wenn der Benutzer \u00fcber den Zur\u00fcck-/Vorw\u00e4rts-Button navigiert:</p> <pre><code>window.addEventListener(\"popstate\", (event) =&gt; {\n  console.log(\"Verlauf ge\u00e4ndert\", event.state);\n});\n</code></pre>"},{"location":"js/bom/history/#sicherheit-einschrankungen","title":"\u26a0\ufe0f Sicherheit &amp; Einschr\u00e4nkungen","text":"<ul> <li>Kein Zugriff auf den kompletten Verlauf (z.\u202fB. URLs auslesen)</li> <li>Funktioniert nur innerhalb derselben Domain</li> <li><code>pushState()</code> &amp; <code>replaceState()</code> \u00e4ndern nur die URL-Leiste, nicht den Inhalt automatisch</li> </ul>"},{"location":"js/bom/history/#zusammenfassung","title":"\u2705 Zusammenfassung","text":"Was du tun willst Methode Seite zur\u00fcck <code>history.back()</code> Seite vor <code>history.forward()</code> Dynamisch URL \u00e4ndern <code>history.pushState()</code> Verlauf manipulieren ohne Reload <code>history.replaceState()</code> Seitennavigation auslesen <code>history.length</code>"},{"location":"js/bom/localstorage/","title":"\ud83d\uddc3\ufe0f BOM \u2013 Local Storage","text":""},{"location":"js/bom/localstorage/#was-ist-local-storage","title":"\ud83e\udde9 Was ist Local Storage?","text":"<p><code>localStorage</code> ist eine moderne, einfache M\u00f6glichkeit, um Daten dauerhaft im Browser zu speichern \u2013 ohne Cookies. Die Daten bleiben auch nach einem Browser-Neustart erhalten und sind domainbasiert.</p> <p>\ud83d\udce6 Key-Value-Speicher (alles als String)</p>"},{"location":"js/bom/localstorage/#vorteile-von-localstorage","title":"\u2705 Vorteile von <code>localStorage</code>","text":"<ul> <li>Kein Ablaufdatum</li> <li>Bis zu 5\u201310 MB Speicher (je nach Browser)</li> <li>Sehr einfach zu bedienen</li> <li>Funktioniert ohne Server</li> <li>Ideal f\u00fcr Einstellungen, Zust\u00e4nde, Caching</li> </ul>"},{"location":"js/bom/localstorage/#grundfunktionen","title":"\ud83d\udcda Grundfunktionen","text":"Methode Beschreibung <code>localStorage.setItem(key, value)</code> Speichert einen Wert <code>localStorage.getItem(key)</code> Holt den gespeicherten Wert <code>localStorage.removeItem(key)</code> L\u00f6scht einen bestimmten Eintrag <code>localStorage.clear()</code> L\u00f6scht alle Eintr\u00e4ge <code>localStorage.length</code> Anzahl gespeicherter Eintr\u00e4ge <code>localStorage.key(index)</code> Key anhand Index abrufen"},{"location":"js/bom/localstorage/#beispiel-speichern-abrufen","title":"\ud83e\uddea Beispiel: Speichern &amp; Abrufen","text":"<pre><code>// Speichern\nlocalStorage.setItem(\"name\", \"Florian\");\n\n// Auslesen\nlet username = localStorage.getItem(\"name\");\nconsole.log(\"Hallo \" + username); // Hallo Florian\n\n// L\u00f6schen\nlocalStorage.removeItem(\"name\");\n</code></pre>"},{"location":"js/bom/localstorage/#json-daten-speichern","title":"\ud83e\uddf5 JSON-Daten speichern","text":"<p><code>localStorage</code> speichert nur Strings \u2013 daher muss man Objekte konvertieren:</p> <pre><code>const einstellungen = {\n  darkmode: true,\n  sprache: \"de\",\n};\n\nlocalStorage.setItem(\"prefs\", JSON.stringify(einstellungen));\n\n// Auslesen:\nconst geladen = JSON.parse(localStorage.getItem(\"prefs\"));\nconsole.log(geladen.sprache); // \"de\"\n</code></pre>"},{"location":"js/bom/localstorage/#einschrankungen","title":"\ud83d\uded1 Einschr\u00e4nkungen","text":"<ul> <li>Nur Strings m\u00f6glich (\u2192 JSON nutzen!)</li> <li>Domain- &amp; protocol-gebunden (kein Zugriff \u00fcber andere Seiten)</li> <li>Kein automatisches Ablaufdatum \u2192 man muss selbst aufr\u00e4umen</li> <li>Nicht f\u00fcr sicherheitsrelevante Daten</li> </ul>"},{"location":"js/bom/localstorage/#typische-anwendungsfalle","title":"\ud83e\udde0 Typische Anwendungsf\u00e4lle","text":"<ul> <li>User-Einstellungen (Theme, Sprache)</li> <li>Fortschritt in Formularen oder Quiz</li> <li>Kleine Offline-Datenbank</li> <li>Feature-Flags oder Zust\u00e4nde zwischenspeichern</li> </ul>"},{"location":"js/bom/localstorage/#zusammenfassung","title":"\u2705 Zusammenfassung","text":"Aufgabe Methode Daten speichern <code>setItem(\"key\", \"value\")</code> Daten abrufen <code>getItem(\"key\")</code> Eintrag l\u00f6schen <code>removeItem(\"key\")</code> Alles l\u00f6schen <code>clear()</code> Objekt speichern <code>JSON.stringify(...)</code> + <code>setItem()</code> Objekt laden <code>JSON.parse(...)</code> + <code>getItem()</code>"},{"location":"js/bom/location/","title":"\ud83c\udf0d BOM \u2013 <code>location</code>","text":""},{"location":"js/bom/location/#was-ist-location","title":"\ud83e\udde9 Was ist <code>location</code>?","text":"<p>Das <code>location</code>-Objekt geh\u00f6rt zum <code>window</code> und enth\u00e4lt alle Informationen \u00fcber die aktuelle URL. Es erlaubt dir, die Seite neu zu laden, weiterzuleiten oder bestimmte Teile der Adresse auszulesen oder zu \u00e4ndern.</p> <p>\ud83d\udc49 Du kannst damit z.\u202fB. pr\u00fcfen, auf welcher Seite du bist \u2013 oder auf eine andere Seite umleiten.</p>"},{"location":"js/bom/location/#zugriff","title":"\u2705 Zugriff","text":"<pre><code>console.log(window.location);\n</code></pre> <p>oder k\u00fcrzer:</p> <pre><code>console.log(location);\n</code></pre>"},{"location":"js/bom/location/#eigenschaften-von-location","title":"\ud83d\udcda Eigenschaften von <code>location</code>","text":"Eigenschaft Beschreibung Beispiel <code>href</code> Gesamte URL <code>https://example.com/page?x=1#anker</code> <code>protocol</code> Protokoll (<code>http:</code>, <code>https:</code>) <code>https:</code> <code>host</code> Domain + Port <code>example.com:443</code> <code>hostname</code> Nur Domain <code>example.com</code> <code>port</code> Port (optional) <code>443</code> <code>pathname</code> Pfad zur Seite <code>/page</code> <code>search</code> Query-Parameter <code>?x=1</code> <code>hash</code> Anker am Ende der URL <code>#anker</code> <code>origin</code> Nur Basis (Protokoll + Host) <code>https://example.com</code>"},{"location":"js/bom/location/#seite-neu-laden","title":"\ud83d\udd04 Seite neu laden","text":"<pre><code>location.reload();      // Seite neu laden (aus Cache)\nlocation.reload(true);  // Seite komplett neu laden (veraltet)\n</code></pre>"},{"location":"js/bom/location/#weiterleitung-zu-anderer-seite","title":"\ud83d\udd01 Weiterleitung zu anderer Seite","text":"<pre><code>location.href = \"https://example.com\";\n</code></pre> <p>\u23f1 Die Seite wird sofort weitergeleitet.</p>"},{"location":"js/bom/location/#navigation-ohne-verlaufseintrag","title":"\ud83d\udd00 Navigation ohne Verlaufseintrag","text":"<pre><code>location.replace(\"https://example.com\");\n</code></pre> <p>\u23ee Kein \"Zur\u00fcck\" im Verlauf m\u00f6glich (ersetzt den aktuellen Eintrag).</p>"},{"location":"js/bom/location/#beispiel-query-parameter-analysieren","title":"\ud83d\udd0d Beispiel: Query-Parameter analysieren","text":"<pre><code>console.log(location.search); // ?name=florian&amp;alter=32\n</code></pre> <p>\u27a1 Du kannst mit <code>URLSearchParams</code> auswerten:</p> <pre><code>const params = new URLSearchParams(location.search);\nconsole.log(params.get(\"name\")); // florian\n</code></pre>"},{"location":"js/bom/location/#warum-ist-location-wichtig","title":"\ud83e\udde0 Warum ist <code>location</code> wichtig?","text":"<ul> <li>F\u00fcr dynamische Weiterleitungen</li> <li>Um Inhalte anhand der aktuellen Adresse zu steuern</li> <li>F\u00fcr Routing in Single Page Apps (SPAs)</li> <li>Um Anker (<code>#id</code>) zu verwenden</li> </ul>"},{"location":"js/bom/location/#zusammenfassung","title":"\u2705 Zusammenfassung","text":"Anwendungsfall Methode Aktuelle URL lesen <code>location.href</code> Neue Seite laden <code>location.href = \"...\"</code> Vollst\u00e4ndige URL zerlegen <code>protocol</code>, <code>host</code>, <code>pathname</code>, ... Seite neuladen <code>location.reload()</code> Navigation ohne Verlauf <code>location.replace(\"...\")</code>"},{"location":"js/bom/navigator/","title":"\ud83e\udded BOM \u2013 <code>navigator</code>","text":""},{"location":"js/bom/navigator/#was-ist-das-navigator-objekt","title":"\ud83e\udde9 Was ist das <code>navigator</code>-Objekt?","text":"<p>Das <code>navigator</code>-Objekt liefert Informationen \u00fcber den Browser und das Ger\u00e4t, auf dem die Webseite angezeigt wird. Dazu geh\u00f6ren z.\u202fB. Browsername, Sprache, Online-Status, Betriebssystem oder Unterst\u00fctzung f\u00fcr Funktionen wie <code>geolocation</code>.</p> <p>\ud83d\udccc Das <code>navigator</code>-Objekt ist read-only, d.\u202fh. du kannst es nur auslesen, aber nicht ver\u00e4ndern.</p>"},{"location":"js/bom/navigator/#zugriff","title":"\u2705 Zugriff","text":"<pre><code>console.log(navigator);\n</code></pre>"},{"location":"js/bom/navigator/#haufig-genutzte-eigenschaften","title":"\ud83d\udcda H\u00e4ufig genutzte Eigenschaften","text":"Eigenschaft Beschreibung <code>userAgent</code> String mit Infos \u00fcber Browser und Betriebssystem <code>language</code> Vom Nutzer eingestellte Sprache (<code>de</code>, <code>en-US</code>) <code>languages</code> Sprachpr\u00e4ferenzen als Array <code>platform</code> Betriebssystem (<code>Win32</code>, <code>Linux x86_64</code>, \u2026) <code>onLine</code> <code>true</code> oder <code>false</code> \u2192 Netzwerkverbindung <code>cookieEnabled</code> Gibt an, ob Cookies erlaubt sind <code>hardwareConcurrency</code> Anzahl logischer Prozessoren <code>deviceMemory</code> Arbeitsspeicher in GB (z.\u202fB. <code>8</code>) <code>webdriver</code> <code>true</code>, wenn \u00fcber Automation (z.\u202fB. Selenium)"},{"location":"js/bom/navigator/#beispiel-nutzerinformationen-anzeigen","title":"\ud83e\uddea Beispiel: Nutzerinformationen anzeigen","text":"<pre><code>console.log(\"Sprache:\", navigator.language);\nconsole.log(\"System:\", navigator.platform);\nconsole.log(\"Online:\", navigator.onLine);\n</code></pre>"},{"location":"js/bom/navigator/#geolocation-siehe-eigenes-kapitel","title":"\ud83d\udccd Geolocation (siehe eigenes Kapitel)","text":"<pre><code>if (\"geolocation\" in navigator) {\n  navigator.geolocation.getCurrentPosition((position) =&gt; {\n    console.log(position.coords.latitude, position.coords.longitude);\n  });\n}\n</code></pre>"},{"location":"js/bom/navigator/#warum-ist-navigator-wichtig","title":"\ud83e\udde0 Warum ist <code>navigator</code> wichtig?","text":"<ul> <li>Um Ger\u00e4tebedingungen zu erkennen (z.\u202fB. RAM, CPU, Sprache)</li> <li>F\u00fcr Fehlermeldungen und Unterst\u00fctzung (\u201eBrowser nicht unterst\u00fctzt\u201c)</li> <li>Um zu sehen, ob ein Benutzer online oder offline ist</li> <li>F\u00fcr Progressive Web Apps oder Feature Detection</li> </ul>"},{"location":"js/bom/navigator/#datenschutz-hinweis","title":"\ud83d\udd10 Datenschutz-Hinweis","text":"<p><code>navigator.userAgent</code> kann zur Browser-Fingerabdruck-Erkennung genutzt werden. Moderne Browser limitieren deshalb manche Infos gezielt.</p>"},{"location":"js/bom/navigator/#zusammenfassung","title":"\u2705 Zusammenfassung","text":"Zweck Eigenschaft / Methode Sprache erkennen <code>navigator.language</code> System erkennen <code>navigator.platform</code> Browserinfo anzeigen <code>navigator.userAgent</code> Ist Nutzer online? <code>navigator.onLine</code> Cookies erlaubt? <code>navigator.cookieEnabled</code> RAM &amp; CPU erkennen (evtl.) <code>navigator.deviceMemory</code>, <code>hardwareConcurrency</code> Geolocation m\u00f6glich? <code>\"geolocation\" in navigator</code>"},{"location":"js/bom/popup/","title":"\ud83d\udcac BOM \u2013 Popups &amp; Dialoge (<code>alert</code>, <code>confirm</code>, <code>prompt</code>)","text":""},{"location":"js/bom/popup/#was-sind-browser-popups","title":"\ud83e\udde9 Was sind Browser-Popups?","text":"<p>JavaScript bietet dir drei einfache, eingebaute Dialogfunktionen, um mit dem Benutzer zu interagieren \u2013 ohne eigenes HTML:</p> Methode Zweck Interaktiv? <code>alert()</code> Einfacher Hinweis \u274c Nein <code>confirm()</code> Ja/Nein-Abfrage \u2705 Ja <code>prompt()</code> Nutzereingabe \u2705 Ja"},{"location":"js/bom/popup/#alert-hinweis-anzeigen","title":"\u2705 <code>alert()</code> \u2013 Hinweis anzeigen","text":"<p>Zeigt eine einfache Nachricht mit einem OK-Button.</p> <pre><code>alert(\"Hallo! Willkommen auf meiner Seite.\");\n</code></pre> <p>\ud83d\udfe1 Der Code pausiert, bis der Nutzer den Dialog schlie\u00dft.</p>"},{"location":"js/bom/popup/#confirm-bestatigung-einholen","title":"\u2705 <code>confirm()</code> \u2013 Best\u00e4tigung einholen","text":"<p>Fragt den Benutzer: \"OK oder Abbrechen?\" \u2192 gibt <code>true</code> oder <code>false</code> zur\u00fcck.</p> <pre><code>let istSicher = confirm(\"M\u00f6chtest du wirklich l\u00f6schen?\");\nif (istSicher) {\n  console.log(\"Wird gel\u00f6scht\");\n} else {\n  console.log(\"Aktion abgebrochen\");\n}\n</code></pre>"},{"location":"js/bom/popup/#prompt-eingabe-vom-nutzer","title":"\u2705 <code>prompt()</code> \u2013 Eingabe vom Nutzer","text":"<p>Zeigt ein Textfeld und gibt die Eingabe als String zur\u00fcck. Bei Abbrechen: <code>null</code>.</p> <pre><code>let name = prompt(\"Wie hei\u00dft du?\");\nconsole.log(\"Hallo \" + name);\n</code></pre>"},{"location":"js/bom/popup/#beispiel-kombination","title":"\ud83e\uddea Beispiel: Kombination","text":"<pre><code>let name = prompt(\"Wie hei\u00dft du?\");\nif (name &amp;&amp; confirm(`Bist du sicher, dass du ${name} hei\u00dft?`)) {\n  alert(`Willkommen, ${name}!`);\n} else {\n  alert(\"Okay, kein Problem.\");\n}\n</code></pre>"},{"location":"js/bom/popup/#einschrankungen-tipps","title":"\ud83d\udeab Einschr\u00e4nkungen &amp; Tipps","text":"<ul> <li>Dialoge sind synchron/blockierend \u2192 kein sch\u00f6nes UX</li> <li>Modernes UI nutzt lieber modale Fenster im HTML</li> <li>Viele Browser blockieren Popups automatisch, wenn sie nicht durch direkte Benutzerinteraktion ausgel\u00f6st werden</li> </ul>"},{"location":"js/bom/popup/#zusammenfassung","title":"\u2705 Zusammenfassung","text":"Methode Beschreibung R\u00fcckgabe <code>alert()</code> Nur Hinweis <code>undefined</code> <code>confirm()</code> OK/Abbrechen <code>true</code> oder <code>false</code> <code>prompt()</code> Eingabe durch den Nutzer <code>string</code> oder <code>null</code>"},{"location":"js/bom/screen/","title":"\ud83d\udda5\ufe0f BOM \u2013 <code>screen</code>-Objekt","text":""},{"location":"js/bom/screen/#was-ist-das-screen-objekt","title":"\ud83e\udde9 Was ist das <code>screen</code>-Objekt?","text":"<p>Das <code>screen</code>-Objekt liefert Informationen \u00fcber den physischen Bildschirm, auf dem sich das Browserfenster befindet. Es ist hilfreich f\u00fcr responsive Designs, Popup-Positionierung, Bildschirmanalysen und mehr.</p> <p>Hinweis: <code>screen</code> beschreibt den Monitor, nicht den Viewport (\u2192 das \u00fcbernimmt <code>window.innerWidth</code>).</p>"},{"location":"js/bom/screen/#beispiel","title":"\u2705 Beispiel","text":"<pre><code>console.log(screen);\n</code></pre> <p>Gibt das komplette <code>screen</code>-Objekt mit seinen Eigenschaften aus.</p>"},{"location":"js/bom/screen/#nutzliche-eigenschaften","title":"\ud83e\udde0 N\u00fctzliche Eigenschaften","text":"Eigenschaft Beschreibung <code>screen.width</code> Gesamte Bildschirmbreite in Pixeln <code>screen.height</code> Gesamte Bildschirmh\u00f6he in Pixeln <code>screen.availWidth</code> Verf\u00fcgbare Breite ohne Taskleisten etc. <code>screen.availHeight</code> Verf\u00fcgbare H\u00f6he ohne z.\u202fB. Taskleiste <code>screen.colorDepth</code> Farbtiefe in Bit (z.\u202fB. 24 oder 32) <code>screen.pixelDepth</code> Pixeltiefe pro Farbe (meist gleich <code>colorDepth</code>)"},{"location":"js/bom/screen/#unterschied-zu-window","title":"\ud83d\udd0d Unterschied zu <code>window</code>","text":"Objekt Was es misst <code>screen</code> Physische Gr\u00f6\u00dfe des Monitors <code>window</code> Aktueller sichtbarer Bereich"},{"location":"js/bom/screen/#beispiel-bildschirmgroe-anzeigen","title":"\ud83e\uddea Beispiel: Bildschirmgr\u00f6\u00dfe anzeigen","text":"<pre><code>console.log(`Bildschirmgr\u00f6\u00dfe: ${screen.width} \u00d7 ${screen.height}`);\nconsole.log(`Verf\u00fcgbar: ${screen.availWidth} \u00d7 ${screen.availHeight}`);\n</code></pre>"},{"location":"js/bom/screen/#praktische-anwendungsfalle","title":"\ud83d\udccc Praktische Anwendungsf\u00e4lle","text":"<ul> <li> <p>Center-Positionierung von Popups:   <pre><code>const left = (screen.availWidth - 600) / 2;\nconst top = (screen.availHeight - 400) / 2;\n\nwindow.open(\"popup.html\", \"Popup\", `width=600,height=400,left=${left},top=${top}`);\n</code></pre></p> </li> <li> <p>Erkennung von ungew\u00f6hnlich kleinen Bildschirmen (z.\u202fB. f\u00fcr mobile Layouts)</p> </li> </ul>"},{"location":"js/bom/screen/#einschrankungen","title":"\ud83d\udeab Einschr\u00e4nkungen","text":"<ul> <li>Aus Datenschutzgr\u00fcnden oft nicht 100\u202f% exakt in mobilen Browsern</li> <li>Kein Zugriff auf mehrere Monitore (nur Hauptscreen)</li> </ul>"},{"location":"js/bom/screen/#zusammenfassung","title":"\u2705 Zusammenfassung","text":"Punkt Bedeutung Info \u00fcber Monitor Nicht Viewport, sondern physischer Bildschirm Nutzt man selten Aber hilfreich f\u00fcr besondere Layouts/Popups Schnell verf\u00fcgbar Kein zus\u00e4tzlicher Zugriff notwendig"},{"location":"js/bom/sessionstorage/","title":"\ud83d\udd01 <code>for</code>-Schleifen komplett erkl\u00e4rt","text":"<p>Mit <code>for</code>-Schleifen kannst du Wiederholungen (Loops) im Code umsetzen. Sie helfen dabei, Aufgaben mehrfach automatisch auszuf\u00fchren, z.\u202fB. durch Arrays zu gehen oder Zahlen hochzuz\u00e4hlen.</p>"},{"location":"js/bom/sessionstorage/#klassische-for-schleife","title":"\ud83e\udde9 Klassische <code>for</code>-Schleife","text":"<p>Die bekannteste Form:</p> <pre><code>for (let i = 0; i &lt; 5; i++) {\n  console.log(\"Zahl:\", i);\n}\n</code></pre>"},{"location":"js/bom/sessionstorage/#erklarung","title":"Erkl\u00e4rung:","text":"Teil Funktion <code>let i = 0</code> Startwert <code>i &lt; 5</code> Schleife l\u00e4uft, solange Bedingung wahr <code>i++</code> Erh\u00f6ht Z\u00e4hler bei jedem Durchlauf <p>\u27a1\ufe0f Gibt aus: <code>0</code>, <code>1</code>, <code>2</code>, <code>3</code>, <code>4</code></p>"},{"location":"js/bom/sessionstorage/#forof-fur-arrays-und-iterables","title":"\ud83d\udd04 <code>for...of</code> \u2013 F\u00fcr Arrays und Iterables","text":"<pre><code>const namen = [\"Anna\", \"Ben\", \"Clara\"];\n\nfor (const name of namen) {\n  console.log(name);\n}\n</code></pre> <ul> <li>Geht automatisch Element f\u00fcr Element durch das Array</li> <li>Funktioniert auch mit:</li> <li>Strings</li> <li>Sets</li> <li>Maps</li> <li>NodeLists</li> <li>DOM-Kollektionen</li> </ul>"},{"location":"js/bom/sessionstorage/#forin-fur-objekte-und-arrays-mit-index","title":"\ud83d\udd04 <code>for...in</code> \u2013 F\u00fcr Objekte (und Arrays mit Index)","text":"<pre><code>const person = {\n  name: \"Max\",\n  alter: 30\n};\n\nfor (const key in person) {\n  console.log(key + \": \" + person[key]);\n}\n</code></pre> <p>\u27a1\ufe0f Gibt die Schl\u00fcssel (Keys) aus \u2013 ideal f\u00fcr Objekte.</p> <p>\u26a0\ufe0f Nicht empfohlen f\u00fcr Arrays \u2013 verwende stattdessen <code>for</code> oder <code>for...of</code>.</p>"},{"location":"js/bom/sessionstorage/#forof-vs-forin","title":"\ud83e\udde0 <code>for...of</code> vs. <code>for...in</code>","text":"Zweck <code>for...in</code> <code>for...of</code> Objekte \u2705 Ja \u274c Nein Arrays \u26a0\ufe0f Ja (gibt Index) \u2705 Ja (gibt Wert) Strings \u274c Nein \u2705 Ja Ergebnis Schl\u00fcssel (Key) Wert"},{"location":"js/bom/sessionstorage/#weitere-varianten","title":"\ud83d\udcda Weitere Varianten","text":""},{"location":"js/bom/sessionstorage/#ruckwarts-zahlen","title":"\ud83d\udd01 R\u00fcckw\u00e4rts z\u00e4hlen","text":"<pre><code>for (let i = 10; i &gt;= 0; i--) {\n  console.log(i);\n}\n</code></pre> <p>\u27a1\ufe0f Z\u00e4hlt von 10 bis 0 runter</p>"},{"location":"js/bom/sessionstorage/#mehrere-variablen-in-schleife","title":"\ud83d\udd01 Mehrere Variablen in Schleife","text":"<pre><code>for (let i = 0, j = 10; i &lt; j; i++, j--) {\n  console.log(i, j);\n}\n</code></pre> <p>\u27a1\ufe0f Zwei Z\u00e4hler gleichzeitig \u2013 z.\u202fB. von au\u00dfen nach innen iterieren</p>"},{"location":"js/bom/sessionstorage/#break-continue-return","title":"\u23ed\ufe0f <code>break</code>, <code>continue</code>, <code>return</code>","text":""},{"location":"js/bom/sessionstorage/#break-schleife-vorzeitig-beenden","title":"\ud83d\udd28 <code>break</code> \u2013 Schleife vorzeitig beenden","text":"<pre><code>for (let i = 0; i &lt; 10; i++) {\n  if (i === 5) break;\n  console.log(i); // Nur bis 4\n}\n</code></pre>"},{"location":"js/bom/sessionstorage/#continue-durchlauf-uberspringen","title":"\u23ed\ufe0f <code>continue</code> \u2013 Durchlauf \u00fcberspringen","text":"<pre><code>for (let i = 0; i &lt; 5; i++) {\n  if (i === 2) continue;\n  console.log(i); // Gibt 0, 1, 3, 4 aus\n}\n</code></pre>"},{"location":"js/bom/sessionstorage/#return-funktion-beenden-nicht-nur-schleife","title":"\ud83d\udd19 <code>return</code> \u2013 Funktion beenden (nicht nur Schleife!)","text":"<pre><code>function findeErsteZahl(arr) {\n  for (let zahl of arr) {\n    if (zahl &gt; 10) return zahl; // Beendet Funktion\n  }\n  return null;\n}\n</code></pre> <p>\u26a0\ufe0f <code>return</code> funktioniert nur innerhalb von Funktionen.</p>"},{"location":"js/bom/sessionstorage/#was-ist-iterierbar-iterable","title":"\ud83e\uddf6 Was ist iterierbar (iterable)?","text":"<p>Ein Iterable ist ein Objekt, das mit einer Schleife wie <code>for...of</code> durchlaufen werden kann. Dazu geh\u00f6ren:</p> <ul> <li>Array</li> <li>String</li> <li>Set</li> <li>Map</li> <li>NodeList (z.\u202fB. <code>document.querySelectorAll</code>)</li> <li>Eigene Iterables mit <code>Symbol.iterator</code></li> </ul> <p>Beispiel mit einem String:</p> <pre><code>for (let buchstabe of \"Hallo\") {\n  console.log(buchstabe);\n}\n</code></pre> <p>\u27a1\ufe0f Gibt aus: <code>H</code>, <code>a</code>, <code>l</code>, <code>l</code>, <code>o</code></p>"},{"location":"js/bom/sessionstorage/#array-mit-index-wert","title":"\ud83d\udd01 Array mit Index &amp; Wert","text":"<pre><code>const zahlen = [10, 20, 30];\n\nfor (let i = 0; i &lt; zahlen.length; i++) {\n  console.log(`Index ${i}: ${zahlen[i]}`);\n}\n</code></pre> <p>Oder eleganter mit <code>forEach()</code>:</p> <pre><code>zahlen.forEach((wert, index) =&gt; {\n  console.log(`Index ${index}: ${wert}`);\n});\n</code></pre>"},{"location":"js/bom/sessionstorage/#beispiel-array-summieren-mit-forof","title":"\ud83e\uddea Beispiel: Array summieren mit <code>for...of</code>","text":"<pre><code>const werte = [5, 8, 3];\nlet summe = 0;\n\nfor (const wert of werte) {\n  summe += wert;\n}\n\nconsole.log(\"Gesamtsumme:\", summe); // 16\n</code></pre>"},{"location":"js/bom/sessionstorage/#zusammenfassung","title":"\u2705 Zusammenfassung","text":"Schleife Wann verwenden? <code>for</code> Klassisch \u2013 mit Startwert, Bedingung und Z\u00e4hler <code>for...of</code> F\u00fcr alle iterierbaren Objekte <code>for...in</code> F\u00fcr Objektschl\u00fcssel <code>forEach()</code> F\u00fcr Arrays \u2013 mit Callback (nicht abbrechbar) <code>break</code> Schleife sofort beenden <code>continue</code> N\u00e4chster Durchlauf, ohne Rest des Codes <code>return</code> Funktion verlassen (innerhalb von Schleifen) <p>Mit diesen Varianten kannst du jede Art von wiederholender Logik flexibel abbilden \u2013 von simplen Schleifen bis zu dynamischen Array-Verarbeitungssystemen.</p>"},{"location":"js/bom/timing/","title":"\u23f1\ufe0f BOM \u2013 Timing (setTimeout, setInterval, etc.)","text":""},{"location":"js/bom/timing/#was-ist-timing-in-javascript","title":"\ud83e\udde9 Was ist \"Timing\" in JavaScript?","text":"<p>JavaScript erlaubt es dir, Funktionen verz\u00f6gert auszuf\u00fchren oder wiederholt aufzurufen. Das ist n\u00fctzlich f\u00fcr z.\u202fB. Animationen, Countdown-Timer, Ladeverz\u00f6gerungen oder automatische Updates.</p>"},{"location":"js/bom/timing/#ubersicht-der-timer-funktionen","title":"\ud83e\uddee \u00dcbersicht der Timer-Funktionen","text":"Methode Beschreibung <code>setTimeout()</code> F\u00fchrt Code einmalig verz\u00f6gert aus <code>setInterval()</code> F\u00fchrt Code wiederholt in Intervallen aus <code>clearTimeout()</code> Bricht <code>setTimeout()</code> vorzeitig ab <code>clearInterval()</code> Bricht <code>setInterval()</code> vorzeitig ab"},{"location":"js/bom/timing/#settimeout-verzogerte-ausfuhrung","title":"\u2705 <code>setTimeout()</code> \u2013 Verz\u00f6gerte Ausf\u00fchrung","text":"<pre><code>setTimeout(() =&gt; {\n  console.log(\"Nach 2 Sekunden!\");\n}, 2000);\n</code></pre> <ul> <li>Wird nur einmal ausgef\u00fchrt</li> <li>Zeitangabe in Millisekunden (1000 ms = 1 Sekunde)</li> </ul> <p>\ud83d\udce6 R\u00fcckgabe ist eine Timer-ID (Zahl)</p> <pre><code>const timerId = setTimeout(() =&gt; {\n  console.log(\"Wird nicht ausgef\u00fchrt\");\n}, 3000);\n\nclearTimeout(timerId); // Bricht den Timer ab\n</code></pre>"},{"location":"js/bom/timing/#setinterval-wiederholte-ausfuhrung","title":"\ud83d\udd01 <code>setInterval()</code> \u2013 Wiederholte Ausf\u00fchrung","text":"<pre><code>const intervallId = setInterval(() =&gt; {\n  console.log(\"Jede Sekunde\");\n}, 1000);\n\n// Stoppen nach 5 Sekunden:\nsetTimeout(() =&gt; {\n  clearInterval(intervallId);\n  console.log(\"Stopp\");\n}, 5000);\n</code></pre>"},{"location":"js/bom/timing/#wichtige-hinweise","title":"\ud83d\udccc Wichtige Hinweise","text":"<ul> <li>Timer sind asynchron \u2192 blockieren den Hauptthread nicht</li> <li>Mehrere Timer k\u00f6nnen parallel laufen</li> <li>Genauer Zeitpunkt ist nicht garantiert (Verz\u00f6gerungen durch CPU, Events etc.)</li> <li>Verwende <code>clearTimeout()</code> oder <code>clearInterval()</code>, um Ressourcen zu sparen</li> </ul>"},{"location":"js/bom/timing/#beispiel-countdown-mit-setinterval","title":"\ud83e\uddea Beispiel: Countdown mit <code>setInterval</code>","text":"<pre><code>let count = 5;\nconst interval = setInterval(() =&gt; {\n  console.log(count);\n  count--;\n\n  if (count &lt; 0) {\n    clearInterval(interval);\n    console.log(\"Fertig!\");\n  }\n}, 1000);\n</code></pre>"},{"location":"js/bom/timing/#zusammenfassung","title":"\u2705 Zusammenfassung","text":"Was du tun willst Methode Code sp\u00e4ter einmal ausf\u00fchren <code>setTimeout()</code> Code regelm\u00e4\u00dfig wiederholen <code>setInterval()</code> Laufenden Timeout abbrechen <code>clearTimeout(timeoutId)</code> Laufenden Intervall abbrechen <code>clearInterval(intervalId)</code>"},{"location":"js/bom/window/","title":"\ud83e\ude9f BOM \u2013 <code>window</code>-Objekt","text":""},{"location":"js/bom/window/#was-ist-das-window-objekt","title":"\ud83e\udde9 Was ist das <code>window</code>-Objekt?","text":"<p>Das <code>window</code>-Objekt ist das globale Hauptobjekt im Browser. Es repr\u00e4sentiert das aktuelle Browserfenster oder den Tab \u2013 und ist das zentrale Element des Browser Object Models (BOM).</p> <p>\ud83d\udc49 In einer Browserumgebung ist alles global Verf\u00fcgbare eine Eigenschaft von <code>window</code>.</p>"},{"location":"js/bom/window/#beispiel","title":"\u2705 Beispiel","text":"<pre><code>console.log(window); // Gibt das komplette Fensterobjekt aus\n</code></pre> <p>Hinweis: Wenn du z.\u202fB. <code>alert()</code>, <code>document</code>, <code>setTimeout()</code> schreibst, ist das eigentlich:</p> <p><code>window.alert()</code>, <code>window.document</code>, <code>window.setTimeout()</code> usw.</p>"},{"location":"js/bom/window/#nutzliche-eigenschaften-methoden","title":"\ud83d\udcda N\u00fctzliche Eigenschaften &amp; Methoden","text":"Eigenschaft / Methode Beschreibung <code>window.innerWidth</code> Innere Breite des Fensters (Viewport) <code>window.innerHeight</code> Innere H\u00f6he des Fensters (Viewport) <code>window.outerWidth</code> Gesamte Fensterbreite inkl. R\u00e4nder etc. <code>window.outerHeight</code> Gesamte Fensterh\u00f6he inkl. R\u00e4nder etc. <code>window.screenX</code> / <code>Y</code> Fensterposition relativ zum Bildschirm <code>window.scrollX</code> / <code>Y</code> Aktueller Scroll-Wert (horizontal/vertikal) <code>window.location</code> URL-Objekt (siehe eigenes Kapitel) <code>window.document</code> Das DOM (siehe DOM-Themenreihe) <code>window.alert()</code> Dialogfenster (siehe \"Popup Alert\") <code>window.setTimeout()</code> Zeitgesteuerte Funktion (siehe \"Timing\") <code>window.open()</code> Neues Browserfenster/Tabs"},{"location":"js/bom/window/#globale-variablen-sind-teil-von-window","title":"\ud83e\udde0 Globale Variablen sind Teil von <code>window</code>","text":"<pre><code>let name = \"Florian\";\nconsole.log(window.name); // \"Florian\"\n</code></pre> <p>Das gilt nur f\u00fcr <code>var</code> oder nicht deklarierte Variablen \u2013 nicht bei <code>let</code>/<code>const</code> im strict mode.</p>"},{"location":"js/bom/window/#sicherheit-zugriff","title":"\ud83d\udd10 Sicherheit &amp; Zugriff","text":"<ul> <li>Einige Funktionen wie <code>window.open()</code> oder <code>window.close()</code> werden aus Sicherheitsgr\u00fcnden vom Browser eingeschr\u00e4nkt (z.\u202fB. Popup-Blocker).</li> <li>Globale Fensterkommunikation ist m\u00f6glich \u00fcber <code>window.postMessage()</code> (Cross-Origin-Kommunikation).</li> </ul>"},{"location":"js/bom/window/#beispiel-fenstermae-ermitteln","title":"\ud83d\udee0 Beispiel: Fensterma\u00dfe ermitteln","text":"<pre><code>console.log(`Breite: ${window.innerWidth}px`);\nconsole.log(`H\u00f6he: ${window.innerHeight}px`);\n</code></pre>"},{"location":"js/bom/window/#hinweis","title":"\ud83d\udccc Hinweis","text":"<p>Wenn du JavaScript im Browser verwendest, kannst du <code>window</code> meist weglassen, weil es der globale Kontext ist.</p> <pre><code>alert(\"Hallo\"); // entspricht window.alert(\"Hallo\")\n</code></pre>"},{"location":"js/bom/window/#zusammenfassung","title":"\u2705 Zusammenfassung","text":"Punkt Bedeutung Globales Objekt Alles l\u00e4uft \u00fcber <code>window</code> im Browser Zugriff auf Browser Gr\u00f6\u00dfe, Position, Tabs, Timing, Location etc. BOM-Wurzel Elternobjekt f\u00fcr alle BOM-Komponenten"},{"location":"js/dom/animation/","title":"\ud83c\udf9e\ufe0f DOM \u2013 Animationen &amp; \u00dcberg\u00e4nge","text":""},{"location":"js/dom/animation/#was-sind-dom-animationen","title":"\ud83e\udde9 Was sind DOM-Animationen?","text":"<p>DOM-Animationen sind visuelle Ver\u00e4nderungen von HTML-Elementen, die \u00fcber JavaScript gesteuert werden. Du kannst damit Elemente einblenden, bewegen, vergr\u00f6\u00dfern, Farben wechseln \u2013 Schritt f\u00fcr Schritt oder fl\u00fcssig.</p> <p>Es gibt zwei Hauptmethoden: \ud83d\udc49 CSS-\u00dcberg\u00e4nge (<code>transition</code>) + JavaScript \ud83d\udc49 JavaScript-Animationen mit <code>setInterval</code>, <code>requestAnimationFrame</code> oder Web APIs</p>"},{"location":"js/dom/animation/#css-animationen-mit-javascript-auslosen","title":"\ud83c\udfa8 CSS-Animationen mit JavaScript ausl\u00f6sen","text":""},{"location":"js/dom/animation/#1-element-vorbereiten-css","title":"1. Element vorbereiten (CSS)","text":"<pre><code>.box {\n  transition: transform 0.3s ease-in-out;\n}\n\n.box.verschoben {\n  transform: translateX(200px);\n}\n</code></pre>"},{"location":"js/dom/animation/#2-javascript-klasse-andern","title":"2. JavaScript: Klasse \u00e4ndern","text":"<pre><code>const box = document.querySelector(\".box\");\nbox.classList.toggle(\"verschoben\");\n</code></pre> <p>\ud83d\udd01 Ergebnis: Box bewegt sich beim Klick!</p>"},{"location":"js/dom/animation/#css-eigenschaften-direkt-animieren","title":"\ud83d\udd01 CSS-Eigenschaften direkt animieren","text":"<pre><code>const el = document.querySelector(\".box\");\n\nel.style.transition = \"all 0.5s ease\";\nel.style.opacity = \"0.3\";\nel.style.transform = \"scale(1.2)\";\n</code></pre>"},{"location":"js/dom/animation/#javascript-animation-mit-setinterval","title":"\ud83d\udd52 JavaScript-Animation mit <code>setInterval</code>","text":"<pre><code>let pos = 0;\nconst box = document.getElementById(\"anim\");\n\nconst timer = setInterval(() =&gt; {\n  if (pos &gt;= 300) {\n    clearInterval(timer);\n  } else {\n    pos++;\n    box.style.left = pos + \"px\";\n  }\n}, 10);\n</code></pre> <p>\ud83d\udccc Diese Methode ist einfach, aber weniger performant.</p>"},{"location":"js/dom/animation/#modern-requestanimationframe","title":"\ud83d\ude80 Modern: <code>requestAnimationFrame()</code>","text":"<pre><code>let x = 0;\nconst box = document.querySelector(\".box\");\n\nfunction bewege() {\n  x++;\n  box.style.transform = `translateX(${x}px)`;\n\n  if (x &lt; 200) {\n    requestAnimationFrame(bewege);\n  }\n}\n\nbewege();\n</code></pre> <p>\u2705 Vorteil: Synchron mit Bildwiederholrate, stromsparend und ruckelfrei.</p>"},{"location":"js/dom/animation/#element-einblenden","title":"\ud83d\udca5 Element einblenden","text":"<pre><code>const box = document.querySelector(\".box\");\n\nbox.style.opacity = \"0\";\nbox.style.transition = \"opacity 0.5s\";\nbox.style.opacity = \"1\"; // wird animiert eingeblendet\n</code></pre>"},{"location":"js/dom/animation/#animation-beenden-erkennen","title":"\ud83d\udd1a Animation beenden erkennen","text":"<pre><code>box.addEventListener(\"transitionend\", () =&gt; {\n  console.log(\"Animation abgeschlossen!\");\n});\n</code></pre>"},{"location":"js/dom/animation/#beispiel-farbe-mit-ubergang-andern","title":"\ud83d\udcd1 Beispiel: Farbe mit \u00dcbergang \u00e4ndern","text":"<pre><code>&lt;button id=\"knopf\"&gt;Farbe \u00e4ndern&lt;/button&gt;\n&lt;div id=\"feld\" style=\"width: 100px; height: 100px; background: blue; transition: background 0.5s;\"&gt;&lt;/div&gt;\n</code></pre> <pre><code>document.getElementById(\"knopf\").addEventListener(\"click\", () =&gt; {\n  document.getElementById(\"feld\").style.background = \"tomato\";\n});\n</code></pre>"},{"location":"js/dom/animation/#zusammenfassung","title":"\u2705 Zusammenfassung","text":"Ziel Methode Ein-/Ausblenden <code>opacity</code>, <code>display</code>, <code>classList</code> Bewegung <code>transform</code>, <code>left/top</code>, CSS <code>transition</code> JavaScript-Zeitsteuerung <code>setInterval</code>, <code>setTimeout</code> Performant animieren <code>requestAnimationFrame()</code> Animation beenden erkennen <code>transitionend</code>"},{"location":"js/dom/collections/","title":"\ud83d\udcda JavaScript DOM \u2013 NodeLists &amp; HTMLCollections","text":""},{"location":"js/dom/collections/#was-sind-nodelists-htmlcollections","title":"\ud83e\udde9 Was sind NodeLists &amp; HTMLCollections?","text":"<p>Wenn du mehrere DOM-Elemente ausw\u00e4hlst, bekommst du spezielle Listen zur\u00fcck:</p> <ul> <li>NodeList \u2192 Ergebnis von <code>querySelectorAll()</code> </li> <li>HTMLCollection \u2192 Ergebnis von z.\u202fB. <code>getElementsByClassName()</code></li> </ul> <p>Beides sieht aus wie ein Array, ist aber kein echtes Array!</p>"},{"location":"js/dom/collections/#nodelist","title":"\ud83d\udd0d NodeList","text":"<pre><code>const abs\u00e4tze = document.querySelectorAll(\"p\");\nconsole.log(abs\u00e4tze); // NodeList\n</code></pre> <ul> <li>Enth\u00e4lt alle passenden Knoten (meist <code>Element</code>)</li> <li>Kann mit <code>.forEach()</code> durchlaufen werden</li> <li>Ist statisch (\u00e4ndert sich nicht automatisch bei DOM-\u00c4nderungen)</li> </ul>"},{"location":"js/dom/collections/#beispiel-nodelist-iterieren","title":"\ud83e\uddea Beispiel: NodeList iterieren","text":"<pre><code>document.querySelectorAll(\"li\").forEach((li) =&gt; {\n  li.style.color = \"blue\";\n});\n</code></pre>"},{"location":"js/dom/collections/#htmlcollection","title":"\ud83d\udce6 HTMLCollection","text":"<pre><code>const elemente = document.getElementsByTagName(\"p\");\nconsole.log(elemente); // HTMLCollection\n</code></pre> <ul> <li>\u00c4hnlich wie NodeList</li> <li>Aber: live \u2013 aktualisiert sich, wenn sich das DOM \u00e4ndert</li> <li>Hat kein <code>.forEach()</code> \u2013 muss konvertiert werden</li> </ul>"},{"location":"js/dom/collections/#htmlcollection-in-array-umwandeln","title":"\ud83d\udd01 HTMLCollection in Array umwandeln","text":"<pre><code>const collection = document.getElementsByClassName(\"box\");\n\n// Variante 1\nconst array1 = Array.from(collection);\n\n// Variante 2\nconst array2 = [...collection];\n\narray2.forEach(el =&gt; el.style.background = \"lightgray\");\n</code></pre>"},{"location":"js/dom/collections/#unterschiede-im-uberblick","title":"\u26a0\ufe0f Unterschiede im \u00dcberblick","text":"Eigenschaft NodeList HTMLCollection Herkunft <code>querySelectorAll()</code> <code>getElementsBy*()</code> Inhalt Knoten (meist Elemente) Nur HTML-Elemente live / statisch statisch live (aktualisiert sich) <code>forEach()</code> \u2705 (direkt nutzbar) \u274c (muss konvertiert werden) Zugriff mit Index \u2705 \u2705"},{"location":"js/dom/collections/#wann-was-verwenden","title":"\u2705 Wann was verwenden?","text":"Situation Empfohlene Methode Einfache CSS-\u00e4hnliche Auswahl <code>querySelectorAll()</code> (NodeList) Alte APIs, Performance entscheidend <code>getElementsByClassName()</code> (HTMLCollection)"},{"location":"js/dom/collections/#warum-ist-das-wichtig","title":"\ud83e\udde0 Warum ist das wichtig?","text":"<ul> <li>F\u00fcr dynamische Anwendungen musst du wissen, ob sich die Liste automatisch aktualisiert</li> <li>Viele Methoden liefern NodeLists \u2013 aber oft brauchst du Array-Methoden \u2192 umwandeln!</li> </ul>"},{"location":"js/dom/collections/#bonus-livesichtbarkeit-testen","title":"\ud83d\ude80 Bonus: Livesichtbarkeit testen","text":"<pre><code>const list = document.getElementsByTagName(\"li\");\n\nconsole.log(list.length); // z.\u202fB. 3\n\nconst neuerEintrag = document.createElement(\"li\");\nneuerEintrag.textContent = \"Neu\";\ndocument.querySelector(\"ul\").appendChild(neuerEintrag);\n\nconsole.log(list.length); // jetzt 4 \u2192 HTMLCollection ist live!\n</code></pre>"},{"location":"js/dom/collections/#zusammenfassung","title":"\u2705 Zusammenfassung","text":"Punkt NodeList HTMLCollection Statisch \u2705 \u274c (live) <code>forEach()</code> \u2705 \u274c Konvertierbar \u2705 \u2705 DOM-kompatibel \u2705 \u2705 <p>\ud83c\udf89 Gl\u00fcckwunsch \u2013 du kennst jetzt die komplette Basis des DOM-Zugriffs in JavaScript!</p> <p>N\u00e4chste Themen k\u00f6nnten sein: MutationObserver, Shadow DOM, oder du steigst direkt in Frameworks wie React oder Vue ein!</p>"},{"location":"js/dom/css/","title":"\ud83c\udfa8 DOM \u2013 CSS ver\u00e4ndern","text":""},{"location":"js/dom/css/#was-kann-javascript-mit-css-machen","title":"\ud83e\udde9 Was kann JavaScript mit CSS machen?","text":"<p>Mit JavaScript kannst du:</p> <ul> <li>CSS-Klassen hinzuf\u00fcgen oder entfernen</li> <li>Einzelne CSS-Eigenschaften direkt setzen</li> <li>Stylesheets dynamisch laden oder \u00e4ndern</li> <li>Inline-Styles manipulieren</li> </ul> <p>So wird deine Webseite interaktiv und dynamisch gestaltet, z.\u202fB. bei Klicks, Scrolls oder Animationen.</p>"},{"location":"js/dom/css/#css-direkt-uber-style","title":"\ud83d\udce6 CSS direkt \u00fcber <code>style</code>","text":"<pre><code>const box = document.querySelector(\".box\");\n\nbox.style.backgroundColor = \"lightblue\";\nbox.style.border = \"2px solid black\";\nbox.style.padding = \"1rem\";\n</code></pre> <p>\ud83d\udca1 CSS-Eigenschaften in JavaScript: <code>background-color</code> \u2192 <code>backgroundColor</code> (camelCase!)</p>"},{"location":"js/dom/css/#klassen-managen-mit-classlist","title":"\ud83e\uddf0 Klassen managen mit <code>classList</code>","text":"<p>Die moderne und sichere Methode, um Klassen zu verwalten:</p> <pre><code>box.classList.add(\"aktiv\");\nbox.classList.remove(\"versteckt\");\nbox.classList.toggle(\"aktiv\");       // an/aus\nbox.classList.contains(\"aktiv\");     // true/false\n</code></pre>"},{"location":"js/dom/css/#unterschied-classname-vs-classlist","title":"\ud83d\udcd1 Unterschied: <code>className</code> vs. <code>classList</code>","text":"<pre><code>box.className = \"neu\"; // ersetzt alle Klassen\nbox.classList.add(\"neu\"); // f\u00fcgt nur diese hinzu\n</code></pre>"},{"location":"js/dom/css/#css-durch-javascript-ein-ausschalten","title":"\ud83d\udd04 CSS durch JavaScript ein-/ausschalten","text":"<pre><code>document.body.classList.toggle(\"dark-mode\");\n</code></pre> <p>In CSS:</p> <pre><code>.dark-mode {\n  background: #000;\n  color: #fff;\n}\n</code></pre>"},{"location":"js/dom/css/#dynamische-stylesheets-laden","title":"\ud83c\udfaf Dynamische Stylesheets laden","text":"<pre><code>const link = document.createElement(\"link\");\nlink.rel = \"stylesheet\";\nlink.href = \"dark.css\";\ndocument.head.appendChild(link);\n</code></pre>"},{"location":"js/dom/css/#dynamisch-generierte-styles-selten-aber-moglich","title":"\ud83c\udfaf Dynamisch generierte Styles (selten, aber m\u00f6glich)","text":"<pre><code>const style = document.createElement(\"style\");\nstyle.textContent = `\n  .hinweis {\n    color: red;\n    font-weight: bold;\n  }\n`;\ndocument.head.appendChild(style);\n</code></pre>"},{"location":"js/dom/css/#beispiel-farbe-bei-klick-andern","title":"\ud83e\uddea Beispiel: Farbe bei Klick \u00e4ndern","text":"<pre><code>&lt;button id=\"farbWechsler\"&gt;Farbe \u00e4ndern&lt;/button&gt;\n&lt;div id=\"box\" style=\"width: 100px; height: 100px; background: gray;\"&gt;&lt;/div&gt;\n</code></pre> <pre><code>document.getElementById(\"farbWechsler\").addEventListener(\"click\", () =&gt; {\n  const box = document.getElementById(\"box\");\n  box.style.backgroundColor = \"tomato\";\n});\n</code></pre>"},{"location":"js/dom/css/#zusammenfassung","title":"\u2705 Zusammenfassung","text":"Ziel Methode/Eigenschaft CSS direkt setzen <code>element.style.eigenschaft</code> CSS-Klassen verwalten <code>classList.add/remove/toggle()</code> Klasse vollst\u00e4ndig \u00e4ndern <code>className = \"...\"</code> Stylesheet dynamisch laden <code>document.createElement(\"link\")</code> Dynamische CSS einf\u00fcgen <code>document.createElement(\"style\")</code>"},{"location":"js/dom/document/","title":"\ud83d\udcc4 JavaScript DOM \u2013 <code>document</code>-Objekt","text":""},{"location":"js/dom/document/#was-ist-document","title":"\ud83e\udde9 Was ist <code>document</code>?","text":"<p><code>document</code> ist das zentralste Objekt im DOM. Es stellt deine gesamte HTML-Seite als JavaScript-Objekt dar.</p> <p>Es ist der Einstiegspunkt, um auf alle HTML-Elemente, Inhalte und Strukturen zuzugreifen und sie zu ver\u00e4ndern.</p>"},{"location":"js/dom/document/#beispiele-fur-zugriffe","title":"\ud83d\udce6 Beispiele f\u00fcr Zugriffe","text":"<pre><code>console.log(document.title);      // Titel der Seite\nconsole.log(document.body);       // Gibt den &lt;body&gt; zur\u00fcck\nconsole.log(document.URL);        // Aktuelle Seiten-URL\nconsole.log(document.documentElement); // &lt;html&gt;-Element\n</code></pre>"},{"location":"js/dom/document/#zugriff-auf-elemente","title":"\ud83d\udd0d Zugriff auf Elemente","text":"Methode Zweck <code>getElementById()</code> Zugriff per ID <code>getElementsByClassName()</code> Zugriff auf Klassen <code>getElementsByTagName()</code> Zugriff auf Tag-Namen <code>querySelector()</code> CSS-Selektor, erstes passendes Element <code>querySelectorAll()</code> CSS-Selektor, alle passenden Elemente <pre><code>document.getElementById(\"main\");\ndocument.querySelector(\".btn\");\n</code></pre>"},{"location":"js/dom/document/#seiteneigenschaften","title":"\ud83d\udee0\ufe0f Seiteneigenschaften","text":"Eigenschaft Bedeutung <code>document.title</code> Titel der Seite <code>document.URL</code> Aktuelle URL <code>document.domain</code> Domain der Seite <code>document.referrer</code> Seite, von der der Nutzer kam <code>document.cookie</code> Zugriff auf Cookies <code>document.lastModified</code> Letztes \u00c4nderungsdatum"},{"location":"js/dom/document/#seiteneigenschaften-andern","title":"\u270f\ufe0f Seiteneigenschaften \u00e4ndern","text":"<pre><code>document.title = \"Neuer Seitentitel\";\n</code></pre>"},{"location":"js/dom/document/#neue-elemente-erstellen","title":"\ud83e\uddf1 Neue Elemente erstellen","text":"<pre><code>const neu = document.createElement(\"p\");\nneu.textContent = \"Hallo, ich bin neu!\";\ndocument.body.appendChild(neu);\n</code></pre>"},{"location":"js/dom/document/#zugriff-auf-spezielle-bereiche","title":"\ud83d\udcd1 Zugriff auf spezielle Bereiche","text":"Bereich Beschreibung <code>document.head</code> <code>&lt;head&gt;</code>-Element <code>document.body</code> <code>&lt;body&gt;</code>-Element <code>document.forms</code> Alle Formulare als Sammlung <code>document.images</code> Alle Bilder auf der Seite <code>document.links</code> Alle <code>&lt;a&gt;</code>-Tags mit <code>href</code>"},{"location":"js/dom/document/#seitenweite-struktur","title":"\ud83d\udcd0 Seitenweite Struktur","text":"<pre><code>document.documentElement // &lt;html&gt;\ndocument.head            // &lt;head&gt;\ndocument.body            // &lt;body&gt;\n</code></pre>"},{"location":"js/dom/document/#events-im-document","title":"\ud83d\udce3 Events im <code>document</code>","text":"<p>Du kannst auf Events der ganzen Seite h\u00f6ren:</p> <pre><code>document.addEventListener(\"DOMContentLoaded\", () =&gt; {\n  console.log(\"Seite ist vollst\u00e4ndig geladen (ohne Bilder)\");\n});\n</code></pre>"},{"location":"js/dom/document/#schreibschutz-read-only-vs-beschreibbar","title":"\ud83d\udd12 Schreibschutz (Read-only vs. beschreibbar)","text":"<p>Einige Eigenschaften sind nur lesbar:</p> <pre><code>console.log(document.URL);        // Nur lesbar\nconsole.log(document.lastModified); // Nur lesbar\n</code></pre>"},{"location":"js/dom/document/#zusammenfassung","title":"\u2705 Zusammenfassung","text":"Was du brauchst Nutze dies Zugriff auf Elemente <code>querySelector</code>, <code>getElementById</code> Seiteneigenschaften lesen <code>document.title</code>, <code>document.URL</code> HTML-Struktur bearbeiten <code>createElement</code>, <code>appendChild</code> Bereich gezielt ansprechen <code>document.head</code>, <code>.body</code>, <code>.forms</code> Events der Seite verwalten <code>DOMContentLoaded</code>, etc."},{"location":"js/dom/einf%C3%BChrung/","title":"\ud83d\udcd8 DOM \u2013 Einf\u00fchrung","text":""},{"location":"js/dom/einf%C3%BChrung/#was-ist-das-dom","title":"\ud83e\udde9 Was ist das DOM?","text":"<p>DOM steht f\u00fcr Document Object Model. Es ist eine programmatische Darstellung deiner HTML-Webseite als Baumstruktur, mit der JavaScript Inhalte lesen, ver\u00e4ndern, hinzuf\u00fcgen oder l\u00f6schen kann.</p> <p>Kurz gesagt: Mit dem DOM kannst du HTML mit JavaScript beeinflussen.</p>"},{"location":"js/dom/einf%C3%BChrung/#so-sieht-das-dom-aus","title":"\ud83c\udf33 So sieht das DOM aus","text":"<p>HTML wird im Browser als Baum aus Knoten (Nodes) dargestellt:</p> <pre><code>&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;Beispiel&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;h1&gt;Hallo Welt&lt;/h1&gt;\n    &lt;p&gt;Ein Absatz&lt;/p&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Wird zu:</p> <pre><code>document\n \u2514\u2500\u2500 html\n     \u251c\u2500\u2500 head\n     \u2502   \u2514\u2500\u2500 title\n     \u2514\u2500\u2500 body\n         \u251c\u2500\u2500 h1\n         \u2514\u2500\u2500 p\n</code></pre>"},{"location":"js/dom/einf%C3%BChrung/#was-kann-man-mit-dem-dom-machen","title":"\ud83d\udce6 Was kann man mit dem DOM machen?","text":"Aufgabe Beispielcode Inhalte lesen <code>document.querySelector(\"p\").textContent</code> Inhalte ver\u00e4ndern <code>element.innerHTML = \"Neu\"</code> Elemente erstellen <code>document.createElement(\"div\")</code> Elemente entfernen <code>element.remove()</code> CSS \u00e4ndern <code>element.style.color = \"red\"</code> Events hinzuf\u00fcgen <code>element.addEventListener(\"click\", ...)</code>"},{"location":"js/dom/einf%C3%BChrung/#warum-ist-das-dom-wichtig","title":"\ud83d\udee0 Warum ist das DOM wichtig?","text":"<ul> <li>Macht deine Webseite interaktiv</li> <li>Erm\u00f6glicht dynamisches Nachladen von Inhalten</li> <li>Wird von JavaScript gesteuert</li> <li>Basis f\u00fcr Webanwendungen (z.\u202fB. To-do-Apps, Spiele, Formulare)</li> </ul>"},{"location":"js/dom/einf%C3%BChrung/#wie-greift-man-auf-das-dom-zu","title":"\ud83e\udde0 Wie greift man auf das DOM zu?","text":"<p>Im Browser ist das <code>document</code>-Objekt der Einstiegspunkt:</p> <pre><code>console.log(document.title);         // Gibt den Titel der Seite aus\nconsole.log(document.body.innerHTML); // Gibt den HTML-Inhalt des Body aus\n</code></pre>"},{"location":"js/dom/einf%C3%BChrung/#dom-basis-fur-alles-dynamische","title":"\ud83d\ude80 DOM = Basis f\u00fcr alles Dynamische","text":"<p>Ohne DOM g\u00e4be es nur statisches HTML. Mit DOM + JavaScript werden Webseiten:</p> <ul> <li>Lebendig</li> <li>Anpassbar</li> <li>Reaktiv</li> </ul>"},{"location":"js/dom/einf%C3%BChrung/#themenubersicht","title":"\ud83d\udcda Themen\u00fcbersicht","text":"<p>In den n\u00e4chsten Abschnitten lernst du alles \u00fcber:</p> <ol> <li>DOM-Methoden</li> <li>document-Objekt</li> <li>HTML-Elemente bearbeiten</li> <li>Formulare &amp; CSS</li> <li>DOM-Animationen</li> <li>DOM-Events &amp; Listener</li> <li>Node-Navigation</li> <li>Collections vs. NodeLists</li> </ol> <p>Bleib dran! \ud83d\udca1</p>"},{"location":"js/dom/elemente/","title":"\ud83d\udd27 DOM \u2013 Elemente","text":""},{"location":"js/dom/elemente/#was-ist-ein-dom-element","title":"\ud83e\udde9 Was ist ein DOM-Element?","text":"<p>Ein Element ist ein Knoten im HTML-Baum, der ein HTML-Tag repr\u00e4sentiert (z.\u202fB. <code>&lt;div&gt;</code>, <code>&lt;p&gt;</code>, <code>&lt;form&gt;</code>). Mit JavaScript kannst du auf Elemente zugreifen und sie manipulieren: Inhalte, Attribute, CSS, Events u.\u202fv.\u202fm.</p>"},{"location":"js/dom/elemente/#zugriff-auf-elemente","title":"\ud83d\udee0 Zugriff auf Elemente","text":"<p>Typisch \u00fcber:</p> <pre><code>const element = document.querySelector(\"#meine-box\");\n</code></pre>"},{"location":"js/dom/elemente/#inhalt-manipulieren","title":"\u270f\ufe0f Inhalt manipulieren","text":"Eigenschaft Beschreibung <code>innerHTML</code> HTML-Inhalt als String lesen oder setzen <code>textContent</code> Nur Text ohne HTML <code>innerText</code> Sichtbarer Text (mit R\u00fccksicht auf CSS)"},{"location":"js/dom/elemente/#beispiel","title":"Beispiel:","text":"<pre><code>element.innerHTML = \"&lt;strong&gt;Fett!&lt;/strong&gt;\";\nelement.textContent = \"Nur Text\";\n</code></pre>"},{"location":"js/dom/elemente/#css-eigenschaften-setzen","title":"\ud83c\udfa8 CSS-Eigenschaften setzen","text":"<pre><code>element.style.color = \"red\";\nelement.style.fontWeight = \"bold\";\nelement.style.backgroundColor = \"#eee\";\n</code></pre> <p>Tipp: CSS-Namen mit Bindestrich werden zu camelCase \u2192 <code>font-size</code> \u2192 <code>fontSize</code></p>"},{"location":"js/dom/elemente/#klassen-verwalten","title":"\ud83c\udfaf Klassen verwalten","text":"<p>Nutze <code>classList</code> f\u00fcr moderne, einfache Klassennutzung:</p> <pre><code>element.classList.add(\"aktiv\");\nelement.classList.remove(\"unsichtbar\");\nelement.classList.toggle(\"ausgew\u00e4hlt\");\nelement.classList.contains(\"aktiv\"); // true/false\n</code></pre>"},{"location":"js/dom/elemente/#attribute-lesen-und-andern","title":"\ud83d\udcdb Attribute lesen und \u00e4ndern","text":"Methode Beschreibung <code>getAttribute(\"name\")</code> Wert lesen <code>setAttribute(\"name\", \"wert\")</code> Wert setzen <code>removeAttribute(\"name\")</code> Attribut entfernen <code>hasAttribute(\"name\")</code> Pr\u00fcfen, ob Attribut existiert"},{"location":"js/dom/elemente/#beispiel_1","title":"Beispiel:","text":"<pre><code>element.setAttribute(\"data-id\", \"42\");\nconsole.log(element.getAttribute(\"data-id\")); // \"42\"\n</code></pre>"},{"location":"js/dom/elemente/#daten-attribute-data-","title":"\ud83d\udcce Daten-Attribute (<code>data-*</code>)","text":"<pre><code>&lt;div id=\"karte\" data-user=\"florian\"&gt;&lt;/div&gt;\n</code></pre> <p>Zugriff mit:</p> <pre><code>const karte = document.getElementById(\"karte\");\nconsole.log(karte.dataset.user); // \"florian\"\n</code></pre>"},{"location":"js/dom/elemente/#elemente-erstellen","title":"\ud83e\uddf1 Elemente erstellen","text":"<pre><code>const neuerButton = document.createElement(\"button\");\nneuerButton.textContent = \"Klick mich!\";\nneuerButton.classList.add(\"btn\");\n\ndocument.body.appendChild(neuerButton);\n</code></pre>"},{"location":"js/dom/elemente/#elemente-entfernen","title":"\ud83e\uddf9 Elemente entfernen","text":"<pre><code>element.remove(); // Entfernt sich selbst\n</code></pre> <p>Alternativ:</p> <pre><code>element.parentNode.removeChild(element);\n</code></pre>"},{"location":"js/dom/elemente/#prufung-und-vergleich","title":"\ud83e\uddea Pr\u00fcfung und Vergleich","text":"<pre><code>if (element.classList.contains(\"aktiv\")) {\n  console.log(\"Ist aktiv!\");\n}\n</code></pre>"},{"location":"js/dom/elemente/#zusammenfassung","title":"\ud83e\udde0 Zusammenfassung","text":"Was du tun willst Methode/Eigenschaft Inhalt lesen/schreiben <code>innerHTML</code>, <code>textContent</code> CSS direkt setzen <code>element.style.property</code> Klassen verwalten <code>classList.add()</code> usw. Attribute manipulieren <code>get/set/removeAttribute()</code> Daten-Attribute nutzen <code>element.dataset.name</code> Neues Element erzeugen <code>document.createElement(\"tag\")</code> Einf\u00fcgen oder entfernen <code>appendChild()</code>, <code>remove()</code>"},{"location":"js/dom/eventlistener/","title":"\ud83c\udfa7 DOM \u2013 Event Listener","text":""},{"location":"js/dom/eventlistener/#was-ist-ein-event-listener","title":"\ud83e\udde9 Was ist ein Event Listener?","text":"<p>Ein Event Listener (Ereignis-Zuh\u00f6rer) ist eine Funktion, die auf ein bestimmtes Ereignis wartet \u2013 z.\u202fB. \u201eKlick\u201c oder \u201eEingabe\u201c. Wenn das Ereignis eintritt, wird die zugeh\u00f6rige Callback-Funktion ausgef\u00fchrt.</p>"},{"location":"js/dom/eventlistener/#syntax","title":"\u2705 Syntax","text":"<pre><code>element.addEventListener(eventTyp, callback, optionen);\n</code></pre> Teil Beschreibung <code>eventTyp</code> z.\u202fB. <code>\"click\"</code>, <code>\"input\"</code>, <code>\"submit\"</code> <code>callback</code> Funktion, die beim Event aufgerufen wird <code>optionen</code> Optional: z.\u202fB. <code>{ once: true }</code>, <code>{ passive: true }</code>"},{"location":"js/dom/eventlistener/#beispiel-klick-auf-button","title":"\ud83d\udccc Beispiel: Klick auf Button","text":"<pre><code>const button = document.querySelector(\"button\");\n\nbutton.addEventListener(\"click\", () =&gt; {\n  alert(\"Button wurde geklickt!\");\n});\n</code></pre>"},{"location":"js/dom/eventlistener/#einmaliger-listener-once","title":"\ud83d\udd01 Einmaliger Listener (<code>once</code>)","text":"<pre><code>button.addEventListener(\"click\", () =&gt; {\n  alert(\"Nur einmal!\");\n}, { once: true });\n</code></pre> <p>\u2714\ufe0f Der Listener entfernt sich nach der ersten Ausf\u00fchrung selbst.</p>"},{"location":"js/dom/eventlistener/#beispiel-eingabe-beobachten","title":"\ud83e\uddea Beispiel: Eingabe beobachten","text":"<pre><code>const input = document.querySelector(\"input\");\n\ninput.addEventListener(\"input\", (e) =&gt; {\n  console.log(\"Aktueller Wert:\", e.target.value);\n});\n</code></pre>"},{"location":"js/dom/eventlistener/#entfernen-eines-event-listeners","title":"\ud83d\udd04 Entfernen eines Event Listeners","text":"<p>Du musst dieselbe Funktion-Referenz verwenden:</p> <pre><code>function handleClick() {\n  alert(\"Hallo\");\n}\n\nbutton.addEventListener(\"click\", handleClick);\nbutton.removeEventListener(\"click\", handleClick);\n</code></pre> <p>Anonyme Funktionen k\u00f6nnen nicht entfernt werden!</p>"},{"location":"js/dom/eventlistener/#mehrere-listener-fur-ein-element","title":"\ud83e\udde0 Mehrere Listener f\u00fcr ein Element","text":"<pre><code>const box = document.querySelector(\".box\");\n\nbox.addEventListener(\"mouseenter\", () =&gt; box.classList.add(\"aktiv\"));\nbox.addEventListener(\"mouseleave\", () =&gt; box.classList.remove(\"aktiv\"));\n</code></pre>"},{"location":"js/dom/eventlistener/#unterschied-inline-onclick-vs-addeventlistener","title":"\ud83d\uded1 Unterschied: inline <code>onclick</code> vs. <code>addEventListener</code>","text":"Methode Nachteile <code>onclick = ...</code> \u00dcberschreibt andere Handler <code>addEventListener()</code> Besser, erlaubt mehrere Listener, mehr Kontrolle"},{"location":"js/dom/eventlistener/#optionen-fur-event-listener","title":"\u2699\ufe0f Optionen f\u00fcr Event Listener","text":"Option Wirkung <code>once</code> F\u00fchrt Listener nur einmal aus <code>capture</code> Listener wird in der Capture-Phase ausgel\u00f6st <code>passive</code> Browser darf Event nicht blockieren (z.\u202fB. bei <code>scroll</code>) <pre><code>element.addEventListener(\"scroll\", handleScroll, { passive: true });\n</code></pre>"},{"location":"js/dom/eventlistener/#event-delegation","title":"\ud83e\udde0 Event Delegation","text":"<p>Ein einziger Listener f\u00fcr viele Elemente \u2013 besonders effizient bei dynamischen Inhalten.</p> <pre><code>document.querySelector(\"ul\").addEventListener(\"click\", (e) =&gt; {\n  if (e.target.tagName === \"LI\") {\n    e.target.classList.toggle(\"markiert\");\n  }\n});\n</code></pre>"},{"location":"js/dom/eventlistener/#zusammenfassung","title":"\u2705 Zusammenfassung","text":"Aktion Methode / Konzept Listener hinzuf\u00fcgen <code>addEventListener(\"event\", fn)</code> Listener entfernen <code>removeEventListener(\"event\", fn)</code> Nur 1\u00d7 ausf\u00fchren <code>{ once: true }</code> Event delegation Parent f\u00e4ngt Event ab Infos aus Event <code>event</code>, <code>event.target</code>"},{"location":"js/dom/events/","title":"\ud83d\uddb1\ufe0f DOM \u2013 Events","text":""},{"location":"js/dom/events/#was-ist-ein-event","title":"\ud83e\udde9 Was ist ein Event?","text":"<p>Ein Event (deutsch: Ereignis) ist etwas, das im Browser passiert \u2013 z.\u202fB. ein Klick, eine Tasteneingabe oder das Laden der Seite. Mit JavaScript kannst du auf solche Ereignisse reagieren, z.\u202fB. mit einer Funktion.</p>"},{"location":"js/dom/events/#beispiele-fur-events","title":"\ud83d\udd14 Beispiele f\u00fcr Events","text":"Event Wann es passiert <code>click</code> Nutzer klickt auf ein Element <code>input</code> Nutzer gibt Text ein <code>submit</code> Formular wird abgeschickt <code>change</code> Eingabefeld \u00e4ndert sich (z.\u202fB. Dropdown) <code>mouseover</code> Maus geht \u00fcber ein Element <code>mouseout</code> Maus verl\u00e4sst ein Element <code>keydown</code> Taste wird gedr\u00fcckt <code>load</code> Seite oder Bild ist komplett geladen <code>scroll</code> Benutzer scrollt auf der Seite <code>resize</code> Fenstergr\u00f6\u00dfe ver\u00e4ndert sich"},{"location":"js/dom/events/#event-handler-klassisch","title":"\ud83d\udccc Event-Handler (klassisch)","text":"<pre><code>const button = document.querySelector(\"button\");\n\nbutton.onclick = function () {\n  alert(\"Du hast geklickt!\");\n};\n</code></pre> <p>\u26a0\ufe0f Achtung: Nur ein Handler m\u00f6glich, der letzte \u00fcberschreibt vorherige.</p>"},{"location":"js/dom/events/#modern-addeventlistener","title":"\u2705 Modern: <code>addEventListener</code>","text":"<pre><code>button.addEventListener(\"click\", () =&gt; {\n  alert(\"Hallo von addEventListener!\");\n});\n</code></pre> <p>\u2714\ufe0f Vorteil: Mehrere Listener m\u00f6glich, sauber &amp; flexibel.</p>"},{"location":"js/dom/events/#beispiel-event-bei-texteingabe","title":"\ud83e\uddea Beispiel: Event bei Texteingabe","text":"<pre><code>const input = document.querySelector(\"input\");\n\ninput.addEventListener(\"input\", function () {\n  console.log(\"Eingegeben: \" + input.value);\n});\n</code></pre>"},{"location":"js/dom/events/#event-objekt","title":"\ud83e\udde0 Event-Objekt","text":"<p>Jedes Event l\u00f6st automatisch ein Event-Objekt aus:</p> <pre><code>button.addEventListener(\"click\", function (event) {\n  console.log(event); // Infos \u00fcber das Event\n  console.log(event.target); // Das angeklickte Element\n});\n</code></pre>"},{"location":"js/dom/events/#preventdefault","title":"\ud83d\uded1 <code>preventDefault()</code>","text":"<p>Verhindert Standardverhalten (z.\u202fB. das Abschicken eines Formulars):</p> <pre><code>form.addEventListener(\"submit\", function (e) {\n  e.preventDefault();\n  alert(\"Formular wurde NICHT abgeschickt\");\n});\n</code></pre>"},{"location":"js/dom/events/#stoppropagation","title":"\ud83d\udd04 <code>stopPropagation()</code>","text":"<p>Verhindert, dass ein Event weiter \u201eblubbert\u201c (Bubble Phase):</p> <pre><code>innerDiv.addEventListener(\"click\", (e) =&gt; {\n  e.stopPropagation();\n});\n</code></pre>"},{"location":"js/dom/events/#mehrere-listener-an-einem-element","title":"\ud83d\udcd1 Mehrere Listener an einem Element","text":"<pre><code>const box = document.querySelector(\".box\");\n\nbox.addEventListener(\"mouseenter\", () =&gt; box.classList.add(\"hovered\"));\nbox.addEventListener(\"mouseleave\", () =&gt; box.classList.remove(\"hovered\"));\n</code></pre>"},{"location":"js/dom/events/#zusammenfassung","title":"\u2705 Zusammenfassung","text":"Ziel Methode Event zuweisen <code>addEventListener()</code> Infos \u00fcber das Ereignis <code>event</code>, <code>event.target</code> Standardverhalten verhindern <code>event.preventDefault()</code> Weitergabe stoppen <code>event.stopPropagation()</code>"},{"location":"js/dom/forms/","title":"\ud83e\uddfe DOM \u2013 Formulare","text":""},{"location":"js/dom/forms/#was-macht-das-dom-mit-formularen","title":"\ud83e\udde9 Was macht das DOM mit Formularen?","text":"<p>Mit dem DOM kannst du:</p> <ul> <li>Formularfelder auslesen</li> <li>Eingaben pr\u00fcfen (validieren)</li> <li>Werte setzen oder zur\u00fccksetzen</li> <li>Formularaktionen abfangen, bevor sie an den Server gesendet werden</li> </ul>"},{"location":"js/dom/forms/#zugriff-auf-formulare-und-felder","title":"\ud83d\udccc Zugriff auf Formulare und Felder","text":"<pre><code>&lt;form id=\"kontaktForm\"&gt;\n  &lt;input type=\"text\" name=\"name\" /&gt;\n  &lt;input type=\"email\" name=\"email\" /&gt;\n  &lt;button type=\"submit\"&gt;Absenden&lt;/button&gt;\n&lt;/form&gt;\n</code></pre> <pre><code>const form = document.getElementById(\"kontaktForm\");\nconst nameFeld = form.elements[\"name\"];\nconst emailFeld = form.elements[\"email\"];\n\nconsole.log(nameFeld.value); // Eingabe lesen\n</code></pre>"},{"location":"js/dom/forms/#werte-setzen","title":"\u270d\ufe0f Werte setzen","text":"<pre><code>nameFeld.value = \"Max Mustermann\";\nemailFeld.value = \"max@example.com\";\n</code></pre>"},{"location":"js/dom/forms/#eingaben-prufen-validation","title":"\u2705 Eingaben pr\u00fcfen (Validation)","text":"<pre><code>form.addEventListener(\"submit\", function (event) {\n  if (nameFeld.value === \"\") {\n    alert(\"Name darf nicht leer sein!\");\n    event.preventDefault(); // Verhindert das Absenden\n  }\n});\n</code></pre>"},{"location":"js/dom/forms/#formular-zurucksetzen","title":"\ud83d\udd01 Formular zur\u00fccksetzen","text":"<pre><code>form.reset(); // Alle Felder auf Ausgangswerte setzen\n</code></pre>"},{"location":"js/dom/forms/#zugriff-auf-elements","title":"\ud83e\udde0 Zugriff auf <code>.elements</code>","text":"<p>Jedes <code>&lt;form&gt;</code>-Element hat eine <code>elements</code>-Eigenschaft, mit der du direkt auf die Felder zugreifen kannst:</p> <pre><code>form.elements[\"email\"].value;\n</code></pre>"},{"location":"js/dom/forms/#einzelne-typen-gezielt-ansprechen","title":"\ud83d\udee0 Einzelne Typen gezielt ansprechen","text":"<pre><code>const checkbox = document.querySelector('input[type=\"checkbox\"]');\nif (checkbox.checked) {\n  console.log(\"Checkbox ist angehakt\");\n}\n</code></pre>"},{"location":"js/dom/forms/#dynamisches-formularverhalten","title":"\ud83e\uddea Dynamisches Formularverhalten","text":"<pre><code>emailFeld.addEventListener(\"input\", () =&gt; {\n  console.log(\"Der Nutzer tippt: \" + emailFeld.value);\n});\n</code></pre>"},{"location":"js/dom/forms/#best-practice-event-delegation-fur-buttons","title":"\ud83d\udca1 Best Practice: Event-Delegation f\u00fcr Buttons","text":"<pre><code>form.addEventListener(\"submit\", (e) =&gt; {\n  e.preventDefault();\n  // Verarbeitung der Eingaben hier\n});\n</code></pre>"},{"location":"js/dom/forms/#beispiel-einfaches-login-formular","title":"\ud83d\udcd1 Beispiel: Einfaches Login-Formular","text":"<pre><code>&lt;form id=\"loginForm\"&gt;\n  &lt;input type=\"text\" name=\"user\" placeholder=\"Benutzername\" /&gt;\n  &lt;input type=\"password\" name=\"passwort\" /&gt;\n  &lt;button type=\"submit\"&gt;Einloggen&lt;/button&gt;\n&lt;/form&gt;\n</code></pre> <pre><code>document.getElementById(\"loginForm\").addEventListener(\"submit\", function (e) {\n  e.preventDefault();\n  const user = this.elements[\"user\"].value;\n  const pw = this.elements[\"passwort\"].value;\n\n  if (user &amp;&amp; pw) {\n    alert(\"Login wird verarbeitet...\");\n  } else {\n    alert(\"Bitte alle Felder ausf\u00fcllen!\");\n  }\n});\n</code></pre>"},{"location":"js/dom/forms/#zusammenfassung","title":"\u2705 Zusammenfassung","text":"Aktion Methode/Eigenschaft Formular holen <code>getElementById(\"...\")</code> Felder auslesen <code>form.elements[\"name\"].value</code> Werte setzen <code>.value = \"...\"</code> Validieren <code>if (feld.value === \"\")</code> Absenden abfangen <code>event.preventDefault()</code> Zur\u00fccksetzen <code>form.reset()</code>"},{"location":"js/dom/html/","title":"\ud83e\uddfe DOM \u2013 HTML-Inhalte bearbeiten","text":""},{"location":"js/dom/html/#was-bedeutet-html-uber-das-dom-steuern","title":"\ud83e\udde9 Was bedeutet \u201eHTML \u00fcber das DOM steuern\u201c?","text":"<p>Mit JavaScript kannst du HTML-Inhalte lesen, ver\u00e4ndern, ersetzen oder dynamisch erzeugen \u2013 direkt im laufenden Browserfenster. Du brauchst daf\u00fcr nur DOM-Methoden wie <code>innerHTML</code>, <code>createElement</code>, <code>appendChild</code>, <code>remove()</code> usw.</p>"},{"location":"js/dom/html/#haufige-methoden-eigenschaften","title":"\ud83d\udccc H\u00e4ufige Methoden &amp; Eigenschaften","text":"Eigenschaft / Methode Beschreibung <code>innerHTML</code> Liest oder ersetzt den gesamten HTML-Inhalt <code>textContent</code> Liest/\u00e4ndert nur den reinen Text (ohne HTML) <code>innerText</code> Wie <code>textContent</code>, aber abh\u00e4ngig vom sichtbaren Layout <code>outerHTML</code> Liest oder ersetzt das gesamte Element inkl. Tag"},{"location":"js/dom/html/#inhalte-setzen-und-ersetzen","title":"\ud83d\udd8b Inhalte setzen und ersetzen","text":""},{"location":"js/dom/html/#beispiel-1-innerhtml","title":"\ud83d\udd39 Beispiel 1: <code>innerHTML</code>","text":"<pre><code>const box = document.getElementById(\"info\");\nbox.innerHTML = \"&lt;p&gt;&lt;strong&gt;Wichtig!&lt;/strong&gt; Lies das.&lt;/p&gt;\";\n</code></pre>"},{"location":"js/dom/html/#beispiel-2-textcontent","title":"\ud83d\udd39 Beispiel 2: <code>textContent</code>","text":"<pre><code>box.textContent = \"&lt;p&gt;Kein HTML&lt;/p&gt;\"; // Gibt reinen Text aus\n</code></pre>"},{"location":"js/dom/html/#neue-html-elemente-erzeugen","title":"\ud83e\uddf1 Neue HTML-Elemente erzeugen","text":"<pre><code>const absatz = document.createElement(\"p\");\nabsatz.textContent = \"Ich bin ein dynamischer Absatz.\";\n\ndocument.body.appendChild(absatz);\n</code></pre>"},{"location":"js/dom/html/#html-kombinieren","title":"\u2795 HTML kombinieren","text":"<p>Du kannst vorhandenes HTML erg\u00e4nzen, nicht nur ersetzen:</p> <pre><code>const container = document.querySelector(\".liste\");\n\ncontainer.innerHTML += \"&lt;li&gt;Neuer Eintrag&lt;/li&gt;\";\n</code></pre> <p>\u26a0\ufe0f Vorsicht bei <code>innerHTML += ...</code>: Es rendert den ganzen Inhalt neu \u2013 nicht ideal bei Performance.</p>"},{"location":"js/dom/html/#elemente-kopieren-klonen","title":"\ud83d\udd04 Elemente kopieren (Klonen)","text":"<pre><code>const original = document.querySelector(\".card\");\nconst kopie = original.cloneNode(true); // true = inklusive Inhalt\ndocument.body.appendChild(kopie);\n</code></pre>"},{"location":"js/dom/html/#html-entfernen","title":"\ud83d\uddd1 HTML entfernen","text":"<pre><code>const zuL\u00f6schen = document.querySelector(\".hinweis\");\nzuL\u00f6schen.remove();\n</code></pre>"},{"location":"js/dom/html/#beispiel-dynamische-liste-erzeugen","title":"\ud83e\uddea Beispiel: Dynamische Liste erzeugen","text":"<pre><code>const liste = document.createElement(\"ul\");\n\n[\"HTML\", \"CSS\", \"JavaScript\"].forEach(tech =&gt; {\n  const li = document.createElement(\"li\");\n  li.textContent = tech;\n  liste.appendChild(li);\n});\n\ndocument.body.appendChild(liste);\n</code></pre>"},{"location":"js/dom/html/#html-strukturieren-per-dom","title":"\ud83c\udfa8 HTML strukturieren per DOM","text":"<pre><code>const artikel = document.createElement(\"article\");\n\nartikel.innerHTML = `\n  &lt;h2&gt;Neues Feature&lt;/h2&gt;\n  &lt;p&gt;Dieses Feature ist super.&lt;/p&gt;\n`;\n\ndocument.body.appendChild(artikel);\n</code></pre>"},{"location":"js/dom/html/#zusammenfassung","title":"\u2705 Zusammenfassung","text":"Aktion Methode/Eigenschaft HTML setzen <code>element.innerHTML = \"...\"</code> Text setzen <code>element.textContent = \"...\"</code> Element erstellen <code>document.createElement()</code> Anh\u00e4ngen <code>appendChild()</code>, <code>append()</code> Entfernen <code>remove()</code>, <code>removeChild()</code> Klonen <code>cloneNode(true)</code>"},{"location":"js/dom/methoden/","title":"\ud83d\udee0\ufe0f JavaScript DOM \u2013 Methoden","text":""},{"location":"js/dom/methoden/#was-sind-dom-methoden","title":"\ud83d\udccc Was sind DOM-Methoden?","text":"<p>DOM-Methoden sind Funktionen, mit denen du HTML-Elemente im Dokument suchen, erstellen, \u00e4ndern oder l\u00f6schen kannst.</p> <p>Du kannst dir DOM-Methoden wie Werkzeuge vorstellen, mit denen du live im HTML-Baum arbeiten kannst.</p>"},{"location":"js/dom/methoden/#elemente-finden","title":"\ud83d\udd0d Elemente finden","text":"Methode Beschreibung <code>getElementById(\"id\")</code> Findet ein Element mit einer ID <code>getElementsByClassName(\"class\")</code> Gibt HTMLCollection aller passenden Klassen <code>getElementsByTagName(\"tag\")</code> Gibt alle <code>&lt;div&gt;</code>, <code>&lt;p&gt;</code>, etc. <code>querySelector(\"selector\")</code> Gibt das erste Element f\u00fcr CSS-Selector <code>querySelectorAll(\"selector\")</code> Gibt alle passenden Elemente (NodeList)"},{"location":"js/dom/methoden/#beispiel","title":"Beispiel","text":"<pre><code>const title = document.getElementById(\"main-title\");\nconst alleAbs\u00e4tze = document.querySelectorAll(\"p\");\n</code></pre>"},{"location":"js/dom/methoden/#elemente-erstellen","title":"\ud83e\uddf1 Elemente erstellen","text":"Methode Beschreibung <code>createElement(\"tag\")</code> Erstellt ein neues HTML-Element <code>createTextNode(\"Text\")</code> Erstellt einen reinen Textknoten <code>cloneNode(true/false)</code> Dupliziert ein Element"},{"location":"js/dom/methoden/#beispiel_1","title":"Beispiel","text":"<pre><code>const neuerAbsatz = document.createElement(\"p\");\nneuerAbsatz.textContent = \"Ich bin neu!\";\ndocument.body.appendChild(neuerAbsatz);\n</code></pre>"},{"location":"js/dom/methoden/#einfugen-anhangen-verschieben","title":"\ud83d\udd01 Einf\u00fcgen, Anh\u00e4ngen &amp; Verschieben","text":"Methode Beschreibung <code>appendChild(node)</code> H\u00e4ngt Knoten als letztes Kind an <code>insertBefore(neu, vor)</code> F\u00fcgt <code>neu</code> vor einem anderen Element ein <code>replaceChild(neu, alt)</code> Ersetzt vorhandenes Kind <code>append()</code>, <code>prepend()</code> F\u00fcgt mehrere Nodes oder Text ein (modern!)"},{"location":"js/dom/methoden/#beispiel_2","title":"Beispiel","text":"<pre><code>const ul = document.querySelector(\"ul\");\nconst li = document.createElement(\"li\");\nli.textContent = \"Neuer Eintrag\";\nul.appendChild(li);\n</code></pre>"},{"location":"js/dom/methoden/#elemente-entfernen","title":"\ud83d\uddd1\ufe0f Elemente entfernen","text":"Methode Beschreibung <code>remove()</code> Entfernt sich selbst aus dem DOM <code>removeChild(child)</code> Entfernt Kindknoten von Elternelement"},{"location":"js/dom/methoden/#beispiel_3","title":"Beispiel","text":"<pre><code>const element = document.querySelector(\".hinweis\");\nelement.remove(); // Entfernt sich selbst\n</code></pre>"},{"location":"js/dom/methoden/#inhalt-manipulieren","title":"\ud83e\udde0 Inhalt manipulieren","text":"Methode / Eigenschaft Beschreibung <code>innerHTML</code> Gibt HTML-Inhalt zur\u00fcck oder setzt ihn <code>textContent</code> Gibt nur Text ohne HTML zur\u00fcck <code>innerText</code> Sichtbarer Text (wie auf der Seite sichtbar)"},{"location":"js/dom/methoden/#beispiel_4","title":"Beispiel","text":"<pre><code>element.innerHTML = \"&lt;strong&gt;Fett!&lt;/strong&gt;\";\nelement.textContent = \"Nur Text\";\n</code></pre>"},{"location":"js/dom/methoden/#attribute-bearbeiten","title":"\ud83c\udfa8 Attribute bearbeiten","text":"Methode Beschreibung <code>setAttribute(\"name\", \"wert\")</code> Setzt ein Attribut <code>getAttribute(\"name\")</code> Liest Attributwert <code>removeAttribute(\"name\")</code> Entfernt Attribut <code>hasAttribute(\"name\")</code> Pr\u00fcft, ob vorhanden"},{"location":"js/dom/methoden/#beispiel_5","title":"Beispiel","text":"<pre><code>const link = document.querySelector(\"a\");\nlink.setAttribute(\"target\", \"_blank\");\n</code></pre>"},{"location":"js/dom/methoden/#klassen-und-styles","title":"\u2705 Klassen und Styles","text":"<pre><code>element.classList.add(\"aktiv\");\nelement.classList.remove(\"inaktiv\");\nelement.classList.toggle(\"sichtbar\");\n\nelement.style.color = \"red\";\nelement.style.fontWeight = \"bold\";\n</code></pre>"},{"location":"js/dom/methoden/#strukturubersicht","title":"\ud83d\udcce Struktur\u00fcbersicht","text":"<pre><code>document\n \u2514\u2500\u2500 html\n     \u2514\u2500\u2500 body\n         \u2514\u2500\u2500 div\n             \u2514\u2500\u2500 p\n</code></pre> <p>Mit DOM-Methoden kannst du in jeden Teil dieses Baumes hineingreifen und ihn ver\u00e4ndern!</p>"},{"location":"js/dom/methoden/#tipp-queryselector-ist-der-allrounder","title":"\ud83e\udde0 Tipp: <code>querySelector</code> ist der Allrounder","text":"<p>Du kannst damit CSS-Selektoren direkt verwenden:</p> <pre><code>document.querySelector(\"ul &gt; li.active\");\ndocument.querySelector(\"#header nav a:last-child\");\n</code></pre>"},{"location":"js/dom/methoden/#fazit","title":"\ud83d\ude80 Fazit","text":"Aktion Methode Finden <code>querySelector</code>, <code>getElementById</code> Erstellen <code>createElement</code>, <code>createTextNode</code> Einf\u00fcgen <code>appendChild</code>, <code>append</code> Entfernen <code>remove()</code>, <code>removeChild()</code> Inhalte bearbeiten <code>innerHTML</code>, <code>textContent</code> Attribute \u00e4ndern <code>setAttribute</code>, <code>getAttribute</code>"},{"location":"js/dom/navigation/","title":"\ud83e\udded DOM \u2013 Navigation durch den DOM-Baum","text":""},{"location":"js/dom/navigation/#was-ist-dom-navigation","title":"\ud83e\udde9 Was ist DOM-Navigation?","text":"<p>DOM-Navigation bedeutet, dass du dich durch die Struktur des HTML-Dokuments bewegst, um Elemente zu finden oder zu ver\u00e4ndern.</p> <p>Du kannst z.\u202fB. von einem Element zum \u00fcbergeordneten (<code>parent</code>), n\u00e4chsten (<code>next</code>) oder enthaltenen (<code>child</code>) Element navigieren.</p>"},{"location":"js/dom/navigation/#beispielstruktur","title":"\ud83d\udcd1 Beispielstruktur","text":"<pre><code>&lt;div id=\"eltern\"&gt;\n  &lt;p id=\"kind1\"&gt;Erstes Kind&lt;/p&gt;\n  &lt;p id=\"kind2\"&gt;Zweites Kind&lt;/p&gt;\n&lt;/div&gt;\n</code></pre>"},{"location":"js/dom/navigation/#parentnode-parentelement","title":"\ud83d\udd3c <code>parentNode</code> / <code>parentElement</code>","text":"<p>Gibt das \u00fcbergeordnete Element zur\u00fcck:</p> <pre><code>const kind = document.getElementById(\"kind1\");\nconsole.log(kind.parentNode);     // &lt;div id=\"eltern\"&gt;\n</code></pre> <ul> <li><code>parentElement</code> = wie <code>parentNode</code>, aber garantiert ein HTML-Element</li> </ul>"},{"location":"js/dom/navigation/#childnodes-children","title":"\ud83d\udd3d <code>childNodes</code> &amp; <code>children</code>","text":"<pre><code>const eltern = document.getElementById(\"eltern\");\n\nconsole.log(eltern.childNodes); // Alle Knoten (inkl. Text!)\nconsole.log(eltern.children);   // Nur HTML-Elemente\n</code></pre> <ul> <li><code>children</code> ist oft praktischer, weil es nur echte Tags enth\u00e4lt</li> </ul>"},{"location":"js/dom/navigation/#firstchild-lastchild-vs-firstelementchild","title":"\ud83d\udd01 <code>firstChild</code>, <code>lastChild</code> vs. <code>firstElementChild</code>","text":"<pre><code>eltern.firstChild           // erster Knoten (z.\u202fB. Text oder Element)\neltern.firstElementChild    // erstes HTML-Element\neltern.lastElementChild     // letztes HTML-Element\n</code></pre>"},{"location":"js/dom/navigation/#geschwister-nextsibling-previoussibling","title":"\u2194\ufe0f Geschwister: <code>nextSibling</code>, <code>previousSibling</code>","text":"<pre><code>const kind = document.getElementById(\"kind1\");\n\nconsole.log(kind.nextSibling);         // n\u00e4chster Knoten (Text oder Tag)\nconsole.log(kind.nextElementSibling);  // n\u00e4chstes HTML-Element\n</code></pre> <pre><code>console.log(kind.previousElementSibling); // vorheriges HTML-Element\n</code></pre>"},{"location":"js/dom/navigation/#nutzliche-navigation-auf-einen-blick","title":"\ud83d\udd0e N\u00fctzliche Navigation auf einen Blick","text":"Zugriff Beschreibung <code>parentNode</code> Direktes Elternelement <code>childNodes</code> / <code>children</code> Alle bzw. nur Element-Kinder <code>firstChild</code> Erster Kind-Knoten (auch Text!) <code>firstElementChild</code> Erstes Kind-Element <code>nextElementSibling</code> N\u00e4chstes Geschwisterelement <code>previousElementSibling</code> Vorheriges Geschwisterelement"},{"location":"js/dom/navigation/#beispiel-farbe-des-nachsten-elements-andern","title":"\ud83e\uddea Beispiel: Farbe des n\u00e4chsten Elements \u00e4ndern","text":"<pre><code>const aktuelles = document.getElementById(\"kind1\");\n\naktuelles.nextElementSibling.style.color = \"tomato\";\n</code></pre>"},{"location":"js/dom/navigation/#warum-ist-das-wichtig","title":"\ud83e\udde0 Warum ist das wichtig?","text":"<ul> <li>Du kannst gezielt mit \u201eVerwandten\u201c im HTML arbeiten</li> <li>Macht Code flexibel und dynamisch</li> <li>Wichtig f\u00fcr DOM-Manipulation, Events, Templates</li> </ul>"},{"location":"js/dom/nodes/","title":"\ud83c\udf33 DOM \u2013 Nodes","text":""},{"location":"js/dom/nodes/#was-ist-ein-node","title":"\ud83e\udde9 Was ist ein Node?","text":"<p>Im DOM ist alles ein Node (dt. \u201eKnoten\u201c). Ein HTML-Dokument wird als Baumstruktur gespeichert \u2013 jede \u00dcberschrift, jedes Attribut, jedes Kommentar ist ein Node.</p> <p>Man unterscheidet verschiedene Node-Typen.</p>"},{"location":"js/dom/nodes/#die-wichtigsten-node-typen","title":"\ud83d\udd22 Die wichtigsten Node-Typen","text":"Typ Beschreibung Beispiel <code>Element</code> (1) HTML-Element <code>&lt;div&gt;</code>, <code>&lt;p&gt;</code>, <code>&lt;img&gt;</code> <code>Text</code> (3) Reiner Text <code>\"Hallo Welt\"</code> <code>Comment</code> (8) Kommentar <code>&lt;!-- Kommentar --&gt;</code> <code>Document</code> (9) Ganzes Dokument <code>document</code> <code>DocumentFragment</code> (11) Virtueller Mini-DOM f\u00fcr Vorlagen F\u00fcr schnelle DOM-Bauten"},{"location":"js/dom/nodes/#so-prufst-du-den-node-typ","title":"\ud83e\uddea So pr\u00fcfst du den Node-Typ","text":"<pre><code>const p = document.querySelector(\"p\");\n\nconsole.log(p.nodeType); // 1 (Element)\nconsole.log(p.nodeName); // \"P\"\n</code></pre>"},{"location":"js/dom/nodes/#zugriff-auf-node-inhalte","title":"\ud83d\udce6 Zugriff auf Node-Inhalte","text":"<pre><code>const node = document.querySelector(\"p\");\n\nconsole.log(node.nodeValue); // null (weil es ein Element ist)\nconsole.log(node.textContent); // liefert Textinhalt\nconsole.log(node.innerHTML); // gibt HTML-Inhalt zur\u00fcck\n</code></pre>"},{"location":"js/dom/nodes/#nodetype-werte-im-uberblick","title":"\ud83d\udcda <code>nodeType</code> Werte im \u00dcberblick","text":"Wert Typ <code>1</code> Element Node <code>3</code> Text Node <code>8</code> Comment Node <code>9</code> Document Node <code>11</code> DocumentFragment Node"},{"location":"js/dom/nodes/#node-struktur","title":"\ud83e\uddf1 Node-Struktur","text":"<pre><code>&lt;p&gt;Hallo &lt;strong&gt;Welt&lt;/strong&gt;&lt;/p&gt;\n</code></pre> <p>Hat 3 Nodes:</p> <ol> <li><code>&lt;p&gt;</code> \u2192 Element Node  </li> <li><code>\"Hallo \"</code> \u2192 Text Node  </li> <li><code>&lt;strong&gt;Welt&lt;/strong&gt;</code> \u2192 Element Node mit eigenem Text Node</li> </ol>"},{"location":"js/dom/nodes/#kindknoten-mit-childnodes","title":"\ud83d\udd04 Kindknoten mit <code>childNodes</code>","text":"<pre><code>const p = document.querySelector(\"p\");\n\nconsole.log(p.childNodes); // gibt alle Knoten zur\u00fcck (auch Text!)\n</code></pre> <p>\ud83d\udccc Unterschied zu <code>children</code>: <code>children</code> zeigt nur Elemente, keine Texte oder Kommentare.</p>"},{"location":"js/dom/nodes/#warum-ist-das-wichtig","title":"\ud83e\udde0 Warum ist das wichtig?","text":"<ul> <li>Nodes sind die Basis aller DOM-Operationen</li> <li>Wenn du z.\u202fB. whitespace oder Text mitlesen willst, brauchst du <code>childNodes</code></li> <li>Auch f\u00fcr Vorlagen &amp; Custom DOM-Bearbeitung wichtig</li> </ul>"},{"location":"js/dom/nodes/#zusammenfassung","title":"\u2705 Zusammenfassung","text":"Node-Konzept Beschreibung <code>nodeType</code> Typ (z.\u202fB. 1 = Element, 3 = Text) <code>nodeName</code> Name des Elements (z.\u202fB. <code>DIV</code>) <code>nodeValue</code> Nur bei Text-, Attribut- und Kommentar-Nodes <code>childNodes</code> Liste aller Kindknoten inkl. Text <code>textContent</code> Nur reiner Text"},{"location":"js/dom/observer/","title":"\ud83e\uddec MutationObserver","text":""},{"location":"js/dom/observer/#was-ist-ein-mutationobserver","title":"\ud83e\udde9 Was ist ein MutationObserver?","text":"<p>Ein MutationObserver ist eine JavaScript-API, mit der du \u00c4nderungen am DOM automatisch erkennen kannst \u2013 z.\u202fB. wenn:</p> <ul> <li>ein neues Element eingef\u00fcgt wird,</li> <li>sich Text ver\u00e4ndert,</li> <li>Attribute ge\u00e4ndert werden,</li> <li>oder ganze Knoten gel\u00f6scht werden.</li> </ul> <p>\ud83d\udc49 Ideal f\u00fcr dynamische UIs, Frameworks oder Monitoring-Funktionen!</p>"},{"location":"js/dom/observer/#warum-nicht-einfach-event-listener","title":"\ud83e\udde0 Warum nicht einfach Event Listener?","text":"<p>Event Listener beobachten Benutzeraktionen (z.\u202fB. Klick, Scroll). MutationObserver beobachtet DOM-Ver\u00e4nderungen im Hintergrund \u2013 ohne, dass der Nutzer aktiv etwas macht.</p>"},{"location":"js/dom/observer/#syntax","title":"\ud83d\udee0\ufe0f Syntax","text":"<pre><code>const observer = new MutationObserver(callback);\nobserver.observe(zielElement, optionen);\n</code></pre> Teil Bedeutung <code>callback</code> Funktion, die bei \u00c4nderung aufgerufen wird <code>zielElement</code> DOM-Element, das beobachtet wird <code>optionen</code> Welche Arten von \u00c4nderungen sollen erkannt werden?"},{"location":"js/dom/observer/#einfaches-beispiel","title":"\u2705 Einfaches Beispiel","text":"<pre><code>const ziel = document.getElementById(\"inhalt\");\n\nconst observer = new MutationObserver((mutationen) =&gt; {\n  console.log(\"Mutation erkannt:\", mutationen);\n});\n\nobserver.observe(ziel, {\n  childList: true,\n  subtree: true\n});\n</code></pre> <p>\ud83d\udccc Beobachtet, ob innerhalb von <code>#inhalt</code> Knoten hinzugef\u00fcgt oder entfernt werden.</p>"},{"location":"js/dom/observer/#optionen-im-detail","title":"\u2699\ufe0f Optionen im Detail","text":"Option Beschreibung <code>childList</code> neue/gel\u00f6schte Kindknoten <code>attributes</code> \u00c4nderungen an Attributen erkennen <code>subtree</code> gesamte Nachkommen-Struktur \u00fcberwachen <code>characterData</code> Text\u00e4nderungen beobachten <code>attributeFilter</code> Nur bestimmte Attribute beobachten <code>attributeOldValue</code> Vorheriger Attributwert speichern <code>characterDataOldValue</code> Vorheriger Textwert speichern"},{"location":"js/dom/observer/#beispiel-textanderungen-beobachten","title":"\ud83e\uddea Beispiel: Text\u00e4nderungen beobachten","text":"<pre><code>const p = document.querySelector(\"p\");\n\nconst observer = new MutationObserver((mutations) =&gt; {\n  mutations.forEach(m =&gt; {\n    console.log(\"Alter Text:\", m.oldValue);\n    console.log(\"Neuer Text:\", m.target.textContent);\n  });\n});\n\nobserver.observe(p, {\n  characterData: true,\n  subtree: true,\n  characterDataOldValue: true\n});\n</code></pre>"},{"location":"js/dom/observer/#beobachtung-beenden","title":"\ud83e\uddf9 Beobachtung beenden","text":"<pre><code>observer.disconnect();\n</code></pre> <p>Beendet das Beobachten. Wichtig, um Performance zu optimieren!</p>"},{"location":"js/dom/observer/#komplexes-beispiel-attribut-struktur","title":"\ud83d\udce6 Komplexes Beispiel: Attribut &amp; Struktur","text":"<pre><code>const target = document.querySelector(\"#element\");\n\nconst observer = new MutationObserver((mutationList) =&gt; {\n  for (let mutation of mutationList) {\n    if (mutation.type === \"attributes\") {\n      console.log(\"Attribut ge\u00e4ndert:\", mutation.attributeName);\n    }\n    if (mutation.type === \"childList\") {\n      console.log(\"Knoten hinzugef\u00fcgt/entfernt\");\n    }\n  }\n});\n\nobserver.observe(target, {\n  attributes: true,\n  childList: true,\n  subtree: true\n});\n</code></pre>"},{"location":"js/dom/observer/#zusammenfassung","title":"\u2705 Zusammenfassung","text":"Vorteil Beschreibung Automatisch Erkennt DOM-\u00c4nderungen ohne manuelles Triggern Vielseitig Knoten, Attribute, Text, Struktur Performant Besser als Polling mit <code>setInterval</code> Erweiterbar Auch in Frameworks &amp; UI-Komponenten n\u00fctzlich"},{"location":"js/dom/observer/#wann-einsetzen","title":"\ud83d\ude80 Wann einsetzen?","text":"<ul> <li>Bei dynamisch generiertem Content</li> <li>In Web-Komponenten</li> <li>F\u00fcr Live-Aktualisierungen ohne Reload</li> <li>In Content-Editoren, Formularw\u00e4chtern oder SEO-Checkern</li> </ul>"},{"location":"js/dom/observer/#ressourcen","title":"\ud83d\udd17 Ressourcen","text":"<ul> <li>MDN \u2013 MutationObserver</li> <li>Can I use \u2013 Sehr gut unterst\u00fctzt</li> </ul>"},{"location":"js/dom/shadow/","title":"\ud83c\udf11 Shadow DOM","text":""},{"location":"js/dom/shadow/#was-ist-der-shadow-dom","title":"\ud83e\udde9 Was ist der Shadow DOM?","text":"<p>Der Shadow DOM ist ein Teil des DOMs, der gekapselt ist \u2013 das hei\u00dft:</p> <ul> <li>Er ist abgeschirmt vom normalen HTML-Dokument (dem \u201eLight DOM\u201c),</li> <li>CSS und JavaScript von au\u00dfen gelten darin nicht,</li> <li>und umgekehrt beeinflusst er nicht den globalen DOM.</li> </ul> <p>\ud83d\udc49 Shadow DOM ist ein Grundpfeiler von Web Components.</p>"},{"location":"js/dom/shadow/#warum-shadow-dom","title":"\ud83e\udde0 Warum Shadow DOM?","text":"Vorteil Beschreibung Kapselung HTML, CSS und JS im Shadow DOM sind privat Kein Style-Leaking Styles \u00fcberschneiden sich nicht gegenseitig Wiederverwendbarkeit Saubere Komponenten, keine Namenskonflikte Testbarkeit Leicht isolierbar"},{"location":"js/dom/shadow/#shadow-dom-erstellen","title":"\ud83d\udee0\ufe0f Shadow DOM erstellen","text":"<pre><code>&lt;div id=\"host\"&gt;&lt;/div&gt;\n</code></pre> <pre><code>const host = document.getElementById(\"host\");\n\n// Shadow Root anf\u00fcgen\nconst shadow = host.attachShadow({ mode: \"open\" });\n\n// Inhalt einf\u00fcgen\nshadow.innerHTML = `\n  &lt;style&gt;\n    p { color: crimson; }\n  &lt;/style&gt;\n  &lt;p&gt;Ich bin im Shadow DOM&lt;/p&gt;\n`;\n</code></pre>"},{"location":"js/dom/shadow/#mode-open-vs-closed","title":"\ud83c\udfad <code>mode: \"open\"</code> vs. <code>\"closed\"</code>","text":"Modus Bedeutung <code>\"open\"</code> Zugriff auf <code>element.shadowRoot</code> m\u00f6glich <code>\"closed\"</code> Kein Zugriff von au\u00dfen m\u00f6glich"},{"location":"js/dom/shadow/#zugriff-von-auen","title":"\ud83d\udd0d Zugriff von au\u00dfen","text":"<pre><code>host.shadowRoot.querySelector(\"p\").textContent = \"Ge\u00e4ndert\";\n</code></pre> <p>\u26a0\ufe0f Funktioniert nur bei <code>\"open\"</code>-Modus.</p>"},{"location":"js/dom/shadow/#beispiel-kapselung","title":"\ud83e\udde9 Beispiel: Kapselung","text":"<pre><code>&lt;style&gt;\n  p { color: blue; }\n&lt;/style&gt;\n\n&lt;div id=\"host\"&gt;&lt;/div&gt;\n</code></pre> <pre><code>const shadow = document.getElementById(\"host\")\n  .attachShadow({ mode: \"open\" });\n\nshadow.innerHTML = `\n  &lt;style&gt;\n    p { color: red; }\n  &lt;/style&gt;\n  &lt;p&gt;Shadow Inhalt&lt;/p&gt;\n`;\n</code></pre> <p>\ud83d\udd38 Ergebnis: Der <code>&lt;p&gt;</code>-Tag im Shadow DOM ist rot, obwohl au\u00dfen <code>blue</code> definiert wurde.</p>"},{"location":"js/dom/shadow/#shadow-dom-mit-javascript-erstellen","title":"\u2699\ufe0f Shadow DOM mit JavaScript erstellen","text":"<pre><code>class MeineBox extends HTMLElement {\n  constructor() {\n    super();\n    const shadow = this.attachShadow({ mode: \"open\" });\n    shadow.innerHTML = `\n      &lt;style&gt;\n        .rahmen { border: 2px solid black; padding: 1rem; }\n      &lt;/style&gt;\n      &lt;div class=\"rahmen\"&gt;\n        &lt;slot&gt;&lt;/slot&gt;\n      &lt;/div&gt;\n    `;\n  }\n}\n\ncustomElements.define(\"meine-box\", MeineBox);\n</code></pre> <pre><code>&lt;meine-box&gt;Hallo in der Box!&lt;/meine-box&gt;\n</code></pre> <p>\u2705 Ergebnis: Inhalt ist gekapselt, aber \u00fcber <code>&lt;slot&gt;</code> sichtbar.</p>"},{"location":"js/dom/shadow/#slot-sichtbares-loch-im-shadow-dom","title":"\ud83d\udd73\ufe0f Slot \u2013 Sichtbares Loch im Shadow DOM","text":"<p>Ein <code>&lt;slot&gt;</code> ist ein Platzhalter f\u00fcr Inhalte, die der Benutzer in das Custom Element schreibt.</p> <pre><code>shadow.innerHTML = `\n  &lt;style&gt;slot { color: green; }&lt;/style&gt;\n  &lt;slot&gt;&lt;/slot&gt;\n`;\n</code></pre>"},{"location":"js/dom/shadow/#einschrankungen","title":"\ud83d\udea8 Einschr\u00e4nkungen","text":"<ul> <li>Kein Zugriff mit <code>querySelectorAll('*')</code> von au\u00dfen</li> <li>Manche Tools (z.\u202fB. jQuery) k\u00f6nnen kein Shadow DOM</li> <li>Barrierefreiheit muss explizit beachtet werden</li> </ul>"},{"location":"js/dom/shadow/#zusammenfassung","title":"\u2705 Zusammenfassung","text":"Vorteil Beschreibung Strukturkapselung HTML/CSS ist isoliert Style Isolation Kein Konflikt mit globalem CSS Web Components Ready Perfekte Basis f\u00fcr benutzerdefinierte Tags Erfordert Unterst\u00fctzung Nicht in alten Browsern verf\u00fcgbar"},{"location":"js/dom/shadow/#ressourcen","title":"\ud83d\udd17 Ressourcen","text":"<ul> <li>MDN \u2013 Shadow DOM</li> <li>Web.dev \u2013 Shadow DOM</li> </ul>"},{"location":"js/objekte/anzeigen/","title":"\ud83d\udda5\ufe0f Objekte anzeigen (Object Display)","text":"<p>Wenn du mit Objekten arbeitest, m\u00f6chtest du oft sehen, was drin steckt. Es gibt verschiedene M\u00f6glichkeiten, ein Objekt in JavaScript sichtbar zu machen, zu inspizieren oder formatiert auszugeben \u2013 besonders beim Debugging.</p>"},{"location":"js/objekte/anzeigen/#1-consolelogobjekt","title":"\ud83d\udd0d 1. <code>console.log(objekt)</code>","text":"<pre><code>const person = { name: \"Anna\", alter: 30 };\nconsole.log(person);\n</code></pre> <p>\u2705 Zeigt das Objekt direkt in der Konsole. \ud83d\udc49 In modernen Browsern kannst du das Objekt aufklappen, um Details zu sehen.</p>"},{"location":"js/objekte/anzeigen/#2-consoledirobjekt","title":"\ud83d\udd0e 2. <code>console.dir(objekt)</code>","text":"<pre><code>console.dir(person);\n</code></pre> <p>Zeigt eine interaktive Objektansicht \u2013 besonders n\u00fctzlich f\u00fcr HTML-DOM-Elemente.</p>"},{"location":"js/objekte/anzeigen/#3-json-format-jsonstringify","title":"\ud83e\uddfe 3. JSON-Format: <code>JSON.stringify()</code>","text":"<pre><code>console.log(JSON.stringify(person));\n// \u2192 {\"name\":\"Anna\",\"alter\":30}\n</code></pre> <p>\ud83d\udca1 Optional: Einr\u00fccken f\u00fcr bessere Lesbarkeit:</p> <pre><code>console.log(JSON.stringify(person, null, 2));\n</code></pre> <p>Ergebnis:</p> <pre><code>{\n  \"name\": \"Anna\",\n  \"alter\": 30\n}\n</code></pre>"},{"location":"js/objekte/anzeigen/#4-html-ausgabe","title":"\ud83c\udfa8 4. HTML-Ausgabe","text":"<p>M\u00f6chtest du ein Objekt in einer Webseite anzeigen, kannst du es wie folgt einbinden:</p> <pre><code>&lt;pre id=\"ausgabe\"&gt;&lt;/pre&gt;\n\n&lt;script&gt;\n  const person = { name: \"Tom\", alter: 28 };\n  document.getElementById(\"ausgabe\").textContent = JSON.stringify(person, null, 2);\n&lt;/script&gt;\n</code></pre> <p>\ud83d\udca1 <code>&lt;pre&gt;</code> sorgt f\u00fcr Zeilenumbr\u00fcche und Einr\u00fcckung.</p>"},{"location":"js/objekte/anzeigen/#5-alle-eigenschaften-auflisten","title":"\ud83d\udccb 5. Alle Eigenschaften auflisten","text":"<pre><code>const obj = { a: 1, b: 2 };\n\nconsole.log(Object.keys(obj));    // [\"a\", \"b\"]\nconsole.log(Object.values(obj));  // [1, 2]\nconsole.log(Object.entries(obj)); // [[\"a\",1],[\"b\",2]]\n</code></pre>"},{"location":"js/objekte/anzeigen/#6-manuelles-auslesen","title":"\ud83e\uddea 6. Manuelles Auslesen","text":"<pre><code>for (let key in obj) {\n  console.log(`${key}: ${obj[key]}`);\n}\n</code></pre>"},{"location":"js/objekte/anzeigen/#7-vorsicht-bei-zirkularen-objekten","title":"\ud83d\udeab 7. Vorsicht bei zirkul\u00e4ren Objekten","text":"<p>Ein Objekt, das auf sich selbst verweist, kann <code>JSON.stringify()</code> zum Absturz bringen:</p> <pre><code>const kreis = {};\nkreis.selbst = kreis;\n\nJSON.stringify(kreis); // \u274c TypeError: Converting circular structure to JSON\n</code></pre> <p>\u2705 L\u00f6sung mit spezieller Bibliothek wie <code>circular-json</code> oder <code>structuredClone()</code> (ab neueren Browsern).</p>"},{"location":"js/objekte/anzeigen/#nutzliche-tools-dev-tools","title":"\ud83e\uddf0 N\u00fctzliche Tools (Dev Tools)","text":"<ul> <li>Browser-Konsole (Chrome, Firefox, Edge)</li> <li>Breakpoints im Debugger</li> <li>Watch- oder Scope-Fenster in Entwicklertools</li> </ul>"},{"location":"js/objekte/anzeigen/#zusammenfassung","title":"\ud83d\udcda Zusammenfassung","text":"Methode Beschreibung <code>console.log(obj)</code> Einfacher Konsolenausdruck <code>console.dir(obj)</code> Interaktive Darstellung <code>JSON.stringify(obj)</code> Objekt als Text (z.\u202fB. f\u00fcr API oder Debug) <code>Object.keys/values/entries</code> Strukturiertes Auslesen <code>for...in</code> Manuelles Durchlaufen"},{"location":"js/objekte/constructor/","title":"\ud83c\udfd7\ufe0f Object Constructors","text":"<p>Constructor Functions sind spezielle Funktionen, mit denen du mehrere Objekte mit derselben Struktur und Logik erstellen kannst. Sie sind ein zentrales Konzept der objektorientierten Programmierung in JavaScript.</p>"},{"location":"js/objekte/constructor/#was-ist-ein-konstruktor","title":"\ud83d\udccc Was ist ein Konstruktor?","text":"<p>Ein Konstruktor ist einfach eine normale Funktion, die:</p> <ul> <li>mit einem Gro\u00dfbuchstaben beginnt (Konvention)</li> <li>mit dem <code>new</code>-Schl\u00fcsselwort aufgerufen wird</li> <li>\u00fcber <code>this</code> Eigenschaften und Methoden zuweist</li> </ul>"},{"location":"js/objekte/constructor/#beispiel-ein-einfacher-konstruktor","title":"\ud83e\uddf1 Beispiel: Ein einfacher Konstruktor","text":"<pre><code>function Person(name, alter) {\n  this.name = name;\n  this.alter = alter;\n  this.begruessung = function() {\n    console.log(`Hallo, ich bin ${this.name} und ${this.alter} Jahre alt.`);\n  };\n}\n</code></pre> <p>\u27a1\ufe0f Jetzt kannst du neue Personen erzeugen:</p> <pre><code>const anna = new Person(\"Anna\", 28);\nconst tom = new Person(\"Tom\", 35);\n\nanna.begruessung(); // Hallo, ich bin Anna...\ntom.begruessung();  // Hallo, ich bin Tom...\n</code></pre>"},{"location":"js/objekte/constructor/#was-macht-new","title":"\ud83c\udfaf Was macht <code>new</code>?","text":"<pre><code>const objekt = new Konstruktor();\n</code></pre> <ul> <li>Erstellt ein leeres Objekt</li> <li>Setzt <code>this</code> in der Funktion auf dieses neue Objekt</li> <li>F\u00fchrt den Funktionscode aus</li> <li>Gibt das Objekt zur\u00fcck</li> </ul>"},{"location":"js/objekte/constructor/#warum-konstruktoren","title":"\ud83e\udde0 Warum Konstruktoren?","text":"<ul> <li>Wiederverwendbare Objektvorlagen</li> <li>Struktur &amp; Verhalten definieren</li> <li>Basis f\u00fcr Klassen und Vererbung</li> </ul>"},{"location":"js/objekte/constructor/#methoden-auslagern-auf-das-prototype","title":"\ud83e\uddf0 Methoden auslagern (auf das Prototype)","text":"<p>Wenn du viele Objekte erstellst, ist es effizienter, Methoden nicht im Objekt, sondern auf dem Prototyp zu definieren:</p> <pre><code>function Auto(marke) {\n  this.marke = marke;\n}\n\nAuto.prototype.fahren = function() {\n  console.log(`${this.marke} f\u00e4hrt los!`);\n};\n\nconst bmw = new Auto(\"BMW\");\nbmw.fahren(); // BMW f\u00e4hrt los!\n</code></pre> <p>\u2705 Spart Speicher, weil alle Instanzen dieselbe Methode teilen.</p>"},{"location":"js/objekte/constructor/#vergleich-objektliterale-vs-konstruktoren","title":"\ud83e\uddea Vergleich: Objektliterale vs. Konstruktoren","text":"Objektliteral Konstruktorfunktion F\u00fcr 1 Objekt F\u00fcr viele \u00e4hnliche Objekte Schnell und direkt Flexibel und wiederverwendbar Kein <code>new</code> n\u00f6tig Wird mit <code>new</code> aufgerufen"},{"location":"js/objekte/constructor/#konstruktor-erkennung","title":"\ud83d\udd10 Konstruktor-Erkennung","text":"<pre><code>console.log(bmw.constructor === Auto); // true\n</code></pre>"},{"location":"js/objekte/constructor/#spezialtipp-instanceof","title":"\ud83d\udca1 Spezialtipp: <code>instanceof</code>","text":"<pre><code>console.log(bmw instanceof Auto); // true\n</code></pre>"},{"location":"js/objekte/constructor/#beispiel-mit-mehreren-methoden","title":"\ud83d\udcda Beispiel mit mehreren Methoden","text":"<pre><code>function Tier(name, art) {\n  this.name = name;\n  this.art = art;\n}\n\nTier.prototype.sprechen = function() {\n  console.log(`${this.name} macht Ger\u00e4usche.`);\n};\n\nconst hund = new Tier(\"Bello\", \"Hund\");\nhund.sprechen(); // Bello macht Ger\u00e4usche.\n</code></pre>"},{"location":"js/objekte/constructor/#wichtige-hinweise","title":"\u26a0\ufe0f Wichtige Hinweise","text":"<ul> <li>Innerhalb des Konstruktors zeigt <code>this</code> auf das neue Objekt</li> <li>Wenn du den Konstruktor ohne <code>new</code> aufrufst, funktioniert er nicht richtig</li> <li>Ab ES6 gibt es auch <code>class</code>-Syntax als Alternative (siehe n\u00e4chstes Kapitel)</li> </ul>"},{"location":"js/objekte/eigenschaften/","title":"\ud83c\udff7\ufe0f Object Properties (Eigenschaften)","text":"<p>Eigenschaften sind die Bausteine von Objekten in JavaScript. Sie bestehen aus Schl\u00fcssel-Wert-Paaren (Key-Value). Mit ihnen speicherst und strukturierst du beliebige Daten in einem Objekt.</p>"},{"location":"js/objekte/eigenschaften/#eigenschaften-erstellen","title":"\ud83e\uddf1 Eigenschaften erstellen","text":""},{"location":"js/objekte/eigenschaften/#beim-erstellen-eines-objekts","title":"\ud83d\udd39 Beim Erstellen eines Objekts","text":"<pre><code>const person = {\n  name: \"Florian\",\n  alter: 33,\n  beruf: \"Entwickler\"\n};\n</code></pre>"},{"location":"js/objekte/eigenschaften/#eigenschaften-lesen","title":"\ud83d\udd0d Eigenschaften lesen","text":"<pre><code>console.log(person.name);      // Florian\nconsole.log(person[\"alter\"]);  // 33\n</code></pre> <p>Mit Punktnotation (<code>.</code>) oder Klammernotation (<code>[\"\"]</code>)</p>"},{"location":"js/objekte/eigenschaften/#eigenschaften-andern","title":"\u270f\ufe0f Eigenschaften \u00e4ndern","text":"<pre><code>person.alter = 34;\nperson[\"beruf\"] = \"Data Scientist\";\n</code></pre>"},{"location":"js/objekte/eigenschaften/#neue-eigenschaft-hinzufugen","title":"\u2795 Neue Eigenschaft hinzuf\u00fcgen","text":"<pre><code>person.hobby = \"Coden\";\n</code></pre>"},{"location":"js/objekte/eigenschaften/#eigenschaft-loschen","title":"\u274c Eigenschaft l\u00f6schen","text":"<pre><code>delete person.beruf;\n</code></pre>"},{"location":"js/objekte/eigenschaften/#dynamische-schlussel","title":"\ud83d\udce6 Dynamische Schl\u00fcssel","text":"<pre><code>let eigenschaft = \"wohnort\";\nperson[eigenschaft] = \"M\u00fcnchen\";\n</code></pre>"},{"location":"js/objekte/eigenschaften/#prufen-ob-eigenschaft-existiert","title":"\u2705 Pr\u00fcfen ob Eigenschaft existiert","text":"<pre><code>\"alter\" in person         // true\nperson.hasOwnProperty(\"name\") // true\n</code></pre>"},{"location":"js/objekte/eigenschaften/#uber-eigenschaften-iterieren","title":"\ud83d\udd01 \u00dcber Eigenschaften iterieren","text":"<pre><code>for (let key in person) {\n  console.log(key, person[key]);\n}\n</code></pre>"},{"location":"js/objekte/eigenschaften/#property-descriptors-erweitert","title":"\ud83e\udde0 Property Descriptors (erweitert)","text":"<p>Jede Eigenschaft hat interne Einstellungen:</p> Descriptor Bedeutung <code>value</code> Der gespeicherte Wert <code>writable</code> Ob der Wert ge\u00e4ndert werden kann <code>enumerable</code> Ob die Eigenschaft durch <code>for...in</code> erscheint <code>configurable</code> Ob sie gel\u00f6scht oder ver\u00e4ndert werden kann <p>Beispiel:</p> <pre><code>Object.defineProperty(person, \"id\", {\n  value: 123,\n  writable: false,\n  enumerable: true,\n  configurable: false\n});\n</code></pre>"},{"location":"js/objekte/eigenschaften/#eigenschaften-auflisten","title":"\ud83d\udccb Eigenschaften auflisten","text":"<pre><code>Object.keys(person);     // [\"name\", \"alter\", \"hobby\"]\nObject.values(person);   // [\"Florian\", 34, \"Coden\"]\nObject.entries(person);  // [[\"name\", \"Florian\"], [\"alter\", 34], ...]\n</code></pre>"},{"location":"js/objekte/eigenschaften/#kurzschreibweise-ab-es6","title":"\ud83d\udd27 Kurzschreibweise (ab ES6)","text":"<pre><code>let vorname = \"Max\";\nlet nutzer = { vorname };  // { vorname: \"Max\" }\n</code></pre>"},{"location":"js/objekte/eigenschaften/#spread-shallow-copy","title":"\ud83d\udd01 Spread &amp; Shallow Copy","text":"<pre><code>let kopie = { ...person }; // flache Kopie\n</code></pre>"},{"location":"js/objekte/eigenschaften/#eigenschaften-auslesen-destructuring","title":"\ud83d\udcda Eigenschaften auslesen (Destructuring)","text":"<pre><code>const { name, alter } = person;\nconsole.log(name); // Florian\n</code></pre>"},{"location":"js/objekte/eigenschaften/#getter-setter","title":"\ud83d\udd10 Getter &amp; Setter","text":"<pre><code>const user = {\n  vorname: \"Anna\",\n  nachname: \"Schmidt\",\n\n  get vollerName() {\n    return `${this.vorname} ${this.nachname}`;\n  },\n\n  set vollerName(name) {\n    [this.vorname, this.nachname] = name.split(\" \");\n  }\n};\n\nconsole.log(user.vollerName); // Anna Schmidt\nuser.vollerName = \"Lisa Meier\";\nconsole.log(user.vorname);    // Lisa\n</code></pre>"},{"location":"js/objekte/eigenschaften/#datei-vorschlag-javascriptobject-propertiesmd","title":"\ud83d\uddc2 Datei-Vorschlag: <code>javascript/object-properties.md</code>","text":""},{"location":"js/objekte/eigenschaften/#zusammenfassung","title":"\u2705 Zusammenfassung","text":"Aktion Beispiel Lesen <code>obj.key</code> oder <code>obj[\"key\"]</code> Schreiben <code>obj.key = wert</code> Hinzuf\u00fcgen <code>obj.neu = wert</code> L\u00f6schen <code>delete obj.key</code> Pr\u00fcfen <code>\"key\" in obj</code> / <code>obj.hasOwnProperty()</code>"},{"location":"js/objekte/methoden/","title":"\ud83d\udd27 Object Methods (Methoden)","text":"<p>Methoden sind Funktionen, die in einem Objekt gespeichert sind. Sie erm\u00f6glichen es dir, Verhalten (Funktionen) direkt mit Daten (Eigenschaften) zu verbinden.</p>"},{"location":"js/objekte/methoden/#was-ist-eine-methode","title":"\ud83d\udccc Was ist eine Methode?","text":"<p>Eine Methode ist einfach eine Funktion als Eigenschaft eines Objekts.</p> <pre><code>const person = {\n  name: \"Florian\",\n  sagHallo: function() {\n    console.log(\"Hallo, ich bin \" + this.name);\n  }\n};\n\nperson.sagHallo(); // Hallo, ich bin Florian\n</code></pre>"},{"location":"js/objekte/methoden/#warum-methoden","title":"\ud83c\udfaf Warum Methoden?","text":"<ul> <li>Binden Verhalten direkt ans Objekt</li> <li>Nutzen <code>this</code>, um auf eigene Eigenschaften zuzugreifen</li> <li>Helfen, Objekte zu organisieren und wiederverwendbar zu machen</li> </ul>"},{"location":"js/objekte/methoden/#kurzschreibweise-es6","title":"\u2728 Kurzschreibweise (ES6)","text":"<pre><code>const user = {\n  name: \"Anna\",\n  begruessung() {\n    console.log(`Hallo, ${this.name}`);\n  }\n};\n\nuser.begruessung(); // Hallo, Anna\n</code></pre>"},{"location":"js/objekte/methoden/#this-in-methoden","title":"\ud83e\udde0 <code>this</code> in Methoden","text":"<p><code>this</code> bezieht sich innerhalb einer Methode immer auf das Objekt selbst:</p> <pre><code>const auto = {\n  marke: \"Tesla\",\n  starten() {\n    console.log(`${this.marke} startet...`);\n  }\n};\n\nauto.starten(); // Tesla startet...\n</code></pre>"},{"location":"js/objekte/methoden/#methoden-aufrufen","title":"\ud83d\udd01 Methoden aufrufen","text":"<pre><code>person.sagHallo();\nuser.begruessung();\n</code></pre>"},{"location":"js/objekte/methoden/#methoden-konnen-parameter-haben","title":"\ud83e\uddf1 Methoden k\u00f6nnen Parameter haben","text":"<pre><code>const rechner = {\n  multiplizieren(a, b) {\n    return a * b;\n  }\n};\n\nconsole.log(rechner.multiplizieren(3, 4)); // 12\n</code></pre>"},{"location":"js/objekte/methoden/#methoden-konnen-auch-methoden-aufrufen","title":"\ud83d\udce6 Methoden k\u00f6nnen auch Methoden aufrufen","text":"<pre><code>const konto = {\n  stand: 1000,\n  einzahlen(betrag) {\n    this.stand += betrag;\n  },\n  auszahlung(betrag) {\n    if (betrag &lt;= this.stand) {\n      this.stand -= betrag;\n    }\n  },\n  info() {\n    console.log(`Kontostand: ${this.stand} \u20ac`);\n  }\n};\n\nkonto.einzahlen(500);\nkonto.auszahlung(200);\nkonto.info(); // Kontostand: 1300 \u20ac\n</code></pre>"},{"location":"js/objekte/methoden/#dynamisch-methoden-hinzufugen","title":"\ud83e\uddf0 Dynamisch Methoden hinzuf\u00fcgen","text":"<pre><code>const hund = {\n  name: \"Bello\"\n};\n\nhund.bellen = function() {\n  console.log(`${this.name} sagt: Wuff!`);\n};\n\nhund.bellen(); // Bello sagt: Wuff!\n</code></pre>"},{"location":"js/objekte/methoden/#methoden-aus-anderen-objekten-ubernehmen","title":"\ud83d\udd04 Methoden aus anderen Objekten \u00fcbernehmen","text":"<pre><code>const mathTools = {\n  verdoppeln(x) {\n    return x * 2;\n  }\n};\n\nconst meinObjekt = {\n  wert: 10,\n  rechne: mathTools.verdoppeln\n};\n\nconsole.log(meinObjekt.rechne(5)); // 10\n</code></pre>"},{"location":"js/objekte/methoden/#methoden-vs-funktionen","title":"\u2705 Methoden vs. Funktionen","text":"Funktion Methode Steht alleine Geh\u00f6rt zu einem Objekt <code>function sagHallo() {}</code> <code>objekt.sagHallo = function() {}</code> Hat kein automatisches <code>this</code> Nutzt <code>this</code> f\u00fcr das eigene Objekt"},{"location":"js/objekte/methoden/#mini-beispiel","title":"\ud83e\uddea Mini-Beispiel","text":"<pre><code>const spieler = {\n  name: \"Lena\",\n  punkte: 0,\n  punkteHinzuf\u00fcgen(wert) {\n    this.punkte += wert;\n    console.log(`${this.name} hat jetzt ${this.punkte} Punkte.`);\n  }\n};\n\nspieler.punkteHinzuf\u00fcgen(10);\n// \u2192 Lena hat jetzt 10 Punkte.\n</code></pre>"},{"location":"js/objekte/methoden/#weiterfuhrend","title":"\ud83d\udcda Weiterf\u00fchrend","text":"<ul> <li><code>this</code> und Bindung verstehen</li> <li>Arrow Functions in Objekten vermeiden (kein eigenes <code>this</code>)</li> <li>Methoden-Kette (method chaining)</li> <li>Prototypen und Klassen</li> </ul>"},{"location":"js/objekte/object/","title":"\ud83d\udce6 Objekte","text":"<p>Objekte sind eine der wichtigsten Strukturen in JavaScript. Mit ihnen kannst du Daten b\u00fcndeln, Eigenschaften speichern und Funktionen (sogenannte Methoden) zu Gruppen zusammenfassen.</p>"},{"location":"js/objekte/object/#was-ist-ein-objekt","title":"\ud83d\udccc Was ist ein Objekt?","text":"<p>Ein Objekt besteht aus Eigenschaften (Werte) und Methoden (Funktionen), die unter einem gemeinsamen Namen organisiert sind. Ein Objekt ist wie eine Art \u201eDatenpaket\u201c, das zu einer bestimmten Sache geh\u00f6rt.</p>"},{"location":"js/objekte/object/#objekt-erstellen","title":"\ud83e\uddf1 Objekt erstellen","text":""},{"location":"js/objekte/object/#1-mit-geschweiften-klammern","title":"\ud83d\udd39 1. Mit geschweiften Klammern (<code>{}</code>)","text":"<pre><code>const person = {\n  vorname: \"Max\",\n  nachname: \"Mustermann\",\n  alter: 30,\n  istAktiv: true\n};\n</code></pre>"},{"location":"js/objekte/object/#2-nachtraglich-eigenschaften-hinzufugen","title":"\ud83d\udd39 2. Nachtr\u00e4glich Eigenschaften hinzuf\u00fcgen","text":"<pre><code>person.beruf = \"Entwickler\";\nperson[\"stadt\"] = \"Berlin\";\n</code></pre>"},{"location":"js/objekte/object/#eigenschaften-lesen","title":"\ud83d\udcd6 Eigenschaften lesen","text":"<pre><code>console.log(person.vorname);     // Max\nconsole.log(person[\"nachname\"]); // Mustermann\n</code></pre>"},{"location":"js/objekte/object/#eigenschaften-andern","title":"\u270f\ufe0f Eigenschaften \u00e4ndern","text":"<pre><code>person.alter = 31;\n</code></pre>"},{"location":"js/objekte/object/#eigenschaften-loschen","title":"\u274c Eigenschaften l\u00f6schen","text":"<pre><code>delete person.istAktiv;\n</code></pre>"},{"location":"js/objekte/object/#methoden-funktionen-im-objekt","title":"\u2699\ufe0f Methoden \u2013 Funktionen im Objekt","text":"<pre><code>const auto = {\n  marke: \"BMW\",\n  starten: function() {\n    console.log(\"Motor gestartet!\");\n  }\n};\n\nauto.starten(); // Motor gestartet!\n</code></pre> <p>\ud83d\udca1 Modernere Schreibweise:</p> <pre><code>const auto = {\n  marke: \"BMW\",\n  starten() {\n    console.log(\"Motor gestartet!\");\n  }\n};\n</code></pre>"},{"location":"js/objekte/object/#schleifen-uber-objekte","title":"\ud83d\udd01 Schleifen \u00fcber Objekte","text":"<pre><code>for (let schl\u00fcssel in person) {\n  console.log(`${schl\u00fcssel}: ${person[schl\u00fcssel]}`);\n}\n</code></pre>"},{"location":"js/objekte/object/#das-this-schlusselwort","title":"\ud83e\udde0 Das <code>this</code>-Schl\u00fcsselwort","text":"<pre><code>const benutzer = {\n  name: \"Anna\",\n  begruessung() {\n    console.log(`Hallo, ich bin ${this.name}`);\n  }\n};\n\nbenutzer.begruessung(); // Hallo, ich bin Anna\n</code></pre> <p><code>this</code> verweist innerhalb eines Objekts auf das Objekt selbst.</p>"},{"location":"js/objekte/object/#objekt-in-objekt-verschachtelt","title":"\ud83d\udce6 Objekt in Objekt (verschachtelt)","text":"<pre><code>const firma = {\n  name: \"WebTech GmbH\",\n  adresse: {\n    stadt: \"M\u00fcnchen\",\n    plz: \"80331\"\n  }\n};\n\nconsole.log(firma.adresse.stadt); // M\u00fcnchen\n</code></pre>"},{"location":"js/objekte/object/#nutzliche-methoden","title":"\ud83d\udee0 N\u00fctzliche Methoden","text":"Methode Beschreibung <code>Object.keys(obj)</code> Gibt alle Schl\u00fcssel als Array zur\u00fcck <code>Object.values(obj)</code> Gibt alle Werte zur\u00fcck <code>Object.entries(obj)</code> Gibt <code>[key, value]</code> Paare zur\u00fcck <code>Object.hasOwnProperty(\"key\")</code> Pr\u00fcft, ob Eigenschaft existiert"},{"location":"js/objekte/object/#mini-beispiel","title":"\ud83e\uddea Mini-Beispiel","text":"<pre><code>const buch = {\n  titel: \"JavaScript Basics\",\n  autor: \"F. Fenzl\",\n  lesen() {\n    return `Du liest gerade \"${this.titel}\" von ${this.autor}.`;\n  }\n};\n\nconsole.log(buch.lesen());\n// \u2192 Du liest gerade \"JavaScript Basics\" von F. Fenzl.\n</code></pre>"},{"location":"js/objekte/object/#objekte-vs-arrays","title":"\ud83e\uddf0 Objekte vs. Arrays","text":"Typ Beschreibung Objekt Daten mit Namen (Schl\u00fcssel) Array Daten mit Position (Index) <pre><code>const person = { name: \"Tom\", alter: 25 };\nconst hobbies = [\"Lesen\", \"Reisen\", \"Coden\"];\n</code></pre>"},{"location":"machine_learning/einf%C3%BChrung/","title":"Umfassende Arbeiten im Gange","text":""},{"location":"python/datentypen/","title":"\ud83d\udce6 Python \u2013 Alle Datentypen im \u00dcberblick","text":"<p>Python ist dynamisch typisiert, das hei\u00dft: Du musst den Datentyp nicht angeben \u2013 Python erkennt ihn automatisch. Trotzdem ist es wichtig, alle Typen und ihre Eigenschaften zu kennen.</p>"},{"location":"python/datentypen/#1-zahlentypen-numeric-types","title":"\ud83d\udd22 1. Zahlentypen (Numeric Types)","text":""},{"location":"python/datentypen/#int-ganzzahlen","title":"\ud83e\uddee <code>int</code> \u2013 Ganzzahlen","text":"<pre><code>a = 42\nb = -7\n</code></pre> <ul> <li>Unbegrenzt gro\u00df</li> <li>Kein Dezimalpunkt</li> </ul>"},{"location":"python/datentypen/#float-gleitkommazahlen","title":"\ud83d\udcd0 <code>float</code> \u2013 Gleitkommazahlen","text":"<pre><code>pi = 3.1415\n</code></pre> <ul> <li>Enth\u00e4lt Dezimalpunkt</li> <li>Genauigkeit kann begrenzt sein</li> </ul>"},{"location":"python/datentypen/#complex-komplexe-zahlen","title":"\ud83d\udd0d <code>complex</code> \u2013 Komplexe Zahlen","text":"<pre><code>z = 2 + 3j\n</code></pre> <ul> <li>Mathematische komplexe Zahlen mit <code>j</code> (nicht <code>i</code>)</li> <li>Teile: <code>.real</code> und <code>.imag</code></li> </ul>"},{"location":"python/datentypen/#2-texttyp","title":"\ud83d\udd24 2. Texttyp","text":""},{"location":"python/datentypen/#str-zeichenketten-strings","title":"\ud83d\udcdd <code>str</code> \u2013 Zeichenketten (Strings)","text":"<pre><code>text = \"Hallo Welt\"\n</code></pre> <ul> <li>In <code>'</code> oder <code>\"</code> oder <code>\"\"\"</code> (mehrzeilig)</li> <li>Unver\u00e4nderlich (immutable)</li> </ul>"},{"location":"python/datentypen/#3-boolescher-typ","title":"\u2705 3. Boolescher Typ","text":""},{"location":"python/datentypen/#bool","title":"\ud83d\udd18 <code>bool</code>","text":"<pre><code>wahr = True\nfalsch = False\n</code></pre> <ul> <li>Ergebnis von Vergleichen (<code>==</code>, <code>!=</code>, etc.)</li> <li>Intern <code>True == 1</code>, <code>False == 0</code></li> </ul>"},{"location":"python/datentypen/#4-sequenzen-geordnete-sammlungen","title":"\ud83d\udcda 4. Sequenzen (geordnete Sammlungen)","text":""},{"location":"python/datentypen/#list-liste","title":"\ud83d\udce6 <code>list</code> \u2013 Liste","text":"<pre><code>zahlen = [1, 2, 3]\n</code></pre> <ul> <li>Ver\u00e4ndertbar (mutable)</li> <li>Elemente beliebiger Typen</li> <li>Methoden: <code>.append()</code>, <code>.remove()</code>, <code>.sort()</code>, etc.</li> </ul>"},{"location":"python/datentypen/#tuple-tupel","title":"\ud83e\uddf1 <code>tuple</code> \u2013 Tupel","text":"<pre><code>koordinaten = (10, 20)\n</code></pre> <ul> <li>Unver\u00e4nderlich (immutable)</li> <li>N\u00fctzlich f\u00fcr feste Datengruppen</li> <li>Auch als R\u00fcckgabewert mehrerer Elemente</li> </ul>"},{"location":"python/datentypen/#range-zahlenbereich","title":"\ud83c\udd94 <code>range</code> \u2013 Zahlenbereich","text":"<pre><code>r = range(5)  # 0 bis 4\n</code></pre> <ul> <li>Speicherfreundlich</li> <li>H\u00e4ufig in Schleifen</li> </ul>"},{"location":"python/datentypen/#str-zeichenkette","title":"\ud83e\uddf5 <code>str</code> \u2013 Zeichenkette","text":"<p>Bereits oben erw\u00e4hnt \u2013 geh\u00f6rt ebenfalls zu den Sequenzen!</p>"},{"location":"python/datentypen/#5-mapping","title":"\ud83d\udd11 5. Mapping","text":""},{"location":"python/datentypen/#dict-worterbuch","title":"\ud83e\udded <code>dict</code> \u2013 W\u00f6rterbuch","text":"<pre><code>person = {\"name\": \"Anna\", \"alter\": 30}\n</code></pre> <ul> <li>Schl\u00fcssel\u2013Wert-Paare</li> <li>Schl\u00fcssel: einzigartig, meist <code>str</code> oder <code>int</code></li> <li>Methoden: <code>.get()</code>, <code>.keys()</code>, <code>.values()</code></li> </ul>"},{"location":"python/datentypen/#6-mengen","title":"\ud83d\udccc 6. Mengen","text":""},{"location":"python/datentypen/#set-menge","title":"\ud83c\udfaf <code>set</code> \u2013 Menge","text":"<pre><code>farben = {\"rot\", \"blau\", \"gr\u00fcn\"}\n</code></pre> <ul> <li>Keine Duplikate</li> <li>Ungeordnet</li> <li>Methoden: <code>.add()</code>, <code>.remove()</code>, Mengenoperationen</li> </ul>"},{"location":"python/datentypen/#frozenset-unveranderliche-menge","title":"\ud83e\uddea <code>frozenset</code> \u2013 Unver\u00e4nderliche Menge","text":"<pre><code>f = frozenset([1, 2, 3])\n</code></pre> <ul> <li>Wie <code>set</code>, aber immutable</li> </ul>"},{"location":"python/datentypen/#7-binartypen","title":"\ud83e\udde9 7. Bin\u00e4rtypen","text":""},{"location":"python/datentypen/#bytes-byte-sequenz-unveranderlich","title":"\ud83d\udce6 <code>bytes</code> \u2013 Byte-Sequenz (unver\u00e4nderlich)","text":"<pre><code>daten = b\"Hallo\"\n</code></pre>"},{"location":"python/datentypen/#bytearray-verandertbare-byte-sequenz","title":"\ud83d\udd27 <code>bytearray</code> \u2013 Ver\u00e4ndertbare Byte-Sequenz","text":"<pre><code>daten = bytearray([65, 66, 67])\n</code></pre>"},{"location":"python/datentypen/#memoryview-speicheransicht","title":"\ud83d\udd0d <code>memoryview</code> \u2013 Speicheransicht","text":"<pre><code>mv = memoryview(b\"abc\")\n</code></pre> <ul> <li>Zugriff auf Pufferdaten (z.\u202fB. f\u00fcr gro\u00dfe Bin\u00e4rdateien)</li> </ul>"},{"location":"python/datentypen/#8-nonetype","title":"\ud83d\udeab 8. <code>NoneType</code>","text":""},{"location":"python/datentypen/#none","title":"\ud83c\udd7e\ufe0f <code>None</code>","text":"<pre><code>nichts = None\n</code></pre> <ul> <li>Bedeutet: Kein Wert vorhanden</li> <li>Wird oft als R\u00fcckgabewert verwendet, wenn Funktion nichts zur\u00fcckgibt</li> </ul>"},{"location":"python/datentypen/#9-typenprufung","title":"\ud83d\udcca 9. Typenpr\u00fcfung","text":"<pre><code>type(x)         # Gibt den Typ zur\u00fcck\nisinstance(x, list)  # Pr\u00fcft, ob x eine Liste ist\n</code></pre>"},{"location":"python/datentypen/#zusammenfassung-kurzform","title":"\ud83e\udde0 Zusammenfassung (Kurzform)","text":"Typ Beschreibung <code>int</code> Ganze Zahl <code>float</code> Gleitkommazahl <code>complex</code> Komplexe Zahl <code>str</code> Zeichenkette <code>bool</code> Wahr/Falsch <code>list</code> Ver\u00e4nderliste <code>tuple</code> Unver\u00e4nderliste <code>range</code> Bereich von Zahlen <code>dict</code> Schl\u00fcssel\u2013Wert-Paare <code>set</code> Menge ohne Duplikate <code>frozenset</code> Unver\u00e4nderliche Menge <code>bytes</code> Unver\u00e4nderlicher Bin\u00e4rtyp <code>bytearray</code> Ver\u00e4nderl. Bin\u00e4rtyp <code>memoryview</code> Speicherzugriff auf Byte-Daten <code>NoneType</code> Repr\u00e4sentiert \"kein Wert\" (<code>None</code>)"},{"location":"python/datentypen/#tipp","title":"\ud83d\udcda Tipp","text":"<p>Verwende die Funktion <code>type()</code> zur schnellen Typpr\u00fcfung:</p> <pre><code>print(type(\"Test\"))  # &lt;class 'str'&gt;\n</code></pre>"},{"location":"python/einf%C3%BChrung/","title":"\ud83d\udc0d Python \u2013 Einf\u00fchrung in die Programmiersprache","text":"<p>Python ist eine moderne, universell einsetzbare und einfach zu erlernende Programmiersprache. Sie wurde 1991 von Guido van Rossum entwickelt \u2013 mit dem Ziel, lesbaren, klaren und eleganten Code zu schreiben.</p> <p>Heute geh\u00f6rt Python zu den beliebtesten Programmiersprachen der Welt \u2013 sowohl f\u00fcr Einsteiger als auch f\u00fcr Profis.</p>"},{"location":"python/einf%C3%BChrung/#warum-python","title":"\ud83e\udde0 Warum Python?","text":"Vorteil Bedeutung \ud83e\uddfe Lesbarkeit Klarer, fast \u201enat\u00fcrlichsprachlicher\u201c Code \ud83e\uddf0 Einsteigerfreundlich Leicht zu lernen, ideal f\u00fcr den Einstieg \ud83e\udde9 Vielseitig Web, Data Science, Machine Learning, Automatisierung, Games \ud83d\udd0d Gro\u00dfe Community Millionen Nutzer, viele Ressourcen, Bibliotheken und Tools \ud83d\udd0c Plattformunabh\u00e4ngig L\u00e4uft auf Windows, Mac, Linux, Raspberry Pi \u267b\ufe0f Dynamisch typisiert Variablen brauchen keinen fixen Datentyp \ud83d\udc0d Interpreterbasiert Kein Kompilieren n\u00f6tig \u2013 direktes Ausf\u00fchren"},{"location":"python/einf%C3%BChrung/#wofur-wird-python-verwendet","title":"\ud83d\ude80 Wof\u00fcr wird Python verwendet?","text":"<ul> <li>\ud83d\udca1 Einf\u00fchrung ins Programmieren</li> <li>\ud83d\udcca Datenanalyse &amp; Visualisierung (Pandas, Matplotlib)</li> <li>\ud83e\udd16 Machine Learning &amp; KI (TensorFlow, Scikit-Learn, PyTorch)</li> <li>\ud83c\udf10 Webentwicklung (Django, Flask)</li> <li>\ud83e\uddea Automatisierung &amp; Scripting (z.\u202fB. Dateiumbenennung, Web Scraping)</li> <li>\ud83d\udc1e Testing &amp; DevOps (Unit-Tests, CI/CD)</li> <li>\ud83d\udce6 APIs &amp; Microservices</li> <li>\ud83d\udd0d Cybersecurity &amp; Pentesting (z.\u202fB. mit Nmap, Scapy)</li> </ul>"},{"location":"python/einf%C3%BChrung/#erste-schritte-dein-erstes-python-programm","title":"\ud83e\uddfe Erste Schritte \u2013 Dein erstes Python-Programm","text":"<pre><code>print(\"Hallo Welt!\")\n</code></pre> <p>\u27a1\ufe0f Gibt den Text in der Konsole aus.</p>"},{"location":"python/einf%C3%BChrung/#installation-ausfuhren","title":"\ud83d\udd27 Installation &amp; Ausf\u00fchren","text":""},{"location":"python/einf%C3%BChrung/#installation","title":"Installation:","text":"<ol> <li>Python downloaden von: https://www.python.org</li> <li>Bei Installation H\u00e4kchen setzen: <code>Add Python to PATH</code></li> <li>Optional: Code-Editor wie VS Code, PyCharm, Thonny verwenden</li> </ol>"},{"location":"python/einf%C3%BChrung/#ausfuhren","title":"Ausf\u00fchren:","text":"<ul> <li> <p>In der Konsole: <pre><code>python mein_script.py\n</code></pre></p> </li> <li> <p>Im Editor: \u201eAusf\u00fchren\u201c-Button oder Shortcut (meist <code>F5</code> oder <code>Strg+Enter</code>)</p> </li> </ul>"},{"location":"python/einf%C3%BChrung/#grundkonzepte-von-python","title":"\ud83d\udcda Grundkonzepte von Python","text":""},{"location":"python/einf%C3%BChrung/#1-variablen-datentypen","title":"\ud83d\udd39 1. Variablen &amp; Datentypen","text":"<pre><code>name = \"Florian\"    # String\nalter = 30          # Integer\npi = 3.1415         # Float\naktiv = True        # Boolean\n</code></pre>"},{"location":"python/einf%C3%BChrung/#2-bedingungen","title":"\ud83d\udd39 2. Bedingungen","text":"<pre><code>if alter &gt;= 18:\n    print(\"Vollj\u00e4hrig\")\nelse:\n    print(\"Minderj\u00e4hrig\")\n</code></pre>"},{"location":"python/einf%C3%BChrung/#3-schleifen","title":"\ud83d\udd39 3. Schleifen","text":"<pre><code>for i in range(5):\n    print(i)\n</code></pre>"},{"location":"python/einf%C3%BChrung/#4-funktionen","title":"\ud83d\udd39 4. Funktionen","text":"<pre><code>def begruessung(name):\n    print(f\"Hallo {name}!\")\n\nbegruessung(\"Anna\")\n</code></pre>"},{"location":"python/einf%C3%BChrung/#5-listen","title":"\ud83d\udd39 5. Listen","text":"<pre><code>zahlen = [1, 2, 3]\nprint(zahlen[0])  # \u2192 1\n</code></pre>"},{"location":"python/einf%C3%BChrung/#besondere-merkmale","title":"\ud83d\udd0d Besondere Merkmale","text":"<ul> <li>Einr\u00fcckung (Indentation) ist Pflicht: Struktur statt Klammern</li> <li>Duck Typing: Nicht der Typ z\u00e4hlt, sondern das Verhalten</li> <li>Gro\u00dfe Standardbibliothek: <code>math</code>, <code>os</code>, <code>re</code>, <code>datetime</code>, <code>random</code> u.\u202fv.\u202fm.</li> </ul>"},{"location":"python/einf%C3%BChrung/#pakete-installieren-mit-pip","title":"\ud83d\udce6 Pakete installieren (mit <code>pip</code>)","text":"<pre><code>pip install requests\n</code></pre> <p>\u27a1\ufe0f Installiert externe Bibliotheken (wie <code>requests</code>, <code>flask</code>, <code>pandas</code>, etc.)</p>"},{"location":"python/einf%C3%BChrung/#fun-fact","title":"\ud83d\udca1 Fun Fact","text":"<p>Der Name \u201ePython\u201c stammt nicht von der Schlange, sondern von der britischen Comedy-Gruppe Monty Python \ud83c\udfad</p>"},{"location":"python/einf%C3%BChrung/#fazit","title":"\ud83d\udcd8 Fazit","text":"<p>Python ist:</p> <p>\u2705 leicht zu lernen \u2705 m\u00e4chtig in der Anwendung \u2705 perfekt f\u00fcr Prototyping, AI, Web und vieles mehr</p> <p>Wenn du nur eine Sprache lernen willst \u2013 Python ist ein ausgezeichneter Startpunkt.</p>"},{"location":"python/einf%C3%BChrung/#nutzliche-links","title":"\ud83d\udcda N\u00fctzliche Links","text":"<ul> <li>Python.org \u2013 offizielle Seite</li> <li>W3Schools Python-Tutorial</li> <li>RealPython</li> <li>PyPI \u2013 Python Package Index</li> </ul>"},{"location":"python/global/","title":"\ud83c\udf0d Python \u2013 <code>global</code> Statement","text":"<p>Mit dem <code>global</code>-Statement kannst du innerhalb einer Funktion auf eine globale Variable zugreifen und sie ver\u00e4ndern.</p>"},{"location":"python/global/#was-ist-eine-globale-variable","title":"\ud83e\udde9 Was ist eine globale Variable?","text":"<p>Variablen, die au\u00dferhalb von Funktionen definiert sind, nennt man global:</p> <pre><code>z\u00e4hler = 0  # globale Variable\n</code></pre> <p>Standardm\u00e4\u00dfig kann man innerhalb einer Funktion lesen, aber nicht schreiben, ohne <code>global</code> zu verwenden.</p>"},{"location":"python/global/#ohne-global-fehlverhalten","title":"\u26a0\ufe0f Ohne <code>global</code> \u2013 Fehlverhalten","text":"<pre><code>x = 10\n\ndef setze_wert():\n    x = 5  # erstellt eine neue lokale Variable x!\n\nsetze_wert()\nprint(x)  # \u2192 10 (nicht ver\u00e4ndert!)\n</code></pre> <ul> <li>In diesem Beispiel wird <code>x</code> lokal \u00fcberschrieben, nicht global ver\u00e4ndert.</li> </ul>"},{"location":"python/global/#mit-global-richtige-veranderung","title":"\u2705 Mit <code>global</code> \u2013 richtige Ver\u00e4nderung","text":"<pre><code>x = 10\n\ndef setze_wert():\n    global x\n    x = 5  # ver\u00e4ndert die globale Variable\n\nsetze_wert()\nprint(x)  # \u2192 5\n</code></pre>"},{"location":"python/global/#regeln","title":"\ud83e\udde0 Regeln","text":"<ul> <li><code>global</code> muss innerhalb der Funktion deklariert werden</li> <li>Es betrifft nur Variablen mit genau diesem Namen</li> <li><code>global</code> sollte sparsam verwendet werden (kann Code schwerer verst\u00e4ndlich machen)</li> </ul>"},{"location":"python/global/#beispiel-globaler-zahler","title":"\ud83d\udcda Beispiel: globaler Z\u00e4hler","text":"<pre><code>z\u00e4hler = 0\n\ndef inkrementieren():\n    global z\u00e4hler\n    z\u00e4hler += 1\n\ninkrementieren()\ninkrementieren()\nprint(z\u00e4hler)  # \u2192 2\n</code></pre>"},{"location":"python/global/#zusammenfassung","title":"\u2705 Zusammenfassung","text":"Verhalten Wirkung Ohne <code>global</code> erstellt eine neue lokale Variable Mit <code>global</code> greift auf globale Variable zu Empfehlung Nur verwenden, wenn es wirklich n\u00f6tig ist"},{"location":"python/kommentare/","title":"\ud83d\udcac Python \u2013 Kommentare","text":"<p>Kommentare dienen dazu, Code verst\u00e4ndlicher zu machen. Sie werden vom Python-Interpreter ignoriert und beeinflussen die Programmlogik nicht.</p>"},{"location":"python/kommentare/#einzeilige-kommentare","title":"\ud83e\udde9 Einzeilige Kommentare","text":"<p>Beginnen mit dem Hash-Zeichen <code>#</code> \u2013 alles dahinter auf der gleichen Zeile ist ein Kommentar.</p> <pre><code># Das ist ein Kommentar\nx = 42  # Kommentar am Zeilenende\n</code></pre> <p>\u2705 Gut f\u00fcr kurze Hinweise oder Dokumentation direkt neben dem Code.</p>"},{"location":"python/kommentare/#mehrzeilige-kommentare-dokstrings","title":"\ud83e\udde9 Mehrzeilige Kommentare (Dokstrings)","text":"<p>Python kennt formal keine echten mehrzeiligen Kommentare. Aber du kannst daf\u00fcr mehrzeilige Strings (<code>\"\"\" \"\"\"</code> oder <code>''' '''</code>) verwenden. Diese werden zwar technisch als String behandelt, aber wenn sie nicht zugewiesen oder nicht als Docstring verwendet werden, ignoriert sie der Interpreter.</p> <pre><code>\"\"\"\nDas ist ein mehrzeiliger\nKommentar-\u00e4hnlicher Block.\nEr wird ignoriert, wenn er nicht benutzt wird.\n\"\"\"\n</code></pre> <p>Alternativ:</p> <pre><code>'''\nMehrzeiliger\n\"Kommentar\"\nmit einfachen Hochkommas\n'''\n</code></pre>"},{"location":"python/kommentare/#docstrings-dokumentationsstrings","title":"\ud83e\udde0 Docstrings (Dokumentationsstrings)","text":"<p>Wenn du einen solchen mehrzeiligen String direkt nach einer Funktion, Klasse oder einem Modul platzierst, wird er als Dokumentation erkannt:</p> <pre><code>def hallo():\n    \"\"\"Gibt eine Begr\u00fc\u00dfung aus.\"\"\"\n    print(\"Hallo Welt\")\n</code></pre> <p>Du kannst diesen sp\u00e4ter \u00fcber <code>help(hallo)</code> abrufen.</p>"},{"location":"python/kommentare/#zusammenfassung","title":"\ud83d\udd0d Zusammenfassung","text":"Art Syntax Zweck Einzeilig <code># Kommentartext</code> Notizen, Erkl\u00e4rungen Mehrzeilig <code>''' Kommentar '''</code> oder <code>\"\"\"</code> Blockkommentare (inoffiziell) Docstring Direkt nach <code>def</code>, <code>class</code>, <code>module</code> Dokumentation abrufbar mit <code>help()</code>"},{"location":"python/kommentare/#best-practices","title":"\u2705 Best Practices","text":"<ul> <li>Nutze Einzeiler f\u00fcr kurze Hinweise.</li> <li>Verwende Docstrings f\u00fcr alle Funktionen, Klassen und Module.</li> <li>Halte Kommentare kurz, klar und aktuell.</li> </ul>"},{"location":"python/operatoren/","title":"\ud83d\udd27 Python \u2013 Alle Operatoren einfach erkl\u00e4rt","text":"<p>Operatoren sind Symbole, mit denen du in Python Berechnungen durchf\u00fchren, Werte vergleichen, logische Entscheidungen treffen und Daten verkn\u00fcpfen kannst.</p>"},{"location":"python/operatoren/#arithmetische-operatoren","title":"\u2795 Arithmetische Operatoren","text":"Operator Beschreibung Beispiel Ergebnis <code>+</code> Addition <code>3 + 2</code> <code>5</code> <code>-</code> Subtraktion <code>5 - 1</code> <code>4</code> <code>*</code> Multiplikation <code>4 * 3</code> <code>12</code> <code>/</code> Division (float) <code>10 / 2</code> <code>5.0</code> <code>//</code> Ganzzahldivision <code>10 // 3</code> <code>3</code> <code>%</code> Modulo (Rest) <code>10 % 3</code> <code>1</code> <code>**</code> Potenzierung <code>2 ** 3</code> <code>8</code>"},{"location":"python/operatoren/#vergleichsoperatoren-vergleichen-werte","title":"\ud83d\udccf Vergleichsoperatoren (Vergleichen Werte)","text":"Operator Beschreibung Beispiel Ergebnis <code>==</code> Gleich <code>3 == 3</code> <code>True</code> <code>!=</code> Ungleich <code>3 != 4</code> <code>True</code> <code>&gt;</code> Gr\u00f6\u00dfer <code>5 &gt; 2</code> <code>True</code> <code>&lt;</code> Kleiner <code>1 &lt; 3</code> <code>True</code> <code>&gt;=</code> Gr\u00f6\u00dfer oder gleich <code>4 &gt;= 4</code> <code>True</code> <code>&lt;=</code> Kleiner oder gleich <code>2 &lt;= 5</code> <code>True</code>"},{"location":"python/operatoren/#logische-operatoren-bedingungen-verknupfen","title":"\ud83d\udd17 Logische Operatoren (Bedingungen verkn\u00fcpfen)","text":"Operator Beschreibung Beispiel Ergebnis <code>and</code> UND \u2013 beide m\u00fcssen wahr <code>True and False</code> <code>False</code> <code>or</code> ODER \u2013 eins reicht <code>True or False</code> <code>True</code> <code>not</code> NICHT \u2013 kehrt um <code>not True</code> <code>False</code>"},{"location":"python/operatoren/#zuweisungsoperatoren","title":"\ud83e\uddee Zuweisungsoperatoren","text":"Operator Bedeutung Beispiel Wirkung <code>=</code> Zuweisung <code>x = 10</code> Weist 10 zu <code>+=</code> Addieren &amp; zuweisen <code>x += 2</code> <code>x = x + 2</code> <code>-=</code> Subtrahieren &amp; zuweisen <code>x -= 1</code> <code>x = x - 1</code> <code>*=</code> Multiplizieren &amp; zuweisen <code>x *= 3</code> <code>x = x * 3</code> <code>/=</code> Dividieren &amp; zuweisen <code>x /= 2</code> <code>x = x / 2</code> <code>//=</code> Ganzzahldivision <code>x //= 2</code> <code>x = x // 2</code> <code>%=</code> Modulo <code>x %= 3</code> <code>x = x % 3</code> <code>**=</code> Potenzieren <code>x **= 2</code> <code>x = x ** 2</code>"},{"location":"python/operatoren/#zeichenketten-operatoren","title":"\ud83e\uddf5 Zeichenketten-Operatoren","text":"Operator Beschreibung Beispiel Ergebnis <code>+</code> Verkn\u00fcpfen <code>\"Hallo \" + \"Welt\"</code> <code>\"Hallo Welt\"</code> <code>*</code> Wiederholen <code>\"A\" * 3</code> <code>\"AAA\"</code>"},{"location":"python/operatoren/#identitatsoperatoren","title":"\ud83d\udd0d Identit\u00e4tsoperatoren","text":"Operator Beschreibung Beispiel Ergebnis <code>is</code> Ob zwei Namen dasselbe Objekt zeigen <code>a is b</code> <code>True/False</code> <code>is not</code> Gegenteil <code>a is not b</code> <code>True/False</code> <pre><code>a = [1, 2]\nb = a\nc = [1, 2]\na is b      # True (gleiche Referenz)\na is c      # False (andere Objekte mit gleichem Inhalt)\n</code></pre>"},{"location":"python/operatoren/#mitgliedsoperatoren","title":"\ud83d\udccc Mitgliedsoperatoren","text":"Operator Beschreibung Beispiel Ergebnis <code>in</code> Ist Element enthalten? <code>\"a\" in \"abc\"</code> <code>True</code> <code>not in</code> Ist Element NICHT enthalten? <code>\"x\" not in \"abc\"</code> <code>True</code>"},{"location":"python/operatoren/#ternarer-operator-konditional","title":"\u2753 Tern\u00e4rer Operator (Konditional)","text":"<pre><code>x = 18\nstatus = \"vollj\u00e4hrig\" if x &gt;= 18 else \"minderj\u00e4hrig\"\n</code></pre> <ul> <li>Kompakte <code>if/else</code>-Alternative</li> </ul>"},{"location":"python/operatoren/#bitweise-operatoren-fur-integer-auf-binarebene","title":"\ud83e\udde0 Bitweise Operatoren (f\u00fcr Integer, auf Bin\u00e4rebene)","text":"Operator Beschreibung Beispiel Ergebnis <code>&amp;</code> Bitweises UND <code>5 &amp; 3</code> \u2192 1 <code>0b101 &amp; 0b011</code> <code>|</code> Bitweises ODER <code>5 | 3</code> \u2192 7 <code>0b111</code> <code>^</code> Exklusives ODER <code>5 ^ 3</code> \u2192 6 <code>0b110</code> <code>~</code> Bitweises NICHT <code>~5</code> \u2192 -6 <code>&lt;&lt;</code> Linksverschiebung <code>5 &lt;&lt; 1</code> \u2192 10 <code>&gt;&gt;</code> Rechtsverschiebung <code>5 &gt;&gt; 1</code> \u2192 2"},{"location":"python/operatoren/#typprufung-mit-type-isinstance","title":"\ud83e\uddea Typpr\u00fcfung mit <code>type()</code> &amp; <code>isinstance()</code>","text":"<pre><code>type(5) == int\nisinstance(\"Hallo\", str)\n</code></pre>"},{"location":"python/operatoren/#zusammenfassung-nach-gruppen","title":"\u2705 Zusammenfassung nach Gruppen","text":"Kategorie Beispiele Arithmetisch <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>//</code>, <code>%</code>, <code>**</code> Vergleich <code>==</code>, <code>!=</code>, <code>&gt;</code>, <code>&lt;</code>, <code>&gt;=</code>, <code>&lt;=</code> Logisch <code>and</code>, <code>or</code>, <code>not</code> Zuweisung <code>=</code>, <code>+=</code>, <code>*=</code>, etc. Identit\u00e4t <code>is</code>, <code>is not</code> Mitgliedschaft <code>in</code>, <code>not in</code> Tern\u00e4r <code>x if cond else y</code> Bitweise <code>&amp;</code>, <code>|</code>, <code>^</code>, <code>~</code>, <code>&lt;&lt;</code>, <code>&gt;&gt;</code>"},{"location":"python/operatoren/#tipp","title":"\ud83d\udcd8 Tipp","text":"<p>Nutze <code>help(operator)</code> oder das <code>operator</code>-Modul f\u00fcr noch mehr Kontrolle und Funktionalit\u00e4t, besonders bei benutzerdefinierten Objekten.</p>"},{"location":"python/syntax/","title":"\ud83e\uddfe Python \u2013 Syntax\u00fcbersicht","text":"<p>Eine kompakte Referenz zu den wichtigsten Regeln und Strukturen der Python-Sprache.</p>"},{"location":"python/syntax/#grundlegende-syntaxregeln","title":"\ud83d\udccc Grundlegende Syntaxregeln","text":"<ul> <li>Einr\u00fcckung statt geschweifte Klammern <code>{}</code> zur Strukturierung von Codebl\u00f6cken  </li> <li>Keine Semikolons am Zeilenende notwendig  </li> <li>Gro\u00df- und Kleinschreibung wichtig (<code>Name</code> \u2260 <code>name</code>)  </li> <li>Kommentare beginnen mit <code>#</code> </li> <li>Bl\u00f6cke (z.\u202fB. Schleifen, Bedingungen, Funktionen) enden nicht mit <code>end</code> o.\u202f\u00e4.</li> </ul>"},{"location":"python/syntax/#kommentare","title":"\ud83d\udd24 Kommentare","text":"<pre><code># Einzeiliger Kommentar\n\n\"\"\"\nMehrzeiliger\nKommentar oder\nDokstring\n\"\"\"\n</code></pre>"},{"location":"python/syntax/#einruckung","title":"\ud83d\udccf Einr\u00fcckung","text":"<pre><code>if True:\n    print(\"Einr\u00fcckung: 4 Leerzeichen empfohlen\")\n</code></pre>"},{"location":"python/syntax/#anweisungen","title":"\ud83d\udfe2 Anweisungen","text":"<ul> <li>Eine Anweisung pro Zeile</li> </ul> <pre><code>a = 1\nb = 2\n</code></pre> <ul> <li>Mehrere Anweisungen in einer Zeile (nicht empfohlen)</li> </ul> <pre><code>a = 1; b = 2\n</code></pre>"},{"location":"python/syntax/#blocke-mit-doppelpunkt","title":"\ud83d\udce6 Bl\u00f6cke mit Doppelpunkt <code>:</code>","text":"<pre><code>if x &gt; 0:\n    print(\"Positiv\")\n</code></pre> <p>Gilt f\u00fcr:</p> <ul> <li><code>if</code>, <code>elif</code>, <code>else</code></li> <li><code>for</code>, <code>while</code></li> <li><code>def</code>, <code>class</code></li> <li><code>try</code>, <code>except</code>, <code>finally</code>, <code>with</code></li> </ul>"},{"location":"python/syntax/#funktionsdefinition","title":"\ud83d\udd27 Funktionsdefinition","text":"<pre><code>def funktion_name(parameter):\n    pass\n</code></pre>"},{"location":"python/syntax/#klassendefinition","title":"\ud83e\uddf1 Klassendefinition","text":"<pre><code>class KlassenName:\n    pass\n</code></pre>"},{"location":"python/syntax/#zuweisung","title":"\ud83e\uddee Zuweisung","text":"<pre><code>a = 5\nb, c = 1, 2\nx = y = z = 0\n</code></pre>"},{"location":"python/syntax/#import-von-modulen","title":"\ud83d\udcda Import von Modulen","text":"<pre><code>import math\nfrom math import pi\nimport os as betriebssystem\n</code></pre>"},{"location":"python/syntax/#built-in-datentypen-nur-syntax","title":"\ud83d\udce6 Built-in Datentypen (nur Syntax)","text":"<pre><code>zahl = 5              # int\nkommazahl = 5.3       # float\ntext = \"Hallo\"        # str\nwahr = True           # bool\nliste = [1, 2, 3]     # list\ntupel = (1, 2)        # tuple\nmenge = {1, 2, 3}     # set\nmapping = {\"a\": 1}    # dict\n</code></pre>"},{"location":"python/syntax/#operatoren-nur-syntax","title":"\u2795 Operatoren (nur Syntax)","text":"<pre><code>a + b    # Addition\na - b    # Subtraktion\na * b    # Multiplikation\na / b    # Division\na ** b   # Potenz\na // b   # Ganzzahldivision\na % b    # Modulo\n</code></pre>"},{"location":"python/syntax/#schleifen","title":"\ud83d\udd01 Schleifen","text":"<pre><code>for i in range(5):\n    pass\n\nwhile bedingung:\n    pass\n</code></pre>"},{"location":"python/syntax/#bedingungen","title":"\u2753 Bedingungen","text":"<pre><code>if x &gt; 0:\n    pass\nelif x == 0:\n    pass\nelse:\n    pass\n</code></pre>"},{"location":"python/syntax/#return-break-continue-pass","title":"\ud83d\udd19 return, break, continue, pass","text":"<pre><code>return wert\nbreak\ncontinue\npass\n</code></pre>"},{"location":"python/syntax/#logische-operatoren","title":"\ud83d\udd17 Logische Operatoren","text":"<pre><code>and, or, not\n</code></pre>"},{"location":"python/syntax/#ternarer-ausdruck","title":"\u2753 Tern\u00e4rer Ausdruck","text":"<pre><code>status = \"OK\" if x &gt; 0 else \"Fehler\"\n</code></pre>"},{"location":"python/syntax/#weitere-syntaxelemente","title":"\ud83d\udcd8 Weitere Syntaxelemente","text":"<pre><code>with open(\"datei.txt\") as f:\n    daten = f.read()\n\ntry:\n    # etwas riskantes\nexcept Exception as e:\n    # Fehlerbehandlung\nfinally:\n    # optional\n</code></pre>"},{"location":"python/syntax/#hinweis","title":"\ud83e\udde0 Hinweis","text":"<p>Python folgt dem Prinzip:  </p> <p>\u201eThere should be one \u2014 and preferably only one \u2014 obvious way to do it.\u201c (Quelle: The Zen of Python)</p>"},{"location":"python/typing/","title":"\ud83e\uddfe Python Typing \u2013 Typhinweise und Typisierung","text":"<p>Ab Python 3.5 kannst du mit Type Hints den Datentyp von Variablen, Parametern und R\u00fcckgabewerten angeben. Python pr\u00fcft diese nicht zur Laufzeit, aber sie verbessern die Lesbarkeit und erm\u00f6glichen Tools wie mypy, Pyright oder VS Code pr\u00e4zisere Fehlermeldungen und Autovervollst\u00e4ndigung.</p>"},{"location":"python/typing/#einfache-typhinweise","title":"\ud83d\udd24 Einfache Typhinweise","text":"<pre><code>def begruessung(name: str) -&gt; str:\n    return \"Hallo \" + name\n</code></pre> <ul> <li><code>name: str</code> \u2192 Eingabe muss ein <code>str</code> sein</li> <li><code>-&gt; str</code> \u2192 R\u00fcckgabewert ist ein <code>str</code></li> </ul>"},{"location":"python/typing/#typen-fur-variablen","title":"\ud83d\udce6 Typen f\u00fcr Variablen","text":"<pre><code>x: int = 42\npi: float = 3.14\nist_aktiv: bool = True\ntext: str = \"Hallo\"\n</code></pre>"},{"location":"python/typing/#built-in-typen","title":"\ud83e\uddf1 Built-in Typen","text":"Typ Beschreibung <code>int</code> Ganze Zahl <code>float</code> Gleitkommazahl <code>bool</code> Wahr/Falsch <code>str</code> Zeichenkette <code>bytes</code> Byte-Daten"},{"location":"python/typing/#collection-typen","title":"\ud83d\udcda Collection-Typen","text":"<pre><code>from typing import List, Dict, Tuple, Set\n\nnamen: List[str] = [\"Anna\", \"Ben\"]\npunkte: Dict[str, int] = {\"Anna\": 5, \"Ben\": 7}\nkoordinaten: Tuple[int, int] = (10, 20)\nfarben: Set[str] = {\"rot\", \"blau\"}\n</code></pre>"},{"location":"python/typing/#optional-union","title":"\ud83d\udd04 Optional &amp; Union","text":"<pre><code>from typing import Optional, Union\n\ndef lade_benutzer(id: int) -&gt; Optional[str]:\n    if id == 1:\n        return \"Admin\"\n    return None\n\ndef parse_eingabe(e: Union[str, int]) -&gt; str:\n    return str(e)\n</code></pre> <ul> <li><code>Optional[str]</code> = <code>str</code> oder <code>None</code></li> <li><code>Union[A, B]</code> = entweder A oder B</li> </ul>"},{"location":"python/typing/#any-beliebiger-typ","title":"\ud83e\udde9 Any \u2013 \"beliebiger Typ\"","text":"<pre><code>from typing import Any\n\ndef debug(wert: Any) -&gt; None:\n    print(wert)\n</code></pre> <ul> <li>Kein Typ-Check durch Tools \u2013 universell</li> </ul>"},{"location":"python/typing/#callable-funktionen-typisieren","title":"\u2699\ufe0f Callable \u2013 Funktionen typisieren","text":"<pre><code>from typing import Callable\n\ndef verarbeite(callback: Callable[[str], int]) -&gt; int:\n    return callback(\"Test\")\n</code></pre> <ul> <li><code>[str]</code> = erwartet einen <code>str</code> als Eingabe</li> <li><code>int</code> = R\u00fcckgabewert der Funktion</li> </ul>"},{"location":"python/typing/#type-alias","title":"\ud83e\uddee Type Alias","text":"<pre><code>from typing import Tuple\n\nRGB = Tuple[int, int, int]\nfarbe: RGB = (255, 0, 0)\n</code></pre> <ul> <li>K\u00fcrzel f\u00fcr komplexe Typen</li> </ul>"},{"location":"python/typing/#typed-dict-strukturiertes-dictionary","title":"\ud83e\uddea Typed Dict (strukturiertes Dictionary)","text":"<pre><code>from typing import TypedDict\n\nclass Person(TypedDict):\n    name: str\n    alter: int\n\np: Person = {\"name\": \"Florian\", \"alter\": 32}\n</code></pre>"},{"location":"python/typing/#typisierung-mit-dataclasses","title":"\ud83e\uddf1 Typisierung mit <code>dataclasses</code>","text":"<pre><code>from dataclasses import dataclass\n\n@dataclass\nclass Produkt:\n    id: int\n    name: str\n    preis: float\n\nartikel = Produkt(1, \"Buch\", 9.99)\n</code></pre> <ul> <li>Automatisch erzeugter Konstruktor mit Typpr\u00fcfung</li> <li>Sehr gut geeignet f\u00fcr strukturierte Daten</li> </ul>"},{"location":"python/typing/#vorteile-von-typing","title":"\ud83e\udde0 Vorteile von Typing","text":"<ul> <li>Lesbarkeit: Du siehst sofort, was erwartet wird</li> <li>Wartbarkeit: Klare Vertr\u00e4ge zwischen Funktionen</li> <li>Tooling: Editor zeigt Fehler, bevor du startest</li> <li>Dokumentation: Weniger Kommentare n\u00f6tig</li> </ul>"},{"location":"python/typing/#nutzliche-typing-module","title":"\ud83d\udcda N\u00fctzliche Typing-Module","text":"Modul Beschreibung <code>typing</code> Standard-Typen (List, Union, Optional\u2026) <code>typing_extensions</code> Zus\u00e4tzliche Typen (z.\u202fB. <code>Literal</code>) <code>collections.abc</code> Neue Schreibweise: <code>list</code> statt <code>List</code> (ab 3.9)"},{"location":"python/typing/#modernere-schreibweise-ab-python-39","title":"\u2705 Modernere Schreibweise (ab Python 3.9+)","text":"<pre><code>def combine(texts: list[str]) -&gt; str:\n    return \", \".join(texts)\n</code></pre> <ul> <li>Keine <code>from typing import List</code> mehr n\u00f6tig</li> <li>Nutzt eingebaute Typnamen direkt</li> </ul>"},{"location":"python/typing/#fazit","title":"\ud83d\udcd8 Fazit","text":"<p>Python bleibt dynamisch, aber mit Type Hints bekommst du die Vorteile von statischer Typisierung \u2013 ohne Zwang. Sie sind optional, aber empfehlenswert, vor allem bei gro\u00dfen Projekten.</p>"},{"location":"python/variablen/","title":"\ud83e\uddfe Python \u2013 Variablen definieren und verwenden","text":"<p>Variablen sind Namen, die auf einen bestimmten Wert im Speicher zeigen. Sie dienen dazu, Informationen zu speichern und im Code weiterzuverwenden.</p>"},{"location":"python/variablen/#definition-von-variablen","title":"\ud83e\udde9 Definition von Variablen","text":"<p>In Python erfolgt die Zuweisung einer Variablen mit dem Gleichheitszeichen <code>=</code>:</p> <pre><code>name = \"Florian\"\nalter = 30\nist_aktiv = True\n</code></pre> <ul> <li>Der Name steht links vom <code>=</code></li> <li>Der Wert steht rechts vom <code>=</code></li> <li>Der Typ wird automatisch erkannt (dynamisch typisiert)</li> </ul>"},{"location":"python/variablen/#variablen-verwenden-aufrufen","title":"\ud83e\udde9 Variablen verwenden (aufrufen)","text":"<p>Einmal definierte Variablen k\u00f6nnen sp\u00e4ter im Code einfach durch ihren Namen referenziert werden:</p> <pre><code>vorname = \"Anna\"\nprint(vorname)\n</code></pre> <p>\u27a1\ufe0f Gibt aus: <code>Anna</code></p>"},{"location":"python/variablen/#variablen-neu-zuweisen","title":"\ud83d\udd01 Variablen neu zuweisen","text":"<p>Variablen lassen sich jederzeit mit einem neuen Wert \u00fcberschreiben:</p> <pre><code>x = 10\nx = 20  # nun hat x den Wert 20\n</code></pre>"},{"location":"python/variablen/#mehrere-zuweisungen-gleichzeitig","title":"\u2795 Mehrere Zuweisungen gleichzeitig","text":"<pre><code>a, b = 1, 2\nx = y = z = 0  # Alle drei erhalten den Wert 0\n</code></pre>"},{"location":"python/variablen/#nicht-erlaubte-namen","title":"\u274c Nicht erlaubte Namen","text":"<ul> <li>Variablennamen d\u00fcrfen nicht mit einer Zahl beginnen: <code>1name \u274c</code></li> <li>Keine Sonderzeichen au\u00dfer <code>_</code> erlaubt</li> <li>Reservierte W\u00f6rter wie <code>if</code>, <code>class</code>, <code>def</code> d\u00fcrfen nicht verwendet werden</li> </ul>"},{"location":"python/variablen/#gultige-namenskonventionen","title":"\u2705 G\u00fcltige Namenskonventionen","text":"Stil Beispiel Beschreibung snake_case <code>benutzer_name</code> Python-Standard f\u00fcr Variablen kein Bindestrich <code>benutzer-name \u274c</code> Nicht erlaubt aussagekr\u00e4ftig <code>email_adresse</code> Vermeide <code>x</code>, <code>y</code>, <code>test</code>"},{"location":"python/variablen/#tipps","title":"\ud83e\udde0 Tipps","text":"<ul> <li>Python ist case-sensitive: <code>Name \u2260 name</code></li> <li>Variablennamen sollten bedeutungsvoll und lesbar sein</li> </ul>"},{"location":"python/variablen/#beispiel","title":"\ud83d\udcda Beispiel","text":"<pre><code>titel = \"Python-Grundlagen\"\nkapitel = 3\nprint(\"Lektion:\", titel, \"-\", \"Kapitel\", kapitel)\n</code></pre> <p>\u27a1\ufe0f Gibt aus: <code>Lektion: Python-Grundlagen - Kapitel 3</code></p>"},{"location":"python/dicts/access/","title":"\ud83e\udded Zugriff auf Dictionary-Werte (<code>dict access</code>)","text":"<p>Ein Dictionary (<code>dict</code>) besteht aus Key-Value-Paaren. Um auf die Werte zuzugreifen, nutzt man den jeweiligen Schl\u00fcssel (Key).</p>"},{"location":"python/dicts/access/#zugriff-uber-eckige-klammern","title":"\ud83d\udd11 Zugriff \u00fcber eckige Klammern <code>[]</code>","text":"<pre><code>person = {\n  \"name\": \"Anna\",\n  \"alter\": 28,\n  \"stadt\": \"Berlin\"\n}\n\nprint(person[\"name\"])   # Anna\nprint(person[\"alter\"])  # 28\n</code></pre> <ul> <li>Du gibst den Schl\u00fcssel an \u2192 bekommst den Wert</li> <li>\u2757 Wenn der Key nicht existiert \u2192 <code>KeyError</code></li> </ul>"},{"location":"python/dicts/access/#sicherer-zugriff-mit-get","title":"\ud83d\udee1\ufe0f Sicherer Zugriff mit <code>.get()</code>","text":"<pre><code>print(person.get(\"stadt\"))         # Berlin\nprint(person.get(\"beruf\", \"n/a\"))  # n/a\n</code></pre> <ul> <li><code>.get()</code> gibt <code>None</code> zur\u00fcck, wenn der Schl\u00fcssel fehlt \u2013 keine Fehlermeldung</li> <li>Optional: Standardwert angeben, wenn Key fehlt</li> </ul>"},{"location":"python/dicts/access/#zugriff-in-schleifen","title":"\ud83d\udd01 Zugriff in Schleifen","text":""},{"location":"python/dicts/access/#alle-schlussel-durchlaufen","title":"\ud83d\udd39 Alle Schl\u00fcssel durchlaufen","text":"<pre><code>for key in person:\n  print(key, \"\u2192\", person[key])\n</code></pre>"},{"location":"python/dicts/access/#nur-werte-durchlaufen","title":"\ud83d\udd39 Nur Werte durchlaufen","text":"<pre><code>for value in person.values():\n  print(value)\n</code></pre>"},{"location":"python/dicts/access/#schlussel-und-werte-gleichzeitig","title":"\ud83d\udd39 Schl\u00fcssel und Werte gleichzeitig","text":"<pre><code>for key, value in person.items():\n  print(f\"{key}: {value}\")\n</code></pre>"},{"location":"python/dicts/access/#zugriff-auf-verschachtelte-dictionaries","title":"\ud83d\udcda Zugriff auf verschachtelte Dictionaries","text":"<pre><code>benutzer = {\n  \"profil\": {\n    \"vorname\": \"Lena\",\n    \"nachname\": \"Meyer\"\n  }\n}\n\nprint(benutzer[\"profil\"][\"vorname\"])  # Lena\n</code></pre> <p>\u27a1\ufe0f Mehrstufige Klammern f\u00fcr verschachtelte Daten</p>"},{"location":"python/dicts/access/#existiert-der-schlussel","title":"\u2753 Existiert der Schl\u00fcssel?","text":"<pre><code>if \"alter\" in person:\n  print(\"Alter ist vorhanden\")\n</code></pre> <ul> <li>Vermeidet Fehler bei fehlenden Schl\u00fcsseln</li> </ul>"},{"location":"python/dicts/access/#zusammenfassung","title":"\ud83e\udde0 Zusammenfassung","text":"Zugriffstyp Beispiel Bemerkung Direkt <code>dict[\"key\"]</code> Gibt Fehler bei fehlendem Key Sicher <code>dict.get(\"key\", default)</code> Kein Fehler bei fehlendem Key Durchlaufen <code>for key in dict:</code> Iteration \u00fcber alle Keys Nur Werte <code>for v in dict.values()</code> Nur die Werte Schl\u00fcssel + Wert <code>for k, v in dict.items()</code> Zugriff auf beide gleichzeitig Verschachtelt <code>dict[\"key1\"][\"key2\"]</code> Zugriff auf geschachtelte Dicts Vorhanden? <code>\"key\" in dict</code> Liefert <code>True</code>/<code>False</code> <p>\u2705 Der Zugriff auf Dictionary-Werte ist einfach, aber durch <code>.get()</code> und <code>.items()</code> auch sehr flexibel und sicher.</p>"},{"location":"python/dicts/add/","title":"\u2795 Elemente zu Dictionaries hinzuf\u00fcgen","text":"<p>Ein Dictionary (dict) speichert Daten als Schl\u00fcssel-Wert-Paare. Neue Eintr\u00e4ge lassen sich einfach hinzuf\u00fcgen \u2013 mit klarer und intuitiver Syntax.</p>"},{"location":"python/dicts/add/#grundregel-neue-schlussel-direkt-setzen","title":"\ud83d\udccc Grundregel: Neue Schl\u00fcssel direkt setzen","text":"<pre><code>person = {\"name\": \"Anna\"}\n\n# Neuen Schl\u00fcssel hinzuf\u00fcgen\nperson[\"alter\"] = 30\n\nprint(person)  # {'name': 'Anna', 'alter': 30}\n</code></pre> <ul> <li>Gibt es den Schl\u00fcssel noch nicht, wird er neu angelegt</li> <li>Gibt es ihn bereits, wird der Wert \u00fcberschrieben</li> </ul>"},{"location":"python/dicts/add/#auch-verschachtelt-moglich","title":"\ud83e\udde0 Auch verschachtelt m\u00f6glich","text":"<pre><code>person[\"adresse\"] = {\n  \"stadt\": \"Berlin\",\n  \"plz\": \"10115\"\n}\n</code></pre> <p>\u27a1\ufe0f Jetzt enth\u00e4lt das Dictionary ein verschachteltes Dictionary als Wert.</p>"},{"location":"python/dicts/add/#mehrere-werte-gleichzeitig-mit-update","title":"\ud83d\udd04 Mehrere Werte gleichzeitig mit <code>update()</code>","text":"<pre><code>person.update({\n  \"beruf\": \"Entwicklerin\",\n  \"verheiratet\": False\n})\n</code></pre> <ul> <li>F\u00fcgt mehrere Schl\u00fcssel-Wert-Paare auf einmal hinzu</li> <li>\u00dcberschreibt bestehende Werte, wenn Schl\u00fcssel schon existieren</li> </ul>"},{"location":"python/dicts/add/#bedingt-mit-setdefault","title":"\ud83d\udd0d Bedingt mit <code>setdefault()</code>","text":"<pre><code># Wenn \"sprache\" fehlt, hinzuf\u00fcgen mit Default-Wert\nperson.setdefault(\"sprache\", \"Deutsch\")\n</code></pre> <ul> <li>Gibt vorhandenen Wert zur\u00fcck oder legt neuen an</li> <li>Praktisch f\u00fcr sichere Defaults</li> </ul>"},{"location":"python/dicts/add/#beispiel-kontaktdaten-erganzen","title":"\ud83e\uddea Beispiel: Kontaktdaten erg\u00e4nzen","text":"<pre><code>kontakt = {\n  \"name\": \"Florian\"\n}\n\n# Telefonnummer hinzuf\u00fcgen\nkontakt[\"telefon\"] = \"123-456\"\n\n# E-Mail nur, wenn noch nicht vorhanden\nkontakt.setdefault(\"email\", \"info@example.com\")\n\n# Beruf hinzuf\u00fcgen via update()\nkontakt.update({\"beruf\": \"Datenanalyst\"})\n\nprint(kontakt)\n</code></pre> <p>\u27a1\ufe0f Ergebnis: <pre><code>{\n  \"name\": \"Florian\",\n  \"telefon\": \"123-456\",\n  \"email\": \"info@example.com\",\n  \"beruf\": \"Datenanalyst\"\n}\n</code></pre></p>"},{"location":"python/dicts/add/#zusammenfassung","title":"\u2705 Zusammenfassung","text":"Technik Beschreibung <code>dict[key] = wert</code> Standardmethode, neuen Key anlegen oder \u00fcberschreiben <code>update({...})</code> Mehrere Paare auf einmal hinzuf\u00fcgen <code>setdefault()</code> Nur hinzuf\u00fcgen, wenn Key noch nicht vorhanden <p>\ud83d\udca1 Tipp: Du kannst Dictionaries dynamisch erweitern \u2013 auch w\u00e4hrend einer Schleife oder \u00fcber User-Input.</p>"},{"location":"python/dicts/change/","title":"\ud83d\udd27 Dictionary-Werte \u00e4ndern (<code>dict change</code>)","text":"<p>Ein <code>dict</code> ist ver\u00e4nderbar (mutable) \u2013 du kannst Werte leicht aktualisieren oder neue hinzuf\u00fcgen.</p>"},{"location":"python/dicts/change/#wert-eines-vorhandenen-schlussels-andern","title":"\u270f\ufe0f Wert eines vorhandenen Schl\u00fcssels \u00e4ndern","text":"<pre><code>person = {\n  \"name\": \"Anna\",\n  \"alter\": 28\n}\n\nperson[\"alter\"] = 29\nprint(person)  # {'name': 'Anna', 'alter': 29}\n</code></pre> <ul> <li>Du schreibst einfach <code>dict[key] = neuer_wert</code></li> </ul>"},{"location":"python/dicts/change/#neuen-schlussel-wert-hinzufugen","title":"\u2795 Neuen Schl\u00fcssel-Wert hinzuf\u00fcgen","text":"<pre><code>person[\"stadt\"] = \"Berlin\"\nprint(person)  # {'name': 'Anna', 'alter': 29, 'stadt': 'Berlin'}\n</code></pre> <ul> <li>Wenn der Schl\u00fcssel nicht existiert, wird er neu erstellt</li> </ul>"},{"location":"python/dicts/change/#mehrere-eintrage-gleichzeitig-andern-mit-update","title":"\ud83d\udd04 Mehrere Eintr\u00e4ge gleichzeitig \u00e4ndern mit <code>.update()</code>","text":"<pre><code>person.update({\n  \"alter\": 30,\n  \"beruf\": \"Data Analyst\"\n})\nprint(person)\n# {'name': 'Anna', 'alter': 30, 'stadt': 'Berlin', 'beruf': 'Data Analyst'}\n</code></pre> <ul> <li>Praktisch f\u00fcr mehrere \u00c4nderungen auf einmal</li> <li>\u00dcberschreibt vorhandene Keys oder f\u00fcgt neue hinzu</li> </ul>"},{"location":"python/dicts/change/#typische-anwendungsfalle","title":"\ud83e\udde0 Typische Anwendungsf\u00e4lle","text":"<pre><code># Z\u00e4hler erh\u00f6hen\nperson[\"alter\"] += 1\n\n# String erweitern\nperson[\"name\"] += \" M\u00fcller\"\n</code></pre>"},{"location":"python/dicts/change/#was-passiert-bei-einem-falschen-key","title":"\u26a0\ufe0f Was passiert bei einem falschen Key?","text":"<pre><code>person[\"email\"] += \"@domain.com\"  # \u274c KeyError wenn nicht vorhanden!\n</code></pre> <p>\u27a1\ufe0f Besser absichern:</p> <pre><code>if \"email\" in person:\n  person[\"email\"] += \"@domain.com\"\nelse:\n  person[\"email\"] = \"anna@domain.com\"\n</code></pre>"},{"location":"python/dicts/change/#zusammenfassung","title":"\u2705 Zusammenfassung","text":"Aktion Code-Beispiel Ergebnis Wert \u00e4ndern <code>dict[\"key\"] = neuer_wert</code> \u00dcberschreibt bestehenden Wert Wert hinzuf\u00fcgen <code>dict[\"neu\"] = wert</code> F\u00fcgt neues Paar ein Mehrere auf einmal <code>dict.update({...})</code> \u00c4ndert &amp; erg\u00e4nzt Absichern mit Check <code>if \"key\" in dict:</code> Vermeidet Fehler <p>\ud83d\udd01 Dictionaries in Python sind sehr flexibel und lassen sich leicht erweitern, \u00e4ndern oder kombinieren.</p>"},{"location":"python/dicts/comprehension/","title":"\ud83e\udde0 Dictionary Comprehension","text":"<p>Dictionary Comprehension ist eine kompakte Methode, um ein Dictionary in einer einzigen Zeile zu erstellen oder umzuwandeln \u2013 elegant, \u00fcbersichtlich und oft sehr performant.</p>"},{"location":"python/dicts/comprehension/#was-ist-dictionary-comprehension","title":"\ud83d\udce6 Was ist Dictionary Comprehension?","text":"<p>Mit Dictionary Comprehension kannst du aus einer Liste, einem anderen Dictionary oder beliebigen iterierbaren Objekten dynamisch ein neues Dictionary erzeugen.</p> <p>\ud83e\uddf1 Grundstruktur:</p> <pre><code>{schl\u00fcssel: wert for element in iterable}\n</code></pre>"},{"location":"python/dicts/comprehension/#einfaches-beispiel","title":"\u2705 Einfaches Beispiel","text":"<pre><code>zahlen = [1, 2, 3, 4]\n\nquadrate = {x: x**2 for x in zahlen}\nprint(quadrate)  # {1: 1, 2: 4, 3: 9, 4: 16}\n</code></pre> <p>\u27a1\ufe0f Jeder Wert aus <code>zahlen</code> wird Schl\u00fcssel und das Quadrat der Wert.</p>"},{"location":"python/dicts/comprehension/#mit-bedingung-if-filter","title":"\ud83e\uddea Mit Bedingung (if-Filter)","text":"<pre><code>gerade_quadrate = {x: x**2 for x in zahlen if x % 2 == 0}\nprint(gerade_quadrate)  # {2: 4, 4: 16}\n</code></pre> <p>\u27a1\ufe0f Nur gerade Zahlen werden ber\u00fccksichtigt.</p>"},{"location":"python/dicts/comprehension/#aus-anderer-quelle-z-b-liste-von-tupeln","title":"\ud83d\udd01 Aus anderer Quelle (z.\u202fB. Liste von Tupeln)","text":"<pre><code>paare = [(\"a\", 1), (\"b\", 2), (\"c\", 3)]\n\nneues_dict = {key: value for (key, value) in paare}\n# {'a': 1, 'b': 2, 'c': 3}\n</code></pre>"},{"location":"python/dicts/comprehension/#umkehren-eines-dictionaries","title":"\ud83d\udd01 Umkehren eines Dictionaries","text":"<pre><code>original = {\"x\": 10, \"y\": 20}\n\numgekehrt = {v: k for k, v in original.items()}\n# {10: 'x', 20: 'y'}\n</code></pre>"},{"location":"python/dicts/comprehension/#mit-enumerate","title":"\ud83d\udd27 Mit <code>enumerate()</code>","text":"<pre><code>namen = [\"Anna\", \"Ben\", \"Clara\"]\n\nindexiert = {i: name for i, name in enumerate(namen)}\n# {0: 'Anna', 1: 'Ben', 2: 'Clara'}\n</code></pre>"},{"location":"python/dicts/comprehension/#doppelte-schleifen","title":"\ud83d\udd01 Doppelte Schleifen","text":"<pre><code>kombinationen = {(x, y): x * y for x in range(1, 3) for y in range(1, 4)}\n# {(1, 1): 1, (1, 2): 2, (1, 3): 3, (2, 1): 2, (2, 2): 4, (2, 3): 6}\n</code></pre> <p>\u27a1\ufe0f Du kannst mehrere Schleifen in einem Dictionary Comprehension nutzen!</p>"},{"location":"python/dicts/comprehension/#mit-ifelse-im-ausdruck","title":"\ud83d\udd0e Mit <code>if...else</code> im Ausdruck","text":"<pre><code>status = {x: (\"gerade\" if x % 2 == 0 else \"ungerade\") for x in range(5)}\n# {0: 'gerade', 1: 'ungerade', 2: 'gerade', 3: 'ungerade', 4: 'gerade'}\n</code></pre>"},{"location":"python/dicts/comprehension/#zusammenfassung","title":"\u2705 Zusammenfassung","text":"Technik Beispiel Basis-Comprehension <code>{x: x**2 for x in liste}</code> Mit Filter (<code>if</code>) <code>{x: x for x in liste if x &gt; 0}</code> Mit <code>enumerate()</code> <code>{i: val for i, val in enumerate(...)}</code> Paare aus Liste <code>{k: v for (k, v) in tupel_liste}</code> Umkehren <code>{v: k for k, v in dict.items()}</code> Mit <code>if...else</code> im Ausdruck <code>{x: \"typ\" if x &gt; 0 else \"leer\" ...}</code> <p>\ud83e\udde0 Dictionary Comprehension ist ideal, um effizient, kompakt und leserlich neue Dictionaries zu erzeugen \u2013 besonders f\u00fcr Transformationen oder Filterungen.</p>"},{"location":"python/dicts/copy/","title":"\ud83d\udcdd Dictionaries kopieren (<code>dict copy</code>)","text":"<p>Ein Dictionary (<code>dict</code>) zu kopieren ist wichtig, wenn du das Original nicht ver\u00e4ndern willst, aber mit denselben Daten arbeiten m\u00f6chtest.</p>"},{"location":"python/dicts/copy/#1-kopieren-mit-copy","title":"\ud83d\udccb 1. Kopieren mit <code>.copy()</code>","text":"<pre><code>original = {\"name\": \"Anna\", \"alter\": 28}\nkopie = original.copy()\n\nkopie[\"alter\"] = 30\n\nprint(original)  # {'name': 'Anna', 'alter': 28}\nprint(kopie)     # {'name': 'Anna', 'alter': 30}\n</code></pre> <p>\u2705 Erstellt eine flache Kopie \u2705 \u00c4nderungen an der Kopie beeinflussen das Original nicht</p>"},{"location":"python/dicts/copy/#vorsicht-bei-verschachtelten-dictionaries","title":"\ud83d\udfe1 Vorsicht bei verschachtelten Dictionaries","text":"<pre><code>daten = {\n  \"name\": \"Max\",\n  \"adresse\": {\"stadt\": \"Berlin\", \"plz\": \"10115\"}\n}\n\nflach = daten.copy()\nflach[\"adresse\"][\"stadt\"] = \"Hamburg\"\n\nprint(daten[\"adresse\"][\"stadt\"])  # Hamburg \ud83d\ude31\n</code></pre> <p>\ud83d\udd38 Warum? \u2192 <code>.copy()</code> kopiert nur die oberste Ebene \u2013 die inneren Objekte sind referenziert (nicht dupliziert)</p>"},{"location":"python/dicts/copy/#2-tiefe-kopie-mit-copydeepcopy","title":"\ud83d\udce6 2. Tiefe Kopie mit <code>copy.deepcopy()</code>","text":"<pre><code>import copy\n\ndaten = {\n  \"name\": \"Max\",\n  \"adresse\": {\"stadt\": \"Berlin\", \"plz\": \"10115\"}\n}\n\ntief = copy.deepcopy(daten)\ntief[\"adresse\"][\"stadt\"] = \"Hamburg\"\n\nprint(daten[\"adresse\"][\"stadt\"])  # Berlin \ud83d\udc4d\n</code></pre> <p>\u2705 Echte Kopie aller Ebenen \u2705 Keine gemeinsamen Referenzen mehr</p>"},{"location":"python/dicts/copy/#3-manuell-duplizieren-nicht-empfohlen","title":"\u2702\ufe0f 3. Manuell duplizieren (nicht empfohlen)","text":"<pre><code>original = {\"a\": 1, \"b\": 2}\nkopie = dict(original)  # auch flache Kopie\n</code></pre> <p>\u27a1\ufe0f Funktioniert, aber <code>.copy()</code> ist lesbarer &amp; g\u00e4ngiger</p>"},{"location":"python/dicts/copy/#ist-keine-kopie","title":"\ud83d\udd0d <code>=</code> ist keine Kopie!","text":"<pre><code>a = {\"x\": 1}\nb = a\nb[\"x\"] = 2\n\nprint(a)  # {'x': 2} \ud83d\ude31\n</code></pre> <p>\u27a1\ufe0f Beide zeigen auf dasselbe Objekt im Speicher \u2013 \u00c4nderungen wirken beidseitig</p>"},{"location":"python/dicts/copy/#zusammenfassung","title":"\u2705 Zusammenfassung","text":"Methode Typ Ebenen Empfohlen <code>dict.copy()</code> Flach 1 \u2705 Ja <code>copy.deepcopy(dict)</code> Tief (rekursiv) \u221e \u2705 Ja <code>dict(a)</code> Flach 1 \u26a0\ufe0f ok <code>b = a</code> Referenz - \u274c Nein <p>\ud83e\udde0 Wenn du mit mehrdimensionalen oder verschachtelten Daten arbeitest, ist <code>deepcopy()</code> deine beste Wahl. F\u00fcr einfache Kopien reicht <code>.copy()</code> aus.</p>"},{"location":"python/dicts/einf%C3%BChrung/","title":"\ud83d\udcd8 Dictionaries (<code>dict</code>)","text":"<p>Ein Dictionary in Python ist eine strukturierte Sammlung von Schl\u00fcssel-Wert-Paaren. Es ist vergleichbar mit einem W\u00f6rterbuch \u2013 ein Begriff (<code>Key</code>) hat eine Bedeutung (<code>Value</code>).</p>"},{"location":"python/dicts/einf%C3%BChrung/#was-ist-ein-dictionary","title":"\ud83d\udd39 Was ist ein Dictionary?","text":"<p>Ein Dictionary speichert beliebige Daten \u2013 jeder <code>key</code> ist eindeutig und zeigt auf einen <code>value</code>.</p> <pre><code>person = {\n  \"name\": \"Max\",\n  \"alter\": 30,\n  \"beruf\": \"Entwickler\"\n}\n</code></pre> <ul> <li><code>\"name\"</code> ist der Schl\u00fcssel</li> <li><code>\"Max\"</code> ist der Wert</li> </ul>"},{"location":"python/dicts/einf%C3%BChrung/#merkmale-von-dictionaries","title":"\ud83d\udce6 Merkmale von Dictionaries","text":"Eigenschaft Erkl\u00e4rung Schl\u00fcssel (<code>key</code>) M\u00fcssen eindeutig sein, meist Strings Werte (<code>value</code>) K\u00f6nnen beliebige Datentypen sein (auch Listen, Dicts) Ungeordnet (bis 3.6) Ab Python 3.7 behalten sie die Einf\u00fcgereihenfolge Ver\u00e4ndertbar (mutable) Kann nachtr\u00e4glich bearbeitet werden"},{"location":"python/dicts/einf%C3%BChrung/#dictionary-erstellen","title":"\ud83e\uddf1 Dictionary erstellen","text":""},{"location":"python/dicts/einf%C3%BChrung/#mit-geschweiften-klammern","title":"\ud83d\udd38 Mit geschweiften Klammern","text":"<pre><code>auto = {\n  \"marke\": \"BMW\",\n  \"baujahr\": 2020,\n  \"farbe\": \"blau\"\n}\n</code></pre>"},{"location":"python/dicts/einf%C3%BChrung/#mit-dict-funktion","title":"\ud83d\udd38 Mit <code>dict()</code>-Funktion","text":"<pre><code>auto = dict(marke=\"BMW\", baujahr=2020, farbe=\"blau\")\n</code></pre>"},{"location":"python/dicts/einf%C3%BChrung/#typisches-einsatzszenario","title":"\ud83d\udd0d Typisches Einsatzszenario","text":"<p>Dictionaries sind ideal, wenn du eindeutige Zuordnungen brauchst:</p> <pre><code>benutzer = {\n  \"username\": \"florian\",\n  \"email\": \"f.fenzl@somebot.de\",\n  \"aktiv\": True\n}\n</code></pre>"},{"location":"python/dicts/einf%C3%BChrung/#typische-werte-im-dictionary","title":"\u2705 Typische Werte im Dictionary","text":"<pre><code>profil = {\n  \"id\": 123,\n  \"name\": \"Julia\",\n  \"skills\": [\"Python\", \"Data Science\"],\n  \"erfahrung\": {\n    \"Jahre\": 5,\n    \"Bereich\": \"KI\"\n  }\n}\n</code></pre> <ul> <li>Werte k\u00f6nnen Listen, Zahlen, Strings, Booleans, sogar andere Dicts sein.</li> </ul>"},{"location":"python/dicts/einf%C3%BChrung/#syntax-check","title":"\ud83d\udccc Syntax-Check","text":"<pre><code># \u2714\ufe0f g\u00fcltig\ninfo = {\"x\": 1, \"y\": 2}\n\n# \u274c ung\u00fcltig (Doppelte Keys)\nfehler = {\"a\": 1, \"a\": 2}  # \u2192 letzter Wert \u00fcberschreibt vorherigen\n</code></pre>"},{"location":"python/dicts/einf%C3%BChrung/#wann-dictionaries-verwenden","title":"\u26a1 Wann Dictionaries verwenden?","text":"Anwendung Dictionary ist sinnvoll Name + Adresse \u2705 Ja ID + Nutzerdaten \u2705 Ja Nur Wertelisten \u274c Nein (\u2192 Liste besser) Indexzugriff mit Zahlen \u274c Nein (\u2192 Liste besser)"},{"location":"python/dicts/einf%C3%BChrung/#fazit","title":"\ud83d\udcd8 Fazit","text":"<p>Ein <code>dict</code> ist schnell, flexibel und perfekt geeignet, wenn man Werte mit eindeutigen Schl\u00fcsseln speichern will.</p>"},{"location":"python/dicts/loop/","title":"\ud83d\udd01 Dictionaries durchlaufen (<code>dict loop</code>)","text":"<p>Dictionaries (<code>dict</code>) k\u00f6nnen Schl\u00fcssel, Werte oder beides gleichzeitig iterieren. Ideal, um Daten auszulesen, zu verarbeiten oder anzuzeigen.</p>"},{"location":"python/dicts/loop/#nur-schlussel-for-key-in-dict","title":"\ud83d\udd11 Nur Schl\u00fcssel (<code>for key in dict</code>)","text":"<pre><code>person = {\"name\": \"Anna\", \"alter\": 28}\n\nfor key in person:\n    print(key)\n</code></pre> <p>\u27a1\ufe0f Gibt aus:</p> <pre><code>name\nalter\n</code></pre> <p>\ud83d\udca1 Entspricht <code>for key in person.keys()</code></p>"},{"location":"python/dicts/loop/#nur-werte-for-value-in-dictvalues","title":"\ud83d\udd22 Nur Werte (<code>for value in dict.values()</code>)","text":"<pre><code>for value in person.values():\n    print(value)\n</code></pre> <p>\u27a1\ufe0f Gibt aus:</p> <pre><code>Anna\n28\n</code></pre>"},{"location":"python/dicts/loop/#schlussel-werte-for-key-value-in-dictitems","title":"\ud83d\udd10 Schl\u00fcssel &amp; Werte (<code>for key, value in dict.items()</code>)","text":"<pre><code>for key, value in person.items():\n    print(f\"{key}: {value}\")\n</code></pre> <p>\u27a1\ufe0f Gibt aus:</p> <pre><code>name: Anna\nalter: 28\n</code></pre>"},{"location":"python/dicts/loop/#typische-anwendungen","title":"\ud83e\udde0 Typische Anwendungen","text":""},{"location":"python/dicts/loop/#bestimmte-werte-uberprufen","title":"\ud83d\udd0d Bestimmte Werte \u00fcberpr\u00fcfen","text":"<pre><code>for value in person.values():\n    if value == \"Anna\":\n        print(\"Name gefunden!\")\n</code></pre>"},{"location":"python/dicts/loop/#eintrage-zahlen","title":"\ud83e\uddee Eintr\u00e4ge z\u00e4hlen","text":"<pre><code>count = 0\nfor _ in person:\n    count += 1\nprint(\"Anzahl Eintr\u00e4ge:\", count)\n</code></pre>"},{"location":"python/dicts/loop/#mit-bedingungen-kombinieren","title":"\ud83d\udcda Mit Bedingungen kombinieren","text":"<pre><code>for key in person:\n    if key.startswith(\"a\"):\n        print(f\"{key}: {person[key]}\")\n</code></pre> <p>\u27a1\ufe0f Gibt nur Eintr\u00e4ge aus, deren Schl\u00fcssel mit \"a\" beginnen</p>"},{"location":"python/dicts/loop/#geschachtelte-dictionaries-durchlaufen","title":"\ud83d\udce6 Geschachtelte Dictionaries durchlaufen","text":"<pre><code>personen = {\n    \"max\": {\"alter\": 25, \"stadt\": \"Berlin\"},\n    \"lisa\": {\"alter\": 30, \"stadt\": \"Hamburg\"}\n}\n\nfor name, daten in personen.items():\n    print(f\"{name} lebt in {daten['stadt']} und ist {daten['alter']} Jahre alt.\")\n</code></pre>"},{"location":"python/dicts/loop/#zusammenfassung","title":"\u2705 Zusammenfassung","text":"Ziel Syntax Nur Schl\u00fcssel <code>for key in dict:</code> Nur Werte <code>for value in dict.values():</code> Schl\u00fcssel &amp; Wert <code>for key, value in dict.items():</code> Geschachtelte Dicts Mit verschachtelten Loops oder Zugriffen Bedingte Filterung Mit <code>if</code> im Loop kombinieren <p>\ud83d\udd01 Mit <code>items()</code> wird das Dictionary am flexibelsten durchlaufen \u2013 besonders bei Datenanalyse, Transformation oder dynamischem Zugriff.</p>"},{"location":"python/dicts/methoden/","title":"\ud83e\uddf0 Dictionary Methoden","text":"<p>Python bietet viele n\u00fctzliche Methoden, um mit Dictionaries effizient zu arbeiten. Diese Methoden helfen beim Zugriff, Bearbeiten, Kopieren, Suchen und Organisieren von Daten.</p>"},{"location":"python/dicts/methoden/#get-sicherer-zugriff-auf-werte","title":"\ud83d\udd0e <code>get()</code> \u2013 Sicherer Zugriff auf Werte","text":"<pre><code>person = {\"name\": \"Anna\", \"alter\": 30}\n\nprint(person.get(\"name\"))         # Anna\nprint(person.get(\"stadt\", \"N/A\")) # N/A (Defaultwert, wenn Key fehlt)\n</code></pre> <ul> <li>Gibt <code>None</code> zur\u00fcck, wenn Schl\u00fcssel nicht existiert (oder einen selbst definierten Standardwert).</li> <li>Verhindert Fehler wie <code>KeyError</code>.</li> </ul>"},{"location":"python/dicts/methoden/#update-dictionary-aktualisieren-oder-erweitern","title":"\ud83d\udd27 <code>update()</code> \u2013 Dictionary aktualisieren oder erweitern","text":"<pre><code>person.update({\"beruf\": \"Analystin\", \"alter\": 31})\n</code></pre> <ul> <li>F\u00fcgt neue Schl\u00fcssel-Werte-Paare hinzu oder \u00fcberschreibt bestehende.</li> </ul>"},{"location":"python/dicts/methoden/#pop-schlussel-entfernen-und-wert-zuruckgeben","title":"\ud83d\uddd1\ufe0f <code>pop()</code> \u2013 Schl\u00fcssel entfernen und Wert zur\u00fcckgeben","text":"<pre><code>wert = person.pop(\"alter\")\n# Entfernt \"alter\" und gibt 31 zur\u00fcck\n</code></pre> <ul> <li>Wenn der Schl\u00fcssel fehlt, gibt es einen Fehler \u2013 es sei denn, du gibst einen Defaultwert an: <code>person.pop(\"xyz\", \"nicht da\")</code></li> </ul>"},{"location":"python/dicts/methoden/#clear-alle-inhalte-loschen","title":"\ud83e\uddf9 <code>clear()</code> \u2013 Alle Inhalte l\u00f6schen","text":"<pre><code>person.clear()\n</code></pre> <p>\u27a1\ufe0f Dictionary ist danach leer: <code>{}</code></p>"},{"location":"python/dicts/methoden/#copy-flache-kopie-erstellen","title":"\ud83d\udccb <code>copy()</code> \u2013 Flache Kopie erstellen","text":"<pre><code>neu = person.copy()\n</code></pre> <ul> <li>Erstellt eine flache Kopie (kein <code>deep copy</code>!)</li> <li>\u00c4nderungen am Original betreffen die Kopie nicht \u2013 solange es keine verschachtelten Strukturen sind.</li> </ul>"},{"location":"python/dicts/methoden/#keys-alle-schlussel-als-ansicht","title":"\ud83d\udd11 <code>keys()</code> \u2013 Alle Schl\u00fcssel als Ansicht","text":"<pre><code>for key in person.keys():\n    print(key)\n</code></pre> <ul> <li>Gibt <code>dict_keys</code> Objekt zur\u00fcck (\u00e4hnlich wie Liste, aber keine echte Liste).</li> <li>Kann mit <code>list()</code> in Liste umgewandelt werden.</li> </ul>"},{"location":"python/dicts/methoden/#values-alle-werte","title":"\ud83d\udd22 <code>values()</code> \u2013 Alle Werte","text":"<pre><code>for wert in person.values():\n    print(wert)\n</code></pre>"},{"location":"python/dicts/methoden/#items-alle-schlussel-wert-paare","title":"\ud83e\udde9 <code>items()</code> \u2013 Alle Schl\u00fcssel-Wert-Paare","text":"<pre><code>for key, value in person.items():\n    print(f\"{key}: {value}\")\n</code></pre> <p>\u27a1\ufe0f Ideal f\u00fcr <code>for</code>-Schleifen!</p>"},{"location":"python/dicts/methoden/#in-schlussel-prufen","title":"\ud83d\udd0d <code>in</code> \u2013 Schl\u00fcssel pr\u00fcfen","text":"<pre><code>if \"name\" in person:\n    print(\"Name existiert\")\n</code></pre>"},{"location":"python/dicts/methoden/#setdefault-wert-zuruckgeben-oder-erstellen","title":"\ud83d\udea7 <code>setdefault()</code> \u2013 Wert zur\u00fcckgeben oder erstellen","text":"<pre><code>farbe = person.setdefault(\"farbe\", \"blau\")\n</code></pre> <ul> <li>Gibt vorhandenen Wert zur\u00fcck \u2013 oder setzt und gibt Default zur\u00fcck, wenn noch nicht vorhanden.</li> </ul>"},{"location":"python/dicts/methoden/#beispielubersicht","title":"\ud83e\uddea Beispiel\u00fcbersicht","text":"<pre><code>person = {\"name\": \"Tom\"}\n\nperson.get(\"name\")        # \"Tom\"\nperson.get(\"alter\", 0)    # 0 (nicht vorhanden)\n\nperson.update({\"alter\": 25})\nperson.pop(\"name\")        # \"Tom\"\nperson.setdefault(\"stadt\", \"Berlin\")\n\ncopy = person.copy()\nperson.clear()\n\nlist(person.keys())       # Alle Keys als Liste\n</code></pre>"},{"location":"python/dicts/methoden/#zusammenfassung","title":"\u2705 Zusammenfassung","text":"Methode Zweck <code>get()</code> Sicherer Zugriff mit Fallback <code>update()</code> Daten erg\u00e4nzen oder \u00e4ndern <code>pop()</code> Element l\u00f6schen mit R\u00fcckgabe <code>clear()</code> Alles l\u00f6schen <code>copy()</code> Kopie erzeugen <code>keys()</code> Alle Schl\u00fcssel <code>values()</code> Alle Werte <code>items()</code> Alle Schl\u00fcssel-Wert-Paare <code>setdefault()</code> Sicher einf\u00fcgen + R\u00fcckgabe <code>in</code> Existiert ein Schl\u00fcssel? <p>\ud83e\udde0 Tipp: Viele dieser Methoden geben keine Listen zur\u00fcck, sondern spezielle View-Objekte (<code>dict_keys</code>, <code>dict_values</code>), die du mit <code>list()</code> umwandeln kannst \u2013 wenn du sie sortieren, z\u00e4hlen oder manipulieren willst.</p>"},{"location":"python/dicts/nested/","title":"\ud83e\uddf1 Verschachtelte Dictionaries (<code>nested dicts</code>)","text":"<p>Ein verschachteltes Dictionary (engl. nested dictionary) ist ein Dictionary, das andere Dictionaries als Werte enth\u00e4lt. So lassen sich komplexe Datenstrukturen \u00fcbersichtlich darstellen \u2013 z.\u202fB. Personen, Produkte oder Datenbanken.</p>"},{"location":"python/dicts/nested/#beispiel-einfaches-verschachteltes-dictionary","title":"\ud83d\udce6 Beispiel \u2013 Einfaches verschachteltes Dictionary","text":"<pre><code>person = {\n  \"name\": \"Anna\",\n  \"adresse\": {\n    \"stadt\": \"Berlin\",\n    \"plz\": \"10115\"\n  }\n}\n</code></pre>"},{"location":"python/dicts/nested/#auf-verschachtelte-daten-zugreifen","title":"\ud83d\udd0d Auf verschachtelte Daten zugreifen","text":"<pre><code>print(person[\"adresse\"][\"stadt\"])  # Berlin\n</code></pre> <p>\u27a1\ufe0f Du greifst Schritt f\u00fcr Schritt auf die verschachtelten Ebenen zu: <code>dict[\u00e4u\u00dferer_key][innerer_key]</code></p>"},{"location":"python/dicts/nested/#werte-andern","title":"\u270f\ufe0f Werte \u00e4ndern","text":"<pre><code>person[\"adresse\"][\"plz\"] = \"10117\"\n</code></pre> <p>\u27a1\ufe0f Inneres Dictionary wird wie gewohnt modifiziert</p>"},{"location":"python/dicts/nested/#neue-schlussel-hinzufugen","title":"\u2795 Neue Schl\u00fcssel hinzuf\u00fcgen","text":""},{"location":"python/dicts/nested/#auf-oberster-ebene","title":"Auf oberster Ebene:","text":"<pre><code>person[\"beruf\"] = \"Analystin\"\n</code></pre>"},{"location":"python/dicts/nested/#innerhalb","title":"Innerhalb:","text":"<pre><code>person[\"adresse\"][\"stra\u00dfe\"] = \"Musterstra\u00dfe 5\"\n</code></pre>"},{"location":"python/dicts/nested/#schleifen-uber-verschachtelte-dictionaries","title":"\ud83d\udd01 Schleifen \u00fcber verschachtelte Dictionaries","text":"<pre><code>for key, value in person.items():\n    if isinstance(value, dict):\n        for sub_key, sub_value in value.items():\n            print(f\"{key} \u2192 {sub_key}: {sub_value}\")\n    else:\n        print(f\"{key}: {value}\")\n</code></pre> <p>\u27a1\ufe0f Pr\u00fcft, ob ein Wert selbst ein Dictionary ist und durchl\u00e4uft es dann</p>"},{"location":"python/dicts/nested/#struktur-mit-mehreren-objekten","title":"\ud83e\uddf1 Struktur mit mehreren Objekten","text":"<pre><code>personen = {\n  \"anna\": {\"alter\": 28, \"stadt\": \"Berlin\"},\n  \"ben\": {\"alter\": 35, \"stadt\": \"Hamburg\"}\n}\n</code></pre>"},{"location":"python/dicts/nested/#zugriff","title":"Zugriff:","text":"<pre><code>print(personen[\"ben\"][\"stadt\"])  # Hamburg\n</code></pre>"},{"location":"python/dicts/nested/#praktische-anwendung","title":"\ud83e\uddea Praktische Anwendung","text":"<pre><code>for name, daten in personen.items():\n    print(f\"{name.title()} ist {daten['alter']} Jahre alt und wohnt in {daten['stadt']}.\")\n</code></pre> <p>\u27a1\ufe0f Beispielausgabe: <pre><code>Anna ist 28 Jahre alt und wohnt in Berlin.\nBen ist 35 Jahre alt und wohnt in Hamburg.\n</code></pre></p>"},{"location":"python/dicts/nested/#zusammenfassung","title":"\u2705 Zusammenfassung","text":"Aktion Beispiel Zugriff auf verschachtelt <code>dict[\"key\"][\"subkey\"]</code> Wert \u00e4ndern <code>dict[\"key\"][\"subkey\"] = wert</code> Neues hinzuf\u00fcgen <code>dict[\"key\"][\"neuer\"] = wert</code> \u00dcberpr\u00fcfen mit <code>isinstance</code> <code>isinstance(value, dict)</code> Mehrstufige Struktur Ideal f\u00fcr komplexe Informationen <p>\ud83e\udde0 Tipp: F\u00fcr tiefe oder dynamische Strukturen kann auch ein <code>defaultdict</code> oder <code>get()</code> n\u00fctzlich sein, um Fehler bei fehlenden Keys zu vermeiden.</p>"},{"location":"python/dicts/remove/","title":"\ud83d\uddd1\ufe0f Dictionary-Werte entfernen (<code>dict remove</code>)","text":"<p>Ein Dictionary (<code>dict</code>) kann flexibel Eintr\u00e4ge l\u00f6schen \u2013 also Schl\u00fcssel mit ihren Werten entfernen. Daf\u00fcr gibt es mehrere sichere und effiziente Methoden.</p>"},{"location":"python/dicts/remove/#mit-del-loschen","title":"\u274c Mit <code>del</code> l\u00f6schen","text":"<pre><code>person = {\"name\": \"Anna\", \"alter\": 28}\n\ndel person[\"alter\"]\nprint(person)  # {'name': 'Anna'}\n</code></pre> <ul> <li>Entfernt ein bestimmtes Schl\u00fcssel-Wert-Paar</li> <li>\u2757 Gibt einen Fehler, wenn der Key nicht existiert</li> </ul> <p>\u27a1\ufe0f Absichern:</p> <pre><code>if \"alter\" in person:\n  del person[\"alter\"]\n</code></pre>"},{"location":"python/dicts/remove/#mit-pop-loschen-und-wert-erhalten","title":"\ud83e\uddfd Mit <code>.pop()</code> l\u00f6schen und Wert erhalten","text":"<pre><code>person = {\"name\": \"Anna\", \"stadt\": \"Berlin\"}\n\nwert = person.pop(\"stadt\")\nprint(wert)      # Berlin\nprint(person)    # {'name': 'Anna'}\n</code></pre> <ul> <li>L\u00f6scht und gibt den entfernten Wert zur\u00fcck</li> <li>Du kannst auch einen Standardwert angeben:</li> </ul> <pre><code>person.pop(\"beruf\", \"nicht vorhanden\")  # kein Fehler\n</code></pre>"},{"location":"python/dicts/remove/#das-letzte-element-entfernen-mit-popitem","title":"\ud83d\udd01 Das letzte Element entfernen mit <code>.popitem()</code>","text":"<pre><code>daten = {\"a\": 1, \"b\": 2, \"c\": 3}\nletzter = daten.popitem()\n\nprint(letzter)  # ('c', 3)\nprint(daten)    # {'a': 1, 'b': 2}\n</code></pre> <ul> <li>Entfernt das zuletzt hinzugef\u00fcgte Paar (Python 3.7+)</li> <li>Gibt ein <code>(key, value)</code>-Tupel zur\u00fcck</li> </ul>"},{"location":"python/dicts/remove/#komplett-leeren-mit-clear","title":"\ud83e\uddf9 Komplett leeren mit <code>.clear()</code>","text":"<pre><code>person.clear()\nprint(person)  # {}\n</code></pre> <ul> <li>Entfernt alle Eintr\u00e4ge</li> <li>Das Dictionary bleibt aber erhalten</li> </ul>"},{"location":"python/dicts/remove/#zusammenfassung","title":"\u2705 Zusammenfassung","text":"Methode Funktion Fehler bei fehlendem Key? <code>del dict[\"x\"]</code> Entfernt Key direkt \u2705 ja <code>pop(\"x\")</code> Entfernt Key &amp; gibt Wert zur\u00fcck \u2705 ja, aber absicherbar <code>pop(\"x\", def)</code> Sicher l\u00f6schen mit Fallback \u274c nein <code>popitem()</code> Letztes Element entfernen \u2705 ja <code>clear()</code> Alles entfernen \u274c nein <p>\ud83e\udde0 Nutze <code>pop()</code> f\u00fcr sicheres L\u00f6schen, <code>clear()</code> zum Zur\u00fccksetzen und <code>del</code> f\u00fcr gezieltes Entfernen \u2013 mit Vorsicht!</p>"},{"location":"python/listen/access/","title":"\ud83d\uddc2\ufe0f Zugriff auf Listen (Access)","text":"<p>Listen in Python sind indexierte, geordnete Datenstrukturen. Du kannst auf ihre Elemente gezielt zugreifen, sie lesen, ver\u00e4ndern oder sogar mit Slicing Teilbereiche extrahieren.</p>"},{"location":"python/listen/access/#indexbasierter-zugriff","title":"\ud83d\udccc Indexbasierter Zugriff","text":"<p>Python verwendet nullbasierte Indizierung: Das erste Element hat Index <code>0</code>, das letzte Element Index <code>-1</code> (negativ r\u00fcckw\u00e4rts).</p> <pre><code>fr\u00fcchte = [\"Apfel\", \"Banane\", \"Kiwi\", \"Orange\"]\n\nprint(fr\u00fcchte[0])   # Apfel\nprint(fr\u00fcchte[2])   # Kiwi\nprint(fr\u00fcchte[-1])  # Orange (letztes Element)\n</code></pre>"},{"location":"python/listen/access/#negative-indizes","title":"\ud83e\uddee Negative Indizes","text":"<p>Mit negativen Indizes z\u00e4hlst du vom Ende der Liste zur\u00fcck:</p> <pre><code>print(fr\u00fcchte[-2])  # Kiwi\n</code></pre> Index Element 0 Apfel 1 Banane 2 Kiwi 3 / -1 Orange"},{"location":"python/listen/access/#werte-andern-per-index","title":"\u270d\ufe0f Werte \u00e4ndern per Index","text":"<pre><code>fr\u00fcchte[1] = \"Mango\"\nprint(fr\u00fcchte)  # [\"Apfel\", \"Mango\", \"Kiwi\", \"Orange\"]\n</code></pre>"},{"location":"python/listen/access/#zugriff-auerhalb-des-bereichs","title":"\ud83d\udeab Zugriff au\u00dferhalb des Bereichs","text":"<pre><code>print(fr\u00fcchte[10])  # \u274c IndexError: list index out of range\n</code></pre> <p>\u27a1\ufe0f Achte auf die L\u00e4nge: <code>len(fr\u00fcchte)</code> hilft!</p>"},{"location":"python/listen/access/#slicing-teilbereiche-extrahieren","title":"\ud83e\udde9 Slicing \u2013 Teilbereiche extrahieren","text":"<p>Mit dem Slicing-Syntax <code>liste[start:stop:step]</code> kannst du Abschnitte der Liste holen:</p> <pre><code>zahlen = [10, 20, 30, 40, 50]\nprint(zahlen[1:4])    # [20, 30, 40]\nprint(zahlen[:3])     # [10, 20, 30]\nprint(zahlen[::2])    # [10, 30, 50] (jeder zweite)\nprint(zahlen[::-1])   # [50, 40, 30, 20, 10] (umgekehrt)\n</code></pre> Ausdruck Bedeutung <code>liste[a:b]</code> Von <code>a</code> (inkl.) bis <code>b</code> (exkl.) <code>liste[:b]</code> Vom Anfang bis <code>b</code> <code>liste[a:]</code> Von <code>a</code> bis zum Ende <code>liste[::s]</code> Ganze Liste, alle <code>s</code> Schritte <code>liste[::-1]</code> Ganze Liste r\u00fcckw\u00e4rts"},{"location":"python/listen/access/#check-ist-index-gultig","title":"\ud83e\udde0 Check: Ist Index g\u00fcltig?","text":"<pre><code>index = 3\nif index &lt; len(fr\u00fcchte):\n    print(fr\u00fcchte[index])\n</code></pre>"},{"location":"python/listen/access/#zusammenfassung","title":"\u2705 Zusammenfassung","text":"Zugriff Beispiel Ergebnis Erstes Element <code>liste[0]</code> erster Eintrag Letztes Element <code>liste[-1]</code> letzter Eintrag Slicing <code>liste[1:4]</code> Teilbereich R\u00fcckw\u00e4rts <code>liste[::-1]</code> umgekehrte Liste \u00c4ndern <code>liste[1] = \"Neu\"</code> \u00fcberschreibt Element <p>\ud83e\udde9 Tipp: Mit Slicing kannst du auch neue Listen auf Basis bestehender erzeugen \u2013 elegant &amp; performant!</p>"},{"location":"python/listen/add/","title":"\u2795 Listen erweitern (Add / Append / Insert)","text":"<p>Python-Listen sind dynamisch: Du kannst jederzeit einzelne oder mehrere Elemente hinzuf\u00fcgen \u2013 vorn, hinten oder dazwischen.</p>"},{"location":"python/listen/add/#1-append-ein-einzelnes-element-anhangen","title":"\ud83d\udd39 1. <code>append()</code> \u2013 Ein einzelnes Element anh\u00e4ngen","text":"<p>F\u00fcgt ein Element am Ende der Liste hinzu.</p> <pre><code>tiere = [\"Hund\", \"Katze\"]\ntiere.append(\"Maus\")\nprint(tiere)  # ['Hund', 'Katze', 'Maus']\n</code></pre> <ul> <li>Nur ein Element pro Aufruf</li> <li>Auch komplexe Elemente wie Listen, Dictionaries, etc.</li> </ul> <pre><code>tiere.append([\"Frosch\", \"B\u00e4r\"])\nprint(tiere)  # ['Hund', 'Katze', 'Maus', ['Frosch', 'B\u00e4r']]\n</code></pre> <p>\u26d4 Achtung: Es wird eine Liste als ein Element angeh\u00e4ngt!</p>"},{"location":"python/listen/add/#2-extend-mehrere-elemente-anhangen","title":"\ud83d\udd39 2. <code>extend()</code> \u2013 Mehrere Elemente anh\u00e4ngen","text":"<p>F\u00fcgt alle Elemente einer Liste einzeln hinzu.</p> <pre><code>zahlen = [1, 2, 3]\nzahlen.extend([4, 5, 6])\nprint(zahlen)  # [1, 2, 3, 4, 5, 6]\n</code></pre> <p>\u2705 Ideal, um zwei Listen zu verbinden!</p>"},{"location":"python/listen/add/#3-insertindex-element-einfugen-an-beliebiger-stelle","title":"\ud83d\udd39 3. <code>insert(index, element)</code> \u2013 Einf\u00fcgen an beliebiger Stelle","text":"<p>Setzt ein Element vor dem angegebenen Index.</p> <pre><code>farben = [\"rot\", \"blau\"]\nfarben.insert(1, \"gr\u00fcn\")\nprint(farben)  # ['rot', 'gr\u00fcn', 'blau']\n</code></pre> <p>\ud83e\udde0 Der Index bestimmt die Position vor dem neuen Element.</p>"},{"location":"python/listen/add/#4-operator-kurzform-von-extend","title":"\ud83d\udd39 4. <code>+=</code> Operator \u2013 Kurzform von <code>extend()</code>","text":"<pre><code>zahlen = [1, 2]\nzahlen += [3, 4]\nprint(zahlen)  # [1, 2, 3, 4]\n</code></pre>"},{"location":"python/listen/add/#unterschied-append-vs-extend","title":"\ud83d\udd38 Unterschied <code>append()</code> vs. <code>extend()</code>","text":"<pre><code>liste = [1, 2]\n\nliste.append([3, 4])\n# \u2192 [1, 2, [3, 4]]  \u2192 Liste in Liste!\n\nliste = [1, 2]\nliste.extend([3, 4])\n# \u2192 [1, 2, 3, 4]    \u2192 Flach eingef\u00fcgt\n</code></pre> Methode Ergebnis <code>append()</code> F\u00fcgt 1 Element (beliebigen Typs) an <code>extend()</code> F\u00fcgt mehrere Werte (aus Liste) an"},{"location":"python/listen/add/#tipps","title":"\ud83e\udde0 Tipps","text":"<ul> <li>Du kannst <code>.append()</code> auch in Schleifen nutzen:</li> </ul> <pre><code>ergebnis = []\nfor i in range(5):\n    ergebnis.append(i * 10)\n\nprint(ergebnis)  # [0, 10, 20, 30, 40]\n</code></pre> <ul> <li><code>.insert()</code> ist n\u00fctzlich f\u00fcr Sortier- oder Positionierungslogik</li> </ul>"},{"location":"python/listen/add/#zusammenfassung","title":"\u2705 Zusammenfassung","text":"Methode Zweck Beispiel <code>append(x)</code> H\u00e4ngt <code>x</code> als Element hinten an <code>liste.append(7)</code> <code>extend([...])</code> F\u00fcgt alle Werte einer Liste hinzu <code>liste.extend([8, 9])</code> <code>insert(i, x)</code> F\u00fcgt <code>x</code> an Position <code>i</code> ein <code>liste.insert(1, \"gr\u00fcn\")</code> <code>+=</code> Kurzform von <code>extend()</code> <code>liste += [10, 11]</code> <p>\ud83e\udde9 Alle Methoden ver\u00e4ndern die Liste direkt (in-place) und geben kein Ergebnis zur\u00fcck.</p>"},{"location":"python/listen/change/","title":"\ud83d\udd27 Listen ver\u00e4ndern (Change / Modify)","text":"<p>Listen in Python sind ver\u00e4nderbare (mutable) Datenstrukturen. Du kannst Elemente \u00e4ndern, einf\u00fcgen, anh\u00e4ngen oder l\u00f6schen \u2013 direkt und flexibel.</p>"},{"location":"python/listen/change/#1-einzelne-werte-andern","title":"\u270d\ufe0f 1. Einzelne Werte \u00e4ndern","text":"<p>Du kannst den Wert eines bestimmten Elements per Index \u00fcberschreiben:</p> <pre><code>farben = [\"rot\", \"gr\u00fcn\", \"blau\"]\nfarben[1] = \"gelb\"\nprint(farben)  # ['rot', 'gelb', 'blau']\n</code></pre>"},{"location":"python/listen/change/#2-mehrere-werte-mit-slicing-andern","title":"\ud83d\udd01 2. Mehrere Werte mit Slicing \u00e4ndern","text":"<pre><code>zahlen = [1, 2, 3, 4, 5]\nzahlen[1:4] = [20, 30, 40]\nprint(zahlen)  # [1, 20, 30, 40, 5]\n</code></pre> <p>Du kannst auch die Anzahl der Elemente \u00e4ndern \u2013 z.\u202fB. mehr oder weniger einsetzen als zuvor.</p>"},{"location":"python/listen/change/#3-elemente-hinzufugen","title":"\u2795 3. Elemente hinzuf\u00fcgen","text":"Methode Beschreibung <code>append(x)</code> F\u00fcgt <code>x</code> hinten an <code>insert(i, x)</code> F\u00fcgt <code>x</code> an Position <code>i</code> ein <code>extend([...])</code> F\u00fcgt mehrere Elemente hinzu"},{"location":"python/listen/change/#beispiele","title":"Beispiele:","text":"<pre><code>farben.append(\"orange\")\nfarben.insert(1, \"violett\")\nfarben.extend([\"wei\u00df\", \"schwarz\"])\n</code></pre> <p>\u27a1\ufe0f Ergebnis: <code>['rot', 'violett', 'gelb', 'blau', 'orange', 'wei\u00df', 'schwarz']</code></p>"},{"location":"python/listen/change/#4-elemente-loschen","title":"\u274c 4. Elemente l\u00f6schen","text":"Methode Beschreibung <code>remove(x)</code> Entfernt erstes Vorkommen von <code>x</code> <code>pop(i)</code> Entfernt Element bei Index <code>i</code> <code>del liste[i]</code> Entfernt mit <code>del</code> <code>clear()</code> Leert die ganze Liste"},{"location":"python/listen/change/#beispiele_1","title":"Beispiele:","text":"<pre><code>farben.remove(\"gelb\")\nfarben.pop(0)         # entfernt erstes Element\ndel farben[-1]        # entfernt letztes\nfarben.clear()        # l\u00f6scht alles\n</code></pre>"},{"location":"python/listen/change/#5-elemente-tauschen","title":"\u267b\ufe0f 5. Elemente tauschen","text":"<pre><code>farben = [\"blau\", \"rot\"]\nfarben[0], farben[1] = farben[1], farben[0]\nprint(farben)  # ['rot', 'blau']\n</code></pre>"},{"location":"python/listen/change/#6-reihenfolge-andern","title":"\ud83d\udd01 6. Reihenfolge \u00e4ndern","text":"<pre><code>farben = [\"gelb\", \"gr\u00fcn\", \"rot\"]\nfarben.reverse()     # ['rot', 'gr\u00fcn', 'gelb']\nfarben.sort()        # ['gelb', 'gr\u00fcn', 'rot']\nfarben.sort(reverse=True)  # ['rot', 'gr\u00fcn', 'gelb']\n</code></pre>"},{"location":"python/listen/change/#7-inhalte-ersetzen-mit-schleifen","title":"\ud83e\uddea 7. Inhalte ersetzen mit Schleifen","text":"<pre><code>zahlen = [1, 2, 3, 4, 5]\n\nfor i in range(len(zahlen)):\n    zahlen[i] = zahlen[i] * 10\n\nprint(zahlen)  # [10, 20, 30, 40, 50]\n</code></pre>"},{"location":"python/listen/change/#zusammenfassung","title":"\u2705 Zusammenfassung","text":"Aktion Methode/Beispiel Wert \u00e4ndern <code>liste[1] = \"neu\"</code> Bereich \u00e4ndern <code>liste[1:3] = [x, y]</code> Hinten anh\u00e4ngen <code>append(x)</code> Einf\u00fcgen an Stelle <code>insert(i, x)</code> Mehrere hinzuf\u00fcgen <code>extend([...])</code> L\u00f6schen nach Wert <code>remove(x)</code> L\u00f6schen nach Index <code>pop(i)</code>, <code>del liste[i]</code> Leeren <code>clear()</code> Tauschen <code>liste[a], liste[b] = liste[b], liste[a]</code> Umkehren <code>reverse()</code> Sortieren <code>sort()</code> / <code>sort(reverse=True)</code> <p>\ud83e\udde0 Tipp: Listen sind dynamisch \u2013 du kannst jederzeit gr\u00f6\u00dfer, kleiner oder komplett anders machen.</p>"},{"location":"python/listen/comprehension/","title":"\ud83e\udde0 List Comprehension","text":"<p>List Comprehension ist eine kompakte und elegante M\u00f6glichkeit, Listen zu erstellen oder umzuwandeln, ohne eine klassische Schleife zu verwenden.</p> <p>\ud83d\udd25 Schnell, lesbar und sehr m\u00e4chtig \u2013 ideal f\u00fcr viele typische Aufgaben mit Listen!</p>"},{"location":"python/listen/comprehension/#grundstruktur","title":"\ud83e\udde9 Grundstruktur","text":"<pre><code>[ausdruck for element in iterable]\n</code></pre>"},{"location":"python/listen/comprehension/#beispiel","title":"Beispiel:","text":"<pre><code>zahlen = [1, 2, 3, 4]\nquadrate = [x * x for x in zahlen]\nprint(quadrate)  # [1, 4, 9, 16]\n</code></pre>"},{"location":"python/listen/comprehension/#vorteile","title":"\u2705 Vorteile","text":"<ul> <li>Weniger Code</li> <li>Lesbarer als klassische Schleifen</li> <li>Schneller in der Ausf\u00fchrung</li> <li>Einfach mit Bedingungen kombinierbar</li> </ul>"},{"location":"python/listen/comprehension/#mit-bedingung-if","title":"\ud83d\udd39 Mit Bedingung (<code>if</code>)","text":"<pre><code>gerade = [x for x in range(10) if x % 2 == 0]\nprint(gerade)  # [0, 2, 4, 6, 8]\n</code></pre> <p>\u27a1\ufe0f Nur gerade Zahlen aufnehmen</p>"},{"location":"python/listen/comprehension/#mit-ifelse-ternarer-ausdruck","title":"\ud83d\udd39 Mit <code>if</code>\u2013<code>else</code> (tern\u00e4rer Ausdruck)","text":"<pre><code>werte = [x if x % 2 == 0 else -x for x in range(5)]\nprint(werte)  # [0, -1, 2, -3, 4]\n</code></pre> <p>\u27a1\ufe0f Bedingte Verarbeitung f\u00fcr jedes Element</p>"},{"location":"python/listen/comprehension/#strings-verarbeiten","title":"\ud83d\udd39 Strings verarbeiten","text":"<pre><code>text = \"Python\"\nbuchstaben = [buchstabe.upper() for buchstabe in text]\nprint(buchstaben)  # ['P', 'Y', 'T', 'H', 'O', 'N']\n</code></pre>"},{"location":"python/listen/comprehension/#verschachtelte-schleifen","title":"\ud83d\udd39 Verschachtelte Schleifen","text":"<pre><code>kombis = [(x, y) for x in [1, 2] for y in [3, 4]]\nprint(kombis)  # [(1, 3), (1, 4), (2, 3), (2, 4)]\n</code></pre> <p>\u27a1\ufe0f Alle Kombinationen erzeugen</p>"},{"location":"python/listen/comprehension/#mit-funktionen-kombinieren","title":"\ud83d\udd39 Mit Funktionen kombinieren","text":"<pre><code>def quadrat(x):\n    return x * x\n\nliste = [quadrat(n) for n in range(5)]\nprint(liste)  # [0, 1, 4, 9, 16]\n</code></pre>"},{"location":"python/listen/comprehension/#mit-dictionary-set-comprehension","title":"\ud83d\udd39 Mit Dictionary &amp; Set Comprehension","text":"Typ Beispiel List <code>[x*2 for x in liste]</code> Set <code>{x*2 for x in liste}</code> Dictionary <code>{x: x**2 for x in range(5)}</code>"},{"location":"python/listen/comprehension/#mit-enumerate-bedingungen","title":"\ud83d\udd39 Mit Enumerate &amp; Bedingungen","text":"<pre><code>daten = [\"\", \"Text\", \"\", \"Wert\"]\nnicht_leer = [x for i, x in enumerate(daten) if x]\nprint(nicht_leer)  # ['Text', 'Wert']\n</code></pre>"},{"location":"python/listen/comprehension/#vorsicht-bei-komplexen-ausdrucken","title":"\u26a0\ufe0f Vorsicht bei komplexen Ausdr\u00fccken","text":"<p>List Comprehension sollte lesbar bleiben!</p> <pre><code># Zu kompliziert \u2192 besser normale Schleife!\n</code></pre>"},{"location":"python/listen/comprehension/#zusammenfassung","title":"\ud83e\udde0 Zusammenfassung","text":"M\u00f6glichkeit Beispiel Basis <code>[x for x in range(10)]</code> Mit Bedingung <code>[x for x in liste if x &gt; 0]</code> Mit if\u2013else <code>[x if x &gt; 0 else 0 for x in liste]</code> Mit verschachtelter Schleife <code>[(x, y) for x in a for y in b]</code> Set / Dict <code>{x for x in liste}</code>, <code>{k: v for ...}</code> <p>\ud83d\udca1 List Comprehensions sind perfekt f\u00fcr einfache Umwandlungen \u2013 spare dir unn\u00f6tige Schleifen!</p>"},{"location":"python/listen/copy/","title":"\ud83d\udccb Listen kopieren (<code>copy()</code> &amp; Co.)","text":"<p>Beim Arbeiten mit Listen in Python ist es wichtig zu wissen: Eine direkte Zuweisung kopiert NICHT die Liste, sondern nur die Referenz! \u00c4nderungen wirken sich dann auf beide aus.</p>"},{"location":"python/listen/copy/#falsche-kopie-referenz","title":"\ud83d\udeab Falsche Kopie (Referenz)","text":"<pre><code>original = [1, 2, 3]\nkopie = original\n\nkopie[0] = 99\nprint(original)  # [99, 2, 3] \u2757\ufe0f\n</code></pre> <p>\u27a1\ufe0f <code>kopie</code> zeigt auf dieselbe Liste wie <code>original</code></p>"},{"location":"python/listen/copy/#echte-kopie-einer-liste","title":"\u2705 Echte Kopie einer Liste","text":""},{"location":"python/listen/copy/#1-listcopy-flache-kopie-ab-python-33","title":"\ud83d\udd39 1. <code>list.copy()</code> \u2013 Flache Kopie (ab Python 3.3)","text":"<pre><code>original = [1, 2, 3]\nkopie = original.copy()\n\nkopie[0] = 99\nprint(original)  # [1, 2, 3] \u2705\n</code></pre>"},{"location":"python/listen/copy/#2-slicing","title":"\ud83d\udd39 2. Slicing <code>[:]</code>","text":"<pre><code>original = [\"a\", \"b\", \"c\"]\nkopie = original[:]\n\nkopie.append(\"d\")\nprint(original)  # ['a', 'b', 'c']\nprint(kopie)     # ['a', 'b', 'c', 'd']\n</code></pre>"},{"location":"python/listen/copy/#3-list-konstruktor","title":"\ud83d\udd39 3. <code>list()</code> Konstruktor","text":"<pre><code>original = [10, 20]\nkopie = list(original)\n</code></pre>"},{"location":"python/listen/copy/#4-copycopy-standardmodul","title":"\ud83d\udd39 4. <code>copy.copy()</code> \u2013 Standardmodul","text":"<pre><code>import copy\nkopie = copy.copy(original)\n</code></pre> <p>\u27a1\ufe0f Auch flache Kopie \u2013 \u00e4hnlich wie <code>list.copy()</code></p>"},{"location":"python/listen/copy/#flache-vs-tiefe-kopie","title":"\ud83e\udde0 Flache vs. Tiefe Kopie","text":""},{"location":"python/listen/copy/#flache-kopie","title":"Flache Kopie:","text":"<p>Nur \u00e4u\u00dfere Liste wird kopiert \u2013 verschachtelte Objekte (z.\u202fB. Listen in Listen) bleiben verlinkt:</p> <pre><code>liste = [[1, 2], [3, 4]]\nkopie = liste.copy()\nkopie[0][0] = 99\n\nprint(liste)  # [[99, 2], [3, 4]] \u2757\n</code></pre>"},{"location":"python/listen/copy/#tiefe-kopie-deep-copy","title":"Tiefe Kopie (deep copy):","text":"<pre><code>import copy\nliste = [[1, 2], [3, 4]]\nkopie = copy.deepcopy(liste)\n\nkopie[0][0] = 99\nprint(liste)  # [[1, 2], [3, 4]] \u2705\n</code></pre>"},{"location":"python/listen/copy/#wann-welche-methode","title":"\ud83e\uddea Wann welche Methode?","text":"Methode Art Besonderheiten <code>list.copy()</code> Flach Einfach, schnell, ab Python 3.3 <code>[:]</code> Flach Funktioniert immer <code>list()</code> Flach Flexibel bei iterierbaren Objekten <code>copy.copy()</code> Flach Aus dem <code>copy</code>-Modul <code>copy.deepcopy()</code> Tief Kopiert auch verschachtelte Objekte"},{"location":"python/listen/copy/#best-practice","title":"\u2705 Best Practice","text":"<ul> <li>Einfache Listen: <code>list.copy()</code> oder <code>[:]</code></li> <li>Verschachtelte Listen / Objekte: <code>copy.deepcopy()</code></li> </ul>"},{"location":"python/listen/copy/#bonus-unterschied-zu","title":"\ud83e\udde0 Bonus: Unterschied zu <code>=</code>","text":"<pre><code>a = [1, 2]\nb = a       # KEINE Kopie! Nur Alias\nc = a[:]    # Echte flache Kopie\n</code></pre> <p>Merke: Nur bei expliziter Kopie werden zwei unabh\u00e4ngige Listen erstellt!</p>"},{"location":"python/listen/einf%C3%BChrung/","title":"\ud83d\udcda Einf\u00fchrung in Listen","text":"<p>Listen sind eine der wichtigsten und meistgenutzten Datenstrukturen in Python. Sie erm\u00f6glichen es dir, mehrere Werte in einer geordneten Sequenz zu speichern \u2013 egal ob Zahlen, Texte oder andere Objekte.</p>"},{"location":"python/listen/einf%C3%BChrung/#was-ist-eine-liste","title":"\ud83e\udde9 Was ist eine Liste?","text":"<p>Eine Liste ist eine ver\u00e4nderbare Sammlung von Werten (Elementen), die du in eckige Klammern <code>[]</code> schreibst.</p> <pre><code>meine_liste = [1, 2, 3, 4, 5]\nnamen = [\"Anna\", \"Ben\", \"Clara\"]\ngemischt = [42, \"Text\", True, 3.14]\n</code></pre> <ul> <li>Reihenfolge bleibt erhalten</li> <li>Du kannst beliebige Datentypen mischen</li> <li>Du kannst Eintr\u00e4ge ver\u00e4ndern, hinzuf\u00fcgen, l\u00f6schen</li> </ul>"},{"location":"python/listen/einf%C3%BChrung/#auf-einzelne-werte-zugreifen","title":"\ud83d\udd0d Auf einzelne Werte zugreifen","text":"<pre><code>zahlen = [10, 20, 30]\n\nprint(zahlen[0])  # \u2192 10\nprint(zahlen[2])  # \u2192 30\n</code></pre> <p>Achtung: Der Index beginnt bei 0</p>"},{"location":"python/listen/einf%C3%BChrung/#durch-listen-iterieren","title":"\ud83d\udd01 Durch Listen iterieren","text":"<pre><code>for name in [\"Tom\", \"Lena\", \"Ali\"]:\n    print(\"Hallo\", name)\n</code></pre>"},{"location":"python/listen/einf%C3%BChrung/#listen-verschachteln-nested-lists","title":"\ud83e\uddf1 Listen verschachteln (Nested Lists)","text":"<p>Listen k\u00f6nnen andere Listen enthalten:</p> <pre><code>matrix = [[1, 2], [3, 4]]\nprint(matrix[1][0])  # \u2192 3\n</code></pre>"},{"location":"python/listen/einf%C3%BChrung/#neue-werte-hinzufugen","title":"\u2795 Neue Werte hinzuf\u00fcgen","text":"Methode Beschreibung <code>append(x)</code> H\u00e4ngt ein Element hinten an <code>insert(i, x)</code> F\u00fcgt an Position <code>i</code> ein <code>extend([...])</code> F\u00fcgt mehrere Elemente an <pre><code>liste = [1, 2]\nliste.append(3)       # [1, 2, 3]\nliste.insert(1, 9)    # [1, 9, 2, 3]\nliste.extend([4, 5])  # [1, 9, 2, 3, 4, 5]\n</code></pre>"},{"location":"python/listen/einf%C3%BChrung/#werte-entfernen","title":"\u274c Werte entfernen","text":"Methode Beschreibung <code>remove(x)</code> Entfernt den ersten Treffer von <code>x</code> <code>pop(i)</code> Entfernt und gibt Wert bei Index <code>i</code> zur\u00fcck <code>clear()</code> Leert die Liste komplett <pre><code>liste = [1, 2, 3, 2]\nliste.remove(2)  # \u2192 entfernt das erste `2`\nliste.pop()      # \u2192 entfernt das letzte Element\nliste.clear()    # \u2192 []\n</code></pre>"},{"location":"python/listen/einf%C3%BChrung/#werte-andern","title":"\ud83d\udd04 Werte \u00e4ndern","text":"<pre><code>farben = [\"rot\", \"gr\u00fcn\", \"blau\"]\nfarben[1] = \"gelb\"  # [\"rot\", \"gelb\", \"blau\"]\n</code></pre>"},{"location":"python/listen/einf%C3%BChrung/#prufen-ob-etwas-enthalten-ist","title":"\ud83d\udd0d Pr\u00fcfen, ob etwas enthalten ist","text":"<pre><code>if \"blau\" in farben:\n    print(\"Blau ist vorhanden!\")\n</code></pre>"},{"location":"python/listen/einf%C3%BChrung/#lange-zahlen","title":"\ud83e\uddea L\u00e4nge &amp; Z\u00e4hlen","text":"<pre><code>len(farben)           # Anzahl der Elemente\nfarben.count(\"rot\")   # Wie oft kommt \"rot\" vor?\n</code></pre>"},{"location":"python/listen/einf%C3%BChrung/#listen-kopieren","title":"\ud83d\udce6 Listen kopieren","text":"<pre><code>kopie = farben.copy()\n</code></pre> <p>Kein Alias, sondern echte Kopie!</p>"},{"location":"python/listen/einf%C3%BChrung/#sortieren-umkehren","title":"\ud83d\udd00 Sortieren &amp; Umkehren","text":"<pre><code>zahlen = [3, 1, 4]\nzahlen.sort()      # [1, 3, 4]\nzahlen.reverse()   # [4, 3, 1]\n</code></pre> <p>Achtung: <code>.sort()</code> ver\u00e4ndert die Liste!</p>"},{"location":"python/listen/einf%C3%BChrung/#zusammenfassung","title":"\u2705 Zusammenfassung","text":"Aktion Methode/Beispiel Erstellen <code>[]</code>, <code>list()</code> Zugriff <code>liste[0]</code>, Schleife Hinzuf\u00fcgen <code>append()</code>, <code>insert()</code>, <code>extend()</code> Entfernen <code>remove()</code>, <code>pop()</code>, <code>clear()</code> Pr\u00fcfen <code>\"x\" in liste</code> L\u00e4nge <code>len(liste)</code> Sortieren <code>sort()</code>, <code>reverse()</code> Kopieren <code>copy()</code> <p>\ud83e\udde0 Tipp: Listen sind ver\u00e4nderbar (mutable) \u2013 das unterscheidet sie z.\u202fB. von Tuples.</p>"},{"location":"python/listen/join/","title":"\ud83d\udd17 Listen mit <code>join()</code> verketten","text":"<p>Mit der Methode <code>str.join()</code> kannst du eine Liste von Strings zu einem einzigen Zeichenkettentext zusammenf\u00fcgen.</p> <p>\u2705 Ideal, wenn du z.\u202fB. W\u00f6rter zu einem Satz machen m\u00f6chtest.</p>"},{"location":"python/listen/join/#grundprinzip","title":"\ud83e\udde9 Grundprinzip","text":"<pre><code>teile = [\"Hallo\", \"Welt\"]\ntext = \" \".join(teile)\nprint(text)  # Hallo Welt\n</code></pre>"},{"location":"python/listen/join/#aufbau","title":"Aufbau:","text":"<pre><code>\"Trenner\".join(liste)\n</code></pre> <ul> <li><code>\"Trenner\"</code> ist ein String, der zwischen den Listenelementen eingef\u00fcgt wird.</li> <li>Alle Elemente in der Liste m\u00fcssen Strings sein!</li> </ul>"},{"location":"python/listen/join/#beispiele","title":"\ud83e\uddea Beispiele","text":""},{"location":"python/listen/join/#worter-mit-leerzeichen-verbinden","title":"\ud83d\udd39 W\u00f6rter mit Leerzeichen verbinden","text":"<pre><code>w\u00f6rter = [\"Python\", \"macht\", \"Spa\u00df\"]\nsatz = \" \".join(w\u00f6rter)\nprint(satz)  # Python macht Spa\u00df\n</code></pre>"},{"location":"python/listen/join/#worter-mit-komma-trennen","title":"\ud83d\udd39 W\u00f6rter mit Komma trennen","text":"<pre><code>liste = [\"Apfel\", \"Banane\", \"Kirsche\"]\ntext = \", \".join(liste)\nprint(text)  # Apfel, Banane, Kirsche\n</code></pre>"},{"location":"python/listen/join/#zeilenumbruche-erzeugen","title":"\ud83d\udd39 Zeilenumbr\u00fcche erzeugen","text":"<pre><code>zeilen = [\"Zeile 1\", \"Zeile 2\", \"Zeile 3\"]\nprint(\"\\n\".join(zeilen))\n</code></pre> <p>\u27a1\ufe0f Gibt aus:</p> <pre><code>Zeile 1  \nZeile 2  \nZeile 3\n</code></pre>"},{"location":"python/listen/join/#achtung-nur-strings-erlaubt","title":"\u2757 Achtung: Nur Strings erlaubt","text":"<pre><code>zahlen = [1, 2, 3]\n\" \".join(zahlen)  # \u274c TypeError!\n</code></pre> <p>\ud83d\udd27 L\u00f6sung: zuerst in Strings umwandeln:</p> <pre><code>zahlen = [1, 2, 3]\ntext = \" - \".join(str(z) for z in zahlen)\nprint(text)  # 1 - 2 - 3\n</code></pre>"},{"location":"python/listen/join/#mit-anderen-datentypen-kombinieren","title":"\ud83d\udd04 Mit anderen Datentypen kombinieren","text":"<pre><code>mixed = [\"Name:\", \"Anna\", str(30)]\nresultat = \" \".join(mixed)\nprint(resultat)  # Name: Anna 30\n</code></pre>"},{"location":"python/listen/join/#zusammenfassung","title":"\u2705 Zusammenfassung","text":"Aufgabe Codebeispiel W\u00f6rter zu Satz <code>\" \".join([\"Ich\", \"lerne\", \"Python\"])</code> Kommagetrennte Liste <code>\", \".join(fruits)</code> Neue Zeile pro Element <code>\"\\n\".join(liste)</code> Join mit Zahlen <code>\" - \".join(str(z) for z in zahlen)</code> <p>\ud83d\udca1 <code>join()</code> ist effizienter und sauberer als viele einzelne Verkettungen mit <code>+</code>.</p>"},{"location":"python/listen/loop/","title":"\ud83d\udd01 Listen mit Schleifen durchlaufen","text":"<p>Listen enthalten oft mehrere Elemente \u2013 z.\u202fB. Zahlen, Strings oder Objekte. Mit Schleifen kannst du jedes Element einzeln verarbeiten.</p>"},{"location":"python/listen/loop/#1-for-schleife-der-standardweg","title":"\ud83d\udd39 1. <code>for</code>-Schleife \u2013 der Standardweg","text":"<pre><code>namen = [\"Anna\", \"Ben\", \"Clara\"]\n\nfor name in namen:\n    print(\"Hallo\", name)\n</code></pre> <p>\u27a1\ufe0f Gibt aus:</p> <pre><code>Hallo Anna\nHallo Ben\nHallo Clara\n</code></pre> <ul> <li>Einfachster und empfohlener Weg</li> <li>L\u00e4uft automatisch durch alle Elemente</li> </ul>"},{"location":"python/listen/loop/#2-for-mit-rangelen-fur-index-zugriff","title":"\ud83d\udd39 2. <code>for</code> mit <code>range(len(...))</code> \u2013 f\u00fcr Index-Zugriff","text":"<pre><code>farben = [\"rot\", \"blau\", \"gr\u00fcn\"]\n\nfor i in range(len(farben)):\n    print(f\"Farbe an Position {i}: {farben[i]}\")\n</code></pre> <p>\u27a1\ufe0f N\u00fctzlich, wenn du den Index brauchst.</p>"},{"location":"python/listen/loop/#3-enumerate-index-wert-gemeinsam","title":"\ud83d\udd39 3. <code>enumerate()</code> \u2013 Index + Wert gemeinsam","text":"<pre><code>zahlen = [100, 200, 300]\n\nfor index, wert in enumerate(zahlen):\n    print(f\"Index {index} \u2192 {wert}\")\n</code></pre> <p>\u27a1\ufe0f Sauberer als <code>range(len(...))</code></p>"},{"location":"python/listen/loop/#4-while-schleife","title":"\ud83d\udd39 4. <code>while</code>-Schleife","text":"<pre><code>tiere = [\"Hund\", \"Katze\", \"Maus\"]\ni = 0\n\nwhile i &lt; len(tiere):\n    print(tiere[i])\n    i += 1\n</code></pre> <p>Verwende <code>while</code> nur, wenn du flexibler z\u00e4hlen oder vorzeitig abbrechen willst.</p>"},{"location":"python/listen/loop/#5-list-comprehension-elegant-kompakt","title":"\ud83d\udd39 5. <code>list comprehension</code> \u2013 elegant &amp; kompakt","text":"<pre><code>zahlen = [1, 2, 3, 4]\nquadrate = [x * x for x in zahlen]\nprint(quadrate)  # [1, 4, 9, 16]\n</code></pre> <p>Ideal f\u00fcr einfache Operationen mit R\u00fcckgabe</p>"},{"location":"python/listen/loop/#6-schleife-mit-bedingung","title":"\ud83d\udd39 6. Schleife mit Bedingung","text":"<pre><code>zahlen = [5, 10, 15, 20]\n\nfor z in zahlen:\n    if z &gt; 10:\n        print(\"Gr\u00f6\u00dfer als 10:\", z)\n</code></pre> <p>\u27a1\ufe0f Kombinierbar mit <code>if</code>, <code>continue</code>, <code>break</code> usw.</p>"},{"location":"python/listen/loop/#7-break-continue-und-return","title":"\ud83d\udd39 7. <code>break</code>, <code>continue</code> und <code>return</code>","text":""},{"location":"python/listen/loop/#break-schleife-abbrechen","title":"<code>break</code> \u2013 Schleife abbrechen","text":"<pre><code>for x in [1, 2, 3, 4]:\n    if x == 3:\n        break\n    print(x)  # 1, 2\n</code></pre>"},{"location":"python/listen/loop/#continue-aktuellen-durchlauf-uberspringen","title":"<code>continue</code> \u2013 aktuellen Durchlauf \u00fcberspringen","text":"<pre><code>for x in [1, 2, 3, 4]:\n    if x == 2:\n        continue\n    print(x)  # 1, 3, 4\n</code></pre>"},{"location":"python/listen/loop/#return-funktion-verlassen-nur-in-funktionen","title":"<code>return</code> \u2013 Funktion verlassen (nur in Funktionen!)","text":"<pre><code>def finde_zahl(liste):\n    for x in liste:\n        if x == 7:\n            return True\n    return False\n</code></pre>"},{"location":"python/listen/loop/#was-kann-man-loopen","title":"\ud83d\udd39 Was kann man loopen?","text":"Typ Funktioniert mit <code>for</code>? Liste \u2705 String \u2705 Tuple \u2705 Set \u2705 (reihenfolgefrei) Dictionary \u2705 (Schl\u00fcssel werden gelistet) <pre><code># Dictionary\ndaten = {\"name\": \"Max\", \"alter\": 30}\n\nfor key in daten:\n    print(key, \"\u2192\", daten[key])\n</code></pre>"},{"location":"python/listen/loop/#zusammenfassung","title":"\u2705 Zusammenfassung","text":"Technik Vorteil <code>for element in liste</code> Einfachster Weg <code>for i in range(len())</code> Index-Zugriff <code>enumerate()</code> Index + Wert in einem Schritt <code>while</code> Flexible Bedingungen List Comprehension Kompakt + schnell <code>break</code>, <code>continue</code> Kontrolle \u00fcber Schleifenfluss <p>\ud83d\udca1 F\u00fcr 95\u202f% der F\u00e4lle ist <code>for element in liste:</code> der beste und einfachste Weg!</p>"},{"location":"python/listen/methoden/","title":"\ud83e\uddf0 Liste: Methoden &amp; Funktionen","text":"<p>Python-Listen (<code>list</code>) bieten viele eingebaute Methoden, mit denen man Inhalte \u00e4ndern, sortieren, suchen, l\u00f6schen, hinzuf\u00fcgen oder kopieren kann.</p>"},{"location":"python/listen/methoden/#ubersicht-der-wichtigsten-methoden","title":"\ud83d\udd22 \u00dcbersicht der wichtigsten Methoden","text":"Methode Beschreibung <code>.append()</code> Element hinten anh\u00e4ngen <code>.insert()</code> Element an Position einf\u00fcgen <code>.extend()</code> Liste mit anderen Werten erweitern <code>.remove()</code> Element (nach Wert) l\u00f6schen <code>.pop()</code> Element nach Index l\u00f6schen und zur\u00fcckgeben <code>.clear()</code> Liste komplett leeren <code>.index()</code> Index eines Wertes ermitteln <code>.count()</code> Wie oft kommt ein Wert vor? <code>.sort()</code> Liste in-place sortieren <code>.sorted()</code> Neue sortierte Liste zur\u00fcckgeben <code>.reverse()</code> Liste umdrehen (in-place) <code>.copy()</code> Flache Kopie erstellen"},{"location":"python/listen/methoden/#append-am-ende-anhangen","title":"\u2795 <code>.append()</code> \u2013 Am Ende anh\u00e4ngen","text":"<pre><code>zahlen = [1, 2]\nzahlen.append(3)\nprint(zahlen)  # [1, 2, 3]\n</code></pre>"},{"location":"python/listen/methoden/#insertindex-wert-an-position-einfugen","title":"\ud83d\udd27 <code>.insert(index, wert)</code> \u2013 An Position einf\u00fcgen","text":"<pre><code>farben = [\"rot\", \"blau\"]\nfarben.insert(1, \"gr\u00fcn\")\nprint(farben)  # ['rot', 'gr\u00fcn', 'blau']\n</code></pre>"},{"location":"python/listen/methoden/#extenditerable-liste-erweitern","title":"\u2795 <code>.extend(iterable)</code> \u2013 Liste erweitern","text":"<pre><code>a = [1, 2]\nb = [3, 4]\na.extend(b)\nprint(a)  # [1, 2, 3, 4]\n</code></pre>"},{"location":"python/listen/methoden/#removewert-erstes-vorkommen-loschen","title":"\u274c <code>.remove(wert)</code> \u2013 Erstes Vorkommen l\u00f6schen","text":"<pre><code>tiere = [\"Katze\", \"Hund\", \"Katze\"]\ntiere.remove(\"Katze\")\nprint(tiere)  # ['Hund', 'Katze']\n</code></pre> <p>\u2757 Gibt Fehler, wenn Wert nicht existiert.</p>"},{"location":"python/listen/methoden/#popindex-element-loschen-und-zuruckgeben","title":"\ud83c\udfaf <code>.pop([index])</code> \u2013 Element l\u00f6schen und zur\u00fcckgeben","text":"<pre><code>zahlen = [5, 6, 7]\nletzter = zahlen.pop()\nprint(letzter)  # 7\n</code></pre> <p>Mit Index:</p> <pre><code>zahlen.pop(0)  # entfernt erstes Element\n</code></pre>"},{"location":"python/listen/methoden/#clear-alles-loschen","title":"\ud83e\uddfc <code>.clear()</code> \u2013 Alles l\u00f6schen","text":"<pre><code>daten = [1, 2, 3]\ndaten.clear()\nprint(daten)  # []\n</code></pre>"},{"location":"python/listen/methoden/#indexwert-ersten-index-ermitteln","title":"\ud83d\udd0d <code>.index(wert)</code> \u2013 Ersten Index ermitteln","text":"<pre><code>zahlen = [4, 5, 6]\ni = zahlen.index(5)\nprint(i)  # 1\n</code></pre> <p>\u2757 Fehler, wenn Wert nicht existiert.</p>"},{"location":"python/listen/methoden/#countwert-anzahl-eines-wertes-zahlen","title":"\ud83d\udd22 <code>.count(wert)</code> \u2013 Anzahl eines Wertes z\u00e4hlen","text":"<pre><code>werte = [1, 1, 2, 3, 1]\nanzahl = werte.count(1)\nprint(anzahl)  # 3\n</code></pre>"},{"location":"python/listen/methoden/#sort-liste-sortieren-andert-original","title":"\ud83d\udcca <code>.sort()</code> \u2013 Liste sortieren (\u00e4ndert Original!)","text":"<pre><code>zahlen = [3, 1, 4]\nzahlen.sort()\nprint(zahlen)  # [1, 3, 4]\n</code></pre> <p>Absteigend:</p> <pre><code>zahlen.sort(reverse=True)\n</code></pre>"},{"location":"python/listen/methoden/#sortedliste-neue-sortierte-liste","title":"\ud83c\udd95 <code>sorted(liste)</code> \u2013 Neue sortierte Liste","text":"<pre><code>zahlen = [3, 1, 2]\nneu = sorted(zahlen)\nprint(zahlen)  # [3, 1, 2]\nprint(neu)     # [1, 2, 3]\n</code></pre>"},{"location":"python/listen/methoden/#reverse-reihenfolge-umdrehen","title":"\ud83d\udd01 <code>.reverse()</code> \u2013 Reihenfolge umdrehen","text":"<pre><code>buchstaben = [\"a\", \"b\", \"c\"]\nbuchstaben.reverse()\nprint(buchstaben)  # ['c', 'b', 'a']\n</code></pre>"},{"location":"python/listen/methoden/#copy-neue-kopie-erstellen","title":"\ud83e\uddfe <code>.copy()</code> \u2013 Neue Kopie erstellen","text":"<pre><code>original = [1, 2, 3]\nkopie = original.copy()\nkopie.append(4)\nprint(original)  # [1, 2, 3]\n</code></pre>"},{"location":"python/listen/methoden/#zusammenfassung-als-cheatsheet","title":"\u2705 Zusammenfassung als Cheatsheet","text":"Aufgabe Methode Element anh\u00e4ngen <code>liste.append(wert)</code> Element an Position einf\u00fcgen <code>liste.insert(index, wert)</code> Zwei Listen kombinieren <code>liste.extend(weitere_liste)</code> Element l\u00f6schen (nach Wert) <code>liste.remove(wert)</code> Element l\u00f6schen (Index) <code>liste.pop([index])</code> Liste komplett leeren <code>liste.clear()</code> Vorkommen z\u00e4hlen <code>liste.count(wert)</code> Index finden <code>liste.index(wert)</code> Liste sortieren (in-place) <code>liste.sort()</code> Sortierte Kopie zur\u00fcckgeben <code>sorted(liste)</code> Reihenfolge umdrehen <code>liste.reverse()</code> Neue Kopie erstellen <code>liste.copy()</code> <p>\ud83d\udca1 Tipp: Viele dieser Methoden \u00e4ndern die Original-Liste. Wenn du die alte Version behalten m\u00f6chtest, nutze <code>.copy()</code> oder <code>sorted()</code>!</p>"},{"location":"python/listen/remove/","title":"\u274c Elemente aus Listen entfernen","text":"<p>Listen sind ver\u00e4nderbar (mutable) \u2013 du kannst gezielt einzelne oder mehrere Elemente l\u00f6schen. Python bietet verschiedene Methoden zum Entfernen von Werten, Indexpositionen oder ganzen Listen.</p>"},{"location":"python/listen/remove/#1-remove-erstes-vorkommen-eines-wertes-loschen","title":"\ud83d\udd39 1. <code>remove()</code> \u2013 Erstes Vorkommen eines Wertes l\u00f6schen","text":"<pre><code>farben = [\"rot\", \"blau\", \"gr\u00fcn\", \"blau\"]\nfarben.remove(\"blau\")\nprint(farben)  # ['rot', 'gr\u00fcn', 'blau']\n</code></pre> <ul> <li>Entfernt nur das erste Vorkommen</li> <li>Gibt Fehler bei nicht vorhandenem Wert:</li> </ul> <pre><code>farben.remove(\"gelb\")  # \u274c ValueError\n</code></pre>"},{"location":"python/listen/remove/#2-popindex-element-nach-index-entfernen","title":"\ud83d\udd39 2. <code>pop(index)</code> \u2013 Element nach Index entfernen","text":"<pre><code>zahlen = [10, 20, 30]\nzahlen.pop(1)   # entfernt 20\nprint(zahlen)   # [10, 30]\n</code></pre> <ul> <li>Gibt das gel\u00f6schte Element zur\u00fcck</li> <li>Ohne Argument \u2192 entfernt letztes Element:</li> </ul> <pre><code>zahlen.pop()  # entfernt 30\n</code></pre>"},{"location":"python/listen/remove/#3-del-beliebige-stelle-oder-ganz-loschen","title":"\ud83d\udd39 3. <code>del</code> \u2013 Beliebige Stelle oder ganz l\u00f6schen","text":""},{"location":"python/listen/remove/#ein-element-loschen","title":"Ein Element l\u00f6schen:","text":"<pre><code>tiere = [\"Hund\", \"Katze\", \"Maus\"]\ndel tiere[1]\nprint(tiere)  # ['Hund', 'Maus']\n</code></pre>"},{"location":"python/listen/remove/#bereich-loschen-slicing","title":"Bereich l\u00f6schen (Slicing):","text":"<pre><code>zahlen = [1, 2, 3, 4, 5]\ndel zahlen[1:4]\nprint(zahlen)  # [1, 5]\n</code></pre>"},{"location":"python/listen/remove/#ganze-liste-loschen","title":"Ganze Liste l\u00f6schen:","text":"<pre><code>del zahlen\n</code></pre> <p>Danach ist <code>zahlen</code> nicht mehr definiert.</p>"},{"location":"python/listen/remove/#4-clear-liste-vollstandig-leeren","title":"\ud83d\udd39 4. <code>clear()</code> \u2013 Liste vollst\u00e4ndig leeren","text":"<pre><code>daten = [1, 2, 3]\ndaten.clear()\nprint(daten)  # []\n</code></pre> <ul> <li>Liste bleibt erhalten, ist aber leer</li> </ul>"},{"location":"python/listen/remove/#5-filter-bedingte-entfernung","title":"\ud83d\udd39 5. <code>filter()</code> \u2013 Bedingte Entfernung","text":"<p>Beispiel: alle Zahlen gr\u00f6\u00dfer als 10 behalten</p> <pre><code>werte = [5, 10, 15, 20]\nneu = list(filter(lambda x: x &gt; 10, werte))\nprint(neu)  # [15, 20]\n</code></pre>"},{"location":"python/listen/remove/#was-ist-wann-sinnvoll","title":"\ud83e\udde0 Was ist wann sinnvoll?","text":"Methode Verwendung <code>remove(x)</code> Wenn du nach Wert l\u00f6schen willst <code>pop(i)</code> Wenn du nach Position l\u00f6schen willst <code>del</code> Flexibel, auch f\u00fcr Slicing &amp; komplett <code>clear()</code> Leere die ganze Liste <code>filter()</code> Bedingte L\u00f6schung"},{"location":"python/listen/remove/#vorsicht-bei-loops","title":"\ud83d\udeab Vorsicht bei Loops","text":"<p>Nicht in Schleifen direkt <code>.remove()</code> verwenden:</p> <pre><code># Schlechte Praxis!\nfarben = [\"rot\", \"blau\", \"rot\"]\nfor f in farben:\n    if f == \"rot\":\n        farben.remove(f)\n\nprint(farben)  # ['blau'] \u2013 \u00fcberspringt ein \"rot\"\n</code></pre> <p>\ud83d\udee0 Besser mit List Comprehension oder Kopie arbeiten.</p>"},{"location":"python/listen/remove/#zusammenfassung","title":"\u2705 Zusammenfassung","text":"Methode Beschreibung <code>remove(x)</code> Entfernt erstes Vorkommen von <code>x</code> <code>pop(i)</code> Entfernt Element bei Index <code>i</code> <code>pop()</code> Entfernt letztes Element <code>del liste[i]</code> Entfernt Element an Index <code>i</code> <code>del liste[:]</code> Entfernt alle Elemente (auch <code>clear()</code>) <code>clear()</code> Leert die Liste <code>filter()</code> Neue Liste mit gew\u00fcnschten Elementen <p>\ud83d\udca1 Alle Methoden \u2013 au\u00dfer <code>filter()</code> \u2013 \u00e4ndern die Liste direkt.</p>"},{"location":"python/listen/sort/","title":"\ud83d\udd22 Listen sortieren (<code>sort()</code> &amp; <code>sorted()</code>)","text":"<p>Python bietet zwei Hauptmethoden, um Listen zu sortieren: \ud83d\udd39 <code>list.sort()</code> \u2013 ver\u00e4ndert die Liste direkt \ud83d\udd39 <code>sorted()</code> \u2013 erstellt eine neue, sortierte Liste</p>"},{"location":"python/listen/sort/#beispiel-einfache-sortierung","title":"\ud83e\udde9 Beispiel: Einfache Sortierung","text":"<pre><code>zahlen = [5, 2, 9, 1]\nzahlen.sort()\nprint(zahlen)  # [1, 2, 5, 9]\n</code></pre> <ul> <li>Sortiert dauerhaft (in-place)</li> <li>Ver\u00e4ndert die urspr\u00fcngliche Liste</li> </ul>"},{"location":"python/listen/sort/#sorted-ruckgabe-einer-neuen-liste","title":"\ud83d\udd01 <code>sorted()</code> \u2013 R\u00fcckgabe einer neuen Liste","text":"<pre><code>zahlen = [3, 1, 4]\nneu = sorted(zahlen)\nprint(neu)       # [1, 3, 4]\nprint(zahlen)    # [3, 1, 4] bleibt unver\u00e4ndert\n</code></pre> <p>\u27a1\ufe0f N\u00fctzlich, wenn du das Original behalten m\u00f6chtest</p>"},{"location":"python/listen/sort/#absteigend-sortieren","title":"\ud83d\udd3d Absteigend sortieren","text":"<pre><code>zahlen = [4, 2, 8]\nzahlen.sort(reverse=True)\nprint(zahlen)  # [8, 4, 2]\n</code></pre> <p>Oder mit <code>sorted()</code>:</p> <pre><code>sorted(zahlen, reverse=True)\n</code></pre>"},{"location":"python/listen/sort/#strings-alphabetisch-sortieren","title":"\ud83d\udd24 Strings alphabetisch sortieren","text":"<pre><code>woerter = [\"Banane\", \"Apfel\", \"Zitrone\"]\nwoerter.sort()\nprint(woerter)  # ['Apfel', 'Banane', 'Zitrone']\n</code></pre>"},{"location":"python/listen/sort/#case-sensitive","title":"Case-sensitive?","text":"<pre><code>[\"z\", \"a\", \"A\"].sort()\n# Ergebnis: ['A', 'a', 'z']  \u2192 Gro\u00df vor klein\n</code></pre>"},{"location":"python/listen/sort/#mit-schlussel-key-funktion-sortieren","title":"\ud83e\udde0 Mit Schl\u00fcssel (Key-Funktion) sortieren","text":""},{"location":"python/listen/sort/#beispiel-nach-lange-sortieren","title":"Beispiel: Nach L\u00e4nge sortieren","text":"<pre><code>woerter = [\"Haus\", \"Schnecke\", \"Ei\"]\nwoerter.sort(key=len)\nprint(woerter)  # ['Ei', 'Haus', 'Schnecke']\n</code></pre>"},{"location":"python/listen/sort/#beispiel-nach-letzter-ziffer","title":"Beispiel: Nach letzter Ziffer","text":"<pre><code>zahlen = [23, 45, 12, 38]\nzahlen.sort(key=lambda x: x % 10)\nprint(zahlen)  # [12, 23, 45, 38]\n</code></pre>"},{"location":"python/listen/sort/#worter-unabhangig-von-gro-kleinschreibung","title":"W\u00f6rter unabh\u00e4ngig von Gro\u00df-/Kleinschreibung","text":"<pre><code>woerter = [\"Zebra\", \"apfel\", \"Banane\"]\nwoerter.sort(key=str.lower)\nprint(woerter)  # ['apfel', 'Banane', 'Zebra']\n</code></pre>"},{"location":"python/listen/sort/#objekte-dictionaries-sortieren","title":"\ud83d\udd04 Objekte / Dictionaries sortieren","text":""},{"location":"python/listen/sort/#liste-von-dictionaries","title":"Liste von Dictionaries","text":"<pre><code>personen = [\n    {\"name\": \"Max\", \"alter\": 30},\n    {\"name\": \"Anna\", \"alter\": 25},\n]\n\npersonen.sort(key=lambda x: x[\"alter\"])\n</code></pre> <p>\u27a1\ufe0f Sortiert nach Alter aufsteigend</p>"},{"location":"python/listen/sort/#unterschiede-sort-vs-sorted","title":"\ud83d\udccc Unterschiede: <code>sort()</code> vs <code>sorted()</code>","text":"Merkmal <code>list.sort()</code> <code>sorted()</code> Typ Methode der Liste Funktion Wirkung \u00c4ndert Original Gibt neue Liste zur\u00fcck R\u00fcckgabewert <code>None</code> Neue sortierte Liste Auf alle Typen \u274c nur Listen \u2705 f\u00fcr jedes Iterierbare"},{"location":"python/listen/sort/#zusammenfassung","title":"\u2705 Zusammenfassung","text":"Aufgabe Methode Liste dauerhaft sortieren <code>list.sort()</code> Neue sortierte Liste <code>sorted(iterable)</code> Absteigend sortieren <code>sort(reverse=True)</code> Nach Eigenschaft sortieren <code>sort(key=...)</code> Case-insensitiv <code>key=str.lower</code> <p>\ud83d\udca1 <code>sorted()</code> ist ideal f\u00fcr einmalige Sortierung \u2013 <code>sort()</code> spart Speicher &amp; ist schneller.</p>"},{"location":"python/sets/add/","title":"\u2795 Set Elemente hinzuf\u00fcgen","text":"<p>Ein Set in Python speichert einzigartige Elemente. Um neue Eintr\u00e4ge hinzuzuf\u00fcgen, nutzt du die Methode <code>.add()</code>.</p>"},{"location":"python/sets/add/#add-ein-element-hinzufugen","title":"\ud83d\udd39 <code>add()</code> \u2013 Ein Element hinzuf\u00fcgen","text":"<pre><code>farben = {\"rot\", \"blau\"}\nfarben.add(\"gr\u00fcn\")\n\nprint(farben)  # {'rot', 'blau', 'gr\u00fcn'}\n</code></pre> <ul> <li>F\u00fcgt genau ein neues Element zum Set hinzu</li> <li>Wenn der Wert schon vorhanden ist, passiert nichts</li> </ul> <pre><code>farben.add(\"rot\")\nprint(farben)  # {'rot', 'blau', 'gr\u00fcn'} \u2192 kein Duplikat!\n</code></pre>"},{"location":"python/sets/add/#update-mehrere-werte-hinzufugen","title":"\ud83d\udd38 <code>update()</code> \u2013 Mehrere Werte hinzuf\u00fcgen","text":"<p>Wenn du mehrere Elemente hinzuf\u00fcgen m\u00f6chtest, nutze <code>update()</code>:</p> <pre><code>zahlen = {1, 2}\nzahlen.update([3, 4, 5])\nprint(zahlen)  # {1, 2, 3, 4, 5}\n</code></pre> <ul> <li>Akzeptiert jede iterierbare Struktur (z.\u202fB. Liste, Tuple, Set, String)</li> </ul> <pre><code>zahlen.update((6, 7))\nzahlen.update(\"89\")  # Achtung: einzelne Zeichen!\n</code></pre>"},{"location":"python/sets/add/#add-vs-update-vergleich","title":"\ud83e\udde0 <code>add()</code> vs <code>update()</code> \u2013 Vergleich","text":"Methode Was wird hinzugef\u00fcgt? Beispiel <code>add(x)</code> Ein einzelner Wert <code>mein_set.add(\"Hallo\")</code> <code>update(x)</code> Mehrere Werte (iterierbar) <code>mein_set.update([\"A\", \"B\"])</code>"},{"location":"python/sets/add/#beispiele","title":"\ud83e\uddea Beispiele","text":"<pre><code>tiere = {\"Katze\", \"Hund\"}\ntiere.add(\"Maus\")\ntiere.update([\"Fisch\", \"Vogel\"])\nprint(tiere)\n# Ausgabe: {'Hund', 'Katze', 'Maus', 'Fisch', 'Vogel'}\n</code></pre>"},{"location":"python/sets/add/#was-nicht-geht","title":"\u26a0\ufe0f Was nicht geht:","text":"<pre><code>mein_set = {1, 2, 3}\nmein_set.add([4, 5])  # \u274c TypeError: Listen sind nicht hashbar\n</code></pre> <ul> <li>Unver\u00e4nderliche Typen (wie Zahlen, Strings, Tuples) sind erlaubt</li> <li>Ver\u00e4nderliche Typen (z.\u202fB. Listen, Dictionaries) nicht</li> </ul>"},{"location":"python/sets/add/#zusammenfassung","title":"\u2705 Zusammenfassung","text":"Ziel Methode Ein Wert <code>.add(wert)</code> Mehrere Werte <code>.update(iterable)</code> Doppelte verhindern Automatisch durch Set Fehler bei Liste als Element Ja \u2013 Listen sind nicht erlaubt <p>\ud83d\udca1 Nutze <code>add()</code> f\u00fcr einzelne Elemente und <code>update()</code> f\u00fcr Listen, Tuples oder andere Sets. Sets sind effizient und verhindern automatisch Doppelungen \u2013 ideal f\u00fcr eindeutige Datensammlungen!</p>"},{"location":"python/sets/einf%C3%BChrung/","title":"\ud83d\udd22 Sets (Mengen) Einf\u00fchrung","text":"<p>Ein Set ist eine ungeordnete Sammlung von einzigartigen Werten. Das bedeutet: Doppelte Elemente werden automatisch entfernt.</p> <p>Sets sind ideal, wenn du nur eindeutige Werte brauchst \u2013 z.\u202fB. f\u00fcr Filter, Vergleiche oder mathematische Mengenoperationen.</p>"},{"location":"python/sets/einf%C3%BChrung/#set-erstellen","title":"\ud83e\uddea Set erstellen","text":"<pre><code>fr\u00fcchte = {\"Apfel\", \"Banane\", \"Apfel\", \"Orange\"}\nprint(fr\u00fcchte)  # {'Apfel', 'Banane', 'Orange'}\n</code></pre> <p>\u26a0\ufe0f Nur einmalige Werte bleiben enthalten \u26a0\ufe0f Reihenfolge ist nicht garantiert</p>"},{"location":"python/sets/einf%C3%BChrung/#leeres-set-erzeugen","title":"\ud83e\uddf1 Leeres Set erzeugen","text":"<pre><code>leeres_set = set()\n</code></pre> <p>\u26a0\ufe0f <code>{}</code> erzeugt ein leeres Dictionary, nicht ein Set!</p>"},{"location":"python/sets/einf%C3%BChrung/#eigenschaften-von-sets","title":"\ud83e\udde9 Eigenschaften von Sets","text":"Merkmal Beschreibung Ungeordnet Keine garantierte Reihenfolge Einzigartig Keine Duplikate erlaubt Ver\u00e4nderlich Kann Elemente hinzuf\u00fcgen/entfernen Nicht indizierbar Kein Zugriff per Index wie bei Listen"},{"location":"python/sets/einf%C3%BChrung/#datentyp-prufen","title":"\ud83d\udccb Datentyp pr\u00fcfen","text":"<pre><code>zahlen = {1, 2, 3}\nprint(type(zahlen))  # &lt;class 'set'&gt;\n</code></pre>"},{"location":"python/sets/einf%C3%BChrung/#set-mit-schleife-durchlaufen","title":"\ud83d\udd01 Set mit Schleife durchlaufen","text":"<pre><code>farben = {\"rot\", \"gr\u00fcn\", \"blau\"}\n\nfor farbe in farben:\n    print(farbe)\n</code></pre> <p>\u2705 Reihenfolge kann sich \u00e4ndern \u274c Kein Zugriff \u00fcber <code>farben[0]</code></p>"},{"location":"python/sets/einf%C3%BChrung/#warum-sets","title":"\ud83e\udde0 Warum Sets?","text":"<p>Sets sind besonders n\u00fctzlich, wenn du:</p> <ul> <li>Duplikate entfernen m\u00f6chtest</li> <li>Schnittmengen, Vereinigungen oder Unterschiede berechnen willst</li> <li>Schnelle Tests auf Vorhandensein brauchst (<code>in</code> ist sehr schnell)</li> </ul>"},{"location":"python/sets/einf%C3%BChrung/#beispiel-duplikate-automatisch-entfernen","title":"\ud83c\udfaf Beispiel: Duplikate automatisch entfernen","text":"<pre><code>namen = [\"Anna\", \"Ben\", \"Anna\", \"Clara\"]\neinzigartig = set(namen)\n\nprint(einzigartig)  # {'Anna', 'Ben', 'Clara'}\n</code></pre>"},{"location":"python/sets/einf%C3%BChrung/#typische-anwendungsfalle","title":"\ud83d\udccc Typische Anwendungsf\u00e4lle","text":"Problemstellung L\u00f6sung mit Set Doppelte aus Liste entfernen <code>set(liste)</code> Ist ein Wert vorhanden? <code>wert in mein_set</code> Unterschiede oder Gemeinsamkeiten Mengenoperationen mit Sets Viele Elemente schnell vergleichen Sets sind schneller als Listen"},{"location":"python/sets/einf%C3%BChrung/#zusammenfassung","title":"\u2705 Zusammenfassung","text":"Merkmal Set (<code>set</code>) Duplikate erlaubt? \u274c Nein Reihenfolge fix? \u274c Nein Ver\u00e4nderbar? \u2705 Ja Zugriff per Index? \u274c Nein Einsatzgebiete Daten filtern, vergleichen, analysieren <p>\ud83d\udca1 Sets sind einfach \u2013 aber extrem m\u00e4chtig, wenn du eindeutige Werte brauchst.</p> <p>In den n\u00e4chsten Lektionen zeigen wir dir, wie man Sets ver\u00e4ndert und vergleicht.</p>"},{"location":"python/sets/join/","title":"\ud83d\udd17 Sets zusammenf\u00fcgen (Join)","text":"<p>In Python kannst du mehrere <code>set</code>-Objekte zu einem neuen Set vereinigen, um alle einzigartigen Elemente zu erhalten. Duplizierte Elemente werden dabei automatisch entfernt.</p>"},{"location":"python/sets/join/#union-vereinigung-zweier-oder-mehrerer-sets","title":"\ud83d\udd39 <code>union()</code> \u2013 Vereinigung zweier oder mehrerer Sets","text":"<pre><code>a = {1, 2, 3}\nb = {3, 4, 5}\n\nergebnis = a.union(b)\nprint(ergebnis)  # {1, 2, 3, 4, 5}\n</code></pre> <ul> <li>Gibt ein neues Set zur\u00fcck</li> <li>Entfernt automatisch Duplikate</li> </ul> <p>Auch mit mehreren Sets m\u00f6glich:</p> <pre><code>x = {1, 2}\ny = {2, 3}\nz = {3, 4}\n\ngesamt = x.union(y, z)\nprint(gesamt)  # {1, 2, 3, 4}\n</code></pre>"},{"location":"python/sets/join/#pipe-operator-kurzform-von-union","title":"\ud83d\udd38 <code>|</code> (Pipe-Operator) \u2013 Kurzform von <code>union()</code>","text":"<pre><code>a = {1, 2}\nb = {2, 3}\n\nprint(a | b)  # {1, 2, 3}\n</code></pre>"},{"location":"python/sets/join/#update-in-place-join-andert-originalset","title":"\ud83d\udd04 <code>update()</code> \u2013 In-place Join (\u00e4ndert Originalset)","text":"<pre><code>a = {1, 2}\nb = {2, 3}\n\na.update(b)\nprint(a)  # {1, 2, 3}\n</code></pre> <ul> <li>Erg\u00e4nzt <code>a</code> direkt mit den Werten aus <code>b</code></li> <li>Ver\u00e4ndert das urspr\u00fcngliche Set (kein neues Objekt)</li> </ul>"},{"location":"python/sets/join/#beispiel-mehrere-sets-verbinden","title":"\ud83e\uddea Beispiel: Mehrere Sets verbinden","text":"<pre><code>python = {\"if\", \"else\", \"def\"}\njava = {\"if\", \"switch\", \"class\"}\njs = {\"function\", \"class\", \"if\"}\n\nalle = python.union(java, js)\nprint(alle)\n# {'switch', 'else', 'function', 'if', 'def', 'class'}\n</code></pre>"},{"location":"python/sets/join/#wichtiges-zu-beachten","title":"\ud83d\udccc Wichtiges zu beachten","text":"Methode Beschreibung Gibt neues Set zur\u00fcck? <code>a.union(b)</code> Vereinigt Inhalte, ver\u00e4ndert nichts \u2705 Ja <code>a | b</code> Kurzform von <code>union()</code> \u2705 Ja <code>a.update(b)</code> F\u00fcgt <code>b</code>-Inhalte in <code>a</code> ein \u274c Nein (ver\u00e4ndert <code>a</code>)"},{"location":"python/sets/join/#zusammenfassung","title":"\u2705 Zusammenfassung","text":"Ziel Methode Zwei Sets verbinden <code>a.union(b)</code> Mehrere Sets verbinden <code>a.union(b, c, d)</code> Direkt in <code>a</code> speichern <code>a.update(b)</code> Kurz schreiben <code>a | b</code> <p>\ud83d\udca1 Perfekt zum Kombinieren mehrerer Wertelisten ohne Duplikate \u2013 z.\u202fB. Benutzerrollen, Tags, Kategorien usw.</p>"},{"location":"python/sets/loop/","title":"\ud83d\udd01 Sets iterieren (Loop)","text":"<p>Ein <code>set</code> enth\u00e4lt ungeordnete, eindeutige Elemente. Um auf jedes Element zuzugreifen, kann man ganz einfach Schleifen verwenden.</p>"},{"location":"python/sets/loop/#for-schleife-uber-ein-set","title":"\ud83d\udd39 <code>for</code>-Schleife \u00fcber ein Set","text":"<pre><code>farben = {\"rot\", \"gr\u00fcn\", \"blau\"}\n\nfor farbe in farben:\n    print(farbe)\n</code></pre> <ul> <li>Durchl\u00e4uft jedes Element einmal</li> <li>Reihenfolge ist nicht festgelegt (da Sets ungeordnet sind)</li> </ul>"},{"location":"python/sets/loop/#beispiel-ausgabe","title":"\ud83d\udd0d Beispiel-Ausgabe:","text":"<pre><code>gr\u00fcn\nblau\nrot\n</code></pre> <p>Hinweis: Die Reihenfolge kann sich bei jedem Durchlauf \u00e4ndern.</p>"},{"location":"python/sets/loop/#iteration-mit-bedingungen","title":"\ud83e\udde0 Iteration mit Bedingungen","text":"<pre><code>farben = {\"rot\", \"blau\", \"gelb\"}\n\nfor farbe in farben:\n    if \"l\" in farbe:\n        print(f\"{farbe} enth\u00e4lt den Buchstaben 'l'\")\n</code></pre>"},{"location":"python/sets/loop/#iteration-mit-enumerate","title":"\ud83d\udd01 Iteration mit <code>enumerate()</code>","text":"<pre><code>farben = {\"rot\", \"gr\u00fcn\", \"blau\"}\n\nfor index, wert in enumerate(farben):\n    print(f\"{index}: {wert}\")\n</code></pre> <ul> <li><code>enumerate()</code> gibt zus\u00e4tzlich den Index zur\u00fcck</li> <li>Die Reihenfolge bleibt ungeordnet, aber du bekommst Positionsnummern</li> </ul>"},{"location":"python/sets/loop/#kombinieren-mit-sorted","title":"\ud83d\udd04 Kombinieren mit <code>sorted()</code>","text":"<p>Wenn du die Werte sortiert durchlaufen willst:</p> <pre><code>zahlen = {5, 3, 9, 1}\n\nfor z in sorted(zahlen):\n    print(z)\n</code></pre> <p>\u27a1\ufe0f Gibt aus: <pre><code>1\n3\n5\n9\n</code></pre></p>"},{"location":"python/sets/loop/#zugriff-in-einer-while-schleife-indirekt","title":"\ud83d\udd01 Zugriff in einer <code>while</code>-Schleife (indirekt)","text":"<p>Man kann Sets in Listen umwandeln:</p> <pre><code>tiere = {\"Hund\", \"Katze\", \"Maus\"}\nliste = list(tiere)\n\ni = 0\nwhile i &lt; len(liste):\n    print(liste[i])\n    i += 1\n</code></pre>"},{"location":"python/sets/loop/#beispiel-zahlen-wie-oft-ein-buchstabe-in-set-wortern-vorkommt","title":"\ud83e\uddea Beispiel: Z\u00e4hlen, wie oft ein Buchstabe in Set-W\u00f6rtern vorkommt","text":"<pre><code>w\u00f6rter = {\"apfel\", \"banane\", \"birne\"}\nz\u00e4hler = 0\n\nfor wort in w\u00f6rter:\n    if \"e\" in wort:\n        z\u00e4hler += 1\n\nprint(f\"In {z\u00e4hler} W\u00f6rtern ist ein 'e' enthalten.\")\n</code></pre>"},{"location":"python/sets/loop/#zusammenfassung","title":"\u2705 Zusammenfassung","text":"Technik Beschreibung <code>for element in set</code> Durchl\u00e4uft jedes Element im Set <code>enumerate(set)</code> Liefert zus\u00e4tzlich eine Indexnummer <code>sorted(set)</code> Gibt Elemente sortiert zur\u00fcck <code>while</code> mit <code>list()</code> Indirekter Zugriff \u00fcber Umwandlung <p>\ud83d\udca1 Obwohl Sets keine Reihenfolge haben, lassen sie sich einfach mit <code>for</code> durchlaufen \u2013 ideal f\u00fcr Duplikat-freie Listen!</p>"},{"location":"python/sets/methoden/","title":"\ud83e\uddf0 Set-Methoden (Methoden\u00fcbersicht)","text":"<p>Sets (<code>set</code>) sind ungeordnete Sammlungen eindeutiger Elemente. Python stellt viele Methoden bereit, um Sets zu ver\u00e4ndern, zu kombinieren oder zu vergleichen.</p>"},{"location":"python/sets/methoden/#grundlegende-methoden","title":"\ud83d\udce6 Grundlegende Methoden","text":""},{"location":"python/sets/methoden/#add-element-hinzufugen","title":"\ud83d\udd39 <code>add()</code> \u2013 Element hinzuf\u00fcgen","text":"<pre><code>farben = {\"rot\", \"blau\"}\nfarben.add(\"gr\u00fcn\")\nprint(farben)  # {\"rot\", \"blau\", \"gr\u00fcn\"}\n</code></pre> <ul> <li>F\u00fcgt ein einzelnes Element hinzu</li> <li>Duplikate werden ignoriert</li> </ul>"},{"location":"python/sets/methoden/#update-mehrere-elemente-hinzufugen","title":"\ud83d\udd39 <code>update()</code> \u2013 mehrere Elemente hinzuf\u00fcgen","text":"<pre><code>zahlen = {1, 2}\nzahlen.update([2, 3, 4])\nprint(zahlen)  # {1, 2, 3, 4}\n</code></pre> <ul> <li>F\u00fcgt mehrere Elemente hinzu</li> <li>Auch <code>list</code>, <code>tuple</code>, <code>set</code>, <code>dict</code> verwendbar</li> </ul>"},{"location":"python/sets/methoden/#entfernen-von-elementen","title":"\ud83d\uddd1\ufe0f Entfernen von Elementen","text":""},{"location":"python/sets/methoden/#remove-element-loschen","title":"\ud83d\udd38 <code>remove()</code> \u2013 Element l\u00f6schen","text":"<pre><code>farben = {\"rot\", \"blau\"}\nfarben.remove(\"blau\")\n</code></pre> <ul> <li>\u2757 Fehler, wenn das Element nicht existiert (<code>KeyError</code>)</li> </ul>"},{"location":"python/sets/methoden/#discard-sicher-loschen","title":"\ud83d\udd38 <code>discard()</code> \u2013 sicher l\u00f6schen","text":"<pre><code>farben = {\"rot\", \"blau\"}\nfarben.discard(\"gr\u00fcn\")  # kein Fehler!\n</code></pre> <ul> <li>Kein Fehler, wenn Element nicht existiert</li> </ul>"},{"location":"python/sets/methoden/#pop-zufalliges-element-entfernen","title":"\ud83d\udd38 <code>pop()</code> \u2013 zuf\u00e4lliges Element entfernen","text":"<pre><code>zahlen = {1, 2, 3}\nentfernt = zahlen.pop()\nprint(entfernt)  # z.\u202fB. 2\n</code></pre> <ul> <li>Entfernt irgendein Element (weil Sets ungeordnet sind)</li> </ul>"},{"location":"python/sets/methoden/#clear-alles-loschen","title":"\ud83d\udd38 <code>clear()</code> \u2013 alles l\u00f6schen","text":"<pre><code>zahlen = {1, 2, 3}\nzahlen.clear()\nprint(zahlen)  # set()\n</code></pre>"},{"location":"python/sets/methoden/#set-vergleiche-operationen","title":"\ud83d\udd0d Set-Vergleiche &amp; Operationen","text":""},{"location":"python/sets/methoden/#union-vereinigung","title":"<code>union()</code> / <code>|</code> \u2013 Vereinigung","text":"<pre><code>a = {1, 2}\nb = {2, 3}\nprint(a.union(b))  # {1, 2, 3}\n</code></pre>"},{"location":"python/sets/methoden/#intersection-schnittmenge","title":"<code>intersection()</code> / <code>&amp;</code> \u2013 Schnittmenge","text":"<pre><code>a = {1, 2}\nb = {2, 3}\nprint(a.intersection(b))  # {2}\n</code></pre>"},{"location":"python/sets/methoden/#difference-differenz","title":"<code>difference()</code> / <code>-</code> \u2013 Differenz","text":"<pre><code>a = {1, 2, 3}\nb = {2, 3}\nprint(a.difference(b))  # {1}\n</code></pre>"},{"location":"python/sets/methoden/#symmetric_difference-symmetrische-differenz","title":"<code>symmetric_difference()</code> / <code>^</code> \u2013 Symmetrische Differenz","text":"<pre><code>a = {1, 2}\nb = {2, 3}\nprint(a.symmetric_difference(b))  # {1, 3}\n</code></pre>"},{"location":"python/sets/methoden/#vergleichsmethoden","title":"\u2705 Vergleichsmethoden","text":"Methode Bedeutung <code>issubset(other)</code> Ist dieses Set vollst\u00e4ndig in <code>other</code> enthalten? <code>issuperset(other)</code> Enth\u00e4lt dieses Set alle von <code>other</code>? <code>isdisjoint(other)</code> Haben beide keine gemeinsamen Elemente? <p>Beispiel:</p> <pre><code>a = {1, 2}\nb = {1, 2, 3}\nprint(a.issubset(b))     # True\nprint(b.issuperset(a))   # True\nprint(a.isdisjoint({4})) # True\n</code></pre>"},{"location":"python/sets/methoden/#zusammenfassung","title":"\ud83e\udde0 Zusammenfassung","text":"Kategorie Methoden Hinzuf\u00fcgen <code>add()</code>, <code>update()</code> Entfernen <code>remove()</code>, <code>discard()</code>, <code>pop()</code>, <code>clear()</code> Operationen <code>union()</code>, <code>intersection()</code>, <code>difference()</code>, <code>symmetric_difference()</code> Vergleiche <code>issubset()</code>, <code>issuperset()</code>, <code>isdisjoint()</code> <p>\ud83d\udca1 Set-Methoden sind ideal f\u00fcr Mengenlogik, Datenfilterung, Duplikat-Entfernung und mathematische Vergleiche.</p>"},{"location":"python/sets/remove/","title":"\u274c Set Elemente entfernen","text":"<p>In Python kannst du mit verschiedenen Methoden Elemente aus einem <code>set</code> l\u00f6schen. Jede Methode hat ihre eigenen Besonderheiten.</p>"},{"location":"python/sets/remove/#remove-entfernt-ein-bestimmtes-element","title":"\ud83d\udd39 <code>remove()</code> \u2013 Entfernt ein bestimmtes Element","text":"<pre><code>farben = {\"rot\", \"blau\", \"gr\u00fcn\"}\nfarben.remove(\"blau\")\nprint(farben)  # {'rot', 'gr\u00fcn'}\n</code></pre> <ul> <li>Entfernt genau ein Element</li> <li>\u2757 Gibt einen Fehler, wenn das Element nicht existiert:</li> </ul> <pre><code>farben.remove(\"gelb\")  # \u274c KeyError!\n</code></pre>"},{"location":"python/sets/remove/#discard-sicheres-entfernen","title":"\ud83d\udd38 <code>discard()</code> \u2013 Sicheres Entfernen","text":"<pre><code>farben = {\"rot\", \"blau\", \"gr\u00fcn\"}\nfarben.discard(\"blau\")     # entfernt \"blau\"\nfarben.discard(\"gelb\")     # kein Fehler\n</code></pre> <ul> <li>Funktioniert wie <code>remove()</code></li> <li>\u2705 Kein Fehler, wenn das Element fehlt</li> </ul>"},{"location":"python/sets/remove/#pop-irgendein-element-entfernen","title":"\ud83d\udd3b <code>pop()</code> \u2013 Irgendein Element entfernen","text":"<pre><code>zahlen = {1, 2, 3}\nentfernt = zahlen.pop()\n\nprint(entfernt)  # z.\u202fB. 1\nprint(zahlen)    # zwei \u00fcbrige Zahlen\n</code></pre> <ul> <li>Entfernt und gibt ein beliebiges Element zur\u00fcck</li> <li>\u2757 Reihenfolge nicht vorhersehbar</li> <li>\u2757 Bei leerem Set \u2192 KeyError</li> </ul>"},{"location":"python/sets/remove/#clear-alles-loschen","title":"\ud83d\udd04 <code>clear()</code> \u2013 Alles l\u00f6schen","text":"<pre><code>farben = {\"rot\", \"blau\"}\nfarben.clear()\n\nprint(farben)  # set()\n</code></pre> <ul> <li>Macht das Set komplett leer</li> </ul>"},{"location":"python/sets/remove/#beispiel","title":"\ud83e\uddea Beispiel","text":"<pre><code>tiere = {\"Katze\", \"Hund\", \"Maus\"}\n\ntiere.remove(\"Hund\")\ntiere.discard(\"Tiger\")  # Kein Fehler\ntiere.pop()             # Irgendein Tier\nprint(tiere)\n\ntiere.clear()\nprint(tiere)  # \u2192 leeres Set\n</code></pre>"},{"location":"python/sets/remove/#vergleich-der-methoden","title":"\ud83e\udde0 Vergleich der Methoden","text":"Methode Beschreibung Fehler bei fehlendem Element? <code>remove(x)</code> Entfernt <code>x</code>, wirft Fehler wenn nicht da \u274c Ja (<code>KeyError</code>) <code>discard(x)</code> Entfernt <code>x</code>, ohne Fehler \u2705 Nein <code>pop()</code> Entfernt irgendein Element \u274c Ja bei leerem Set <code>clear()</code> Entfernt alle Elemente \u2705 Nie"},{"location":"python/sets/remove/#zusammenfassung","title":"\u2705 Zusammenfassung","text":"Ziel Methode Sicher entfernen (ohne Fehler) <code>.discard(x)</code> Genau entfernen (mit Fehlerwarnung) <code>.remove(x)</code> Irgendeines entfernen <code>.pop()</code> Alles l\u00f6schen <code>.clear()</code> <p>\ud83d\udca1 Nutze <code>discard()</code>, wenn du nicht sicher bist, ob ein Element enthalten ist. Vermeide <code>remove()</code> ohne Pr\u00fcfung \u2013 es kann den Code abbrechen!</p>"},{"location":"python/strings/concat/","title":"\ud83d\udd17 Strings verkn\u00fcpfen (Concatenation)","text":"<p>String-Konkatenation bedeutet, mehrere Zeichenketten zu einem einzigen String zusammenzuf\u00fcgen. In Python gibt es daf\u00fcr verschiedene Methoden \u2013 je nach Bedarf und Lesbarkeit.</p>"},{"location":"python/strings/concat/#methode-1-klassische-verkettung","title":"\u2705 Methode 1: <code>+</code> \u2013 Klassische Verkettung","text":"<pre><code>vorname = \"Max\"\nnachname = \"Mustermann\"\nname = vorname + \" \" + nachname\nprint(name)  # Max Mustermann\n</code></pre> <ul> <li>Nutzt das <code>+</code>-Zeichen, um Strings direkt zu verbinden</li> <li>Einfach und intuitiv</li> <li>Achtung: funktioniert nur mit Strings!</li> </ul> <pre><code>alter = 30\n# print(\"Ich bin \" + alter) \u274c Fehler\nprint(\"Ich bin \" + str(alter))  # \u2705 Ich bin 30\n</code></pre>"},{"location":"python/strings/concat/#methode-2-an-string-anhangen","title":"\u2705 Methode 2: <code>+=</code> \u2013 An String anh\u00e4ngen","text":"<pre><code>text = \"Hallo\"\ntext += \" Welt\"\nprint(text)  # Hallo Welt\n</code></pre> <ul> <li>F\u00fcgt neuen Text an bestehenden String an</li> <li>Praktisch f\u00fcr dynamischen Aufbau in Schleifen</li> </ul>"},{"location":"python/strings/concat/#methode-3-f-strings-empfohlen-ab-python-36","title":"\u2705 Methode 3: <code>f-Strings</code> (empfohlen ab Python 3.6)","text":"<pre><code>name = \"Florian\"\nstadt = \"Berlin\"\ninfo = f\"{name} wohnt in {stadt}\"\nprint(info)  # Florian wohnt in Berlin\n</code></pre> <ul> <li>Klar &amp; lesbar</li> <li>Performanter als viele Verkettungen mit <code>+</code></li> <li>Unterst\u00fctzt Ausdr\u00fccke direkt:</li> </ul> <pre><code>alter = 32\nprint(f\"In 5 Jahren ist Florian {alter + 5} Jahre alt.\")\n</code></pre>"},{"location":"python/strings/concat/#methode-4-format-alternative-zu-f-strings","title":"\u2705 Methode 4: <code>format()</code> \u2013 Alternative zu f-Strings","text":"<pre><code>s = \"Hallo {}, du hast {} neue Nachrichten.\".format(\"Anna\", 5)\nprint(s)  # Hallo Anna, du hast 5 neue Nachrichten.\n</code></pre> <ul> <li>Kompatibel mit \u00e4lteren Python-Versionen (&lt;3.6)</li> <li>Flexibel mit Platzhaltern <code>{}</code></li> </ul> <pre><code>template = \"{0} + {0} = {1}\"\nprint(template.format(\"Apfel\", \"ApfelApfel\"))  # Apfel + Apfel = ApfelApfel\n</code></pre>"},{"location":"python/strings/concat/#methode-5-join-mehrere-strings-effizient-verbinden","title":"\u2705 Methode 5: <code>join()</code> \u2013 Mehrere Strings effizient verbinden","text":"<pre><code>teile = [\"HTML\", \"CSS\", \"JavaScript\"]\ntext = \", \".join(teile)\nprint(text)  # HTML, CSS, JavaScript\n</code></pre> <ul> <li>Perfekt f\u00fcr Listen von Strings</li> <li>Besser skalierbar als <code>+</code> in Schleifen</li> </ul> <p>\u26a0\ufe0f <code>join()</code> funktioniert nur mit Strings, sonst gibt\u2019s einen Fehler.</p> <pre><code>zahlen = [1, 2, 3]\n# \", \".join(zahlen) \u274c Fehler\nprint(\", \".join(map(str, zahlen)))  # \u2705 1, 2, 3\n</code></pre>"},{"location":"python/strings/concat/#beispiel-dynamischer-satzbau","title":"\ud83e\uddea Beispiel: Dynamischer Satzbau","text":"<pre><code>teile = [\"Python\", \"macht\", \"Spa\u00df\"]\nsatz = \" \".join(teile)\nprint(satz)  # Python macht Spa\u00df\n</code></pre>"},{"location":"python/strings/concat/#beispiel-mit-schleife","title":"\ud83d\udd01 Beispiel mit Schleife","text":"<pre><code>teile = [\"Teil1\", \"Teil2\", \"Teil3\"]\ntext = \"\"\nfor t in teile:\n    text += t + \", \"\nprint(text)  # Teil1, Teil2, Teil3, \n</code></pre> <p>\u27a1\ufe0f Besser: mit <code>join()</code>:</p> <pre><code>print(\", \".join(teile))  # Teil1, Teil2, Teil3\n</code></pre>"},{"location":"python/strings/concat/#falsch-zahlen-mit-verketten","title":"\ud83d\udeab Falsch: Zahlen mit + verketten","text":"<pre><code># Fehler:\n# print(\"Summe: \" + 3 + 4)\n\n# Richtig:\nprint(\"Summe: \" + str(3 + 4))  # Summe: 7\n</code></pre>"},{"location":"python/strings/concat/#zusammenfassung","title":"\u2705 Zusammenfassung","text":"Methode Beschreibung Wann nutzen? <code>+</code> Einfaches Verbinden 2\u20133 Strings <code>+=</code> Anf\u00fcgen in Schleifen dynamisch erweitern <code>f\"\"</code> Moderne, lesbare L\u00f6sung f\u00fcr Klarheit + Performance <code>format()</code> \u00c4ltere, flexible Alternative zu <code>f\"\"</code> kompatibel mit \u00e4lteren Pythons <code>\"\".join()</code> F\u00fcr Listen &amp; viele Teile schnell, effizient <p>\ud83d\udd0e Tipp: Nutze <code>join()</code> f\u00fcr Listen, <code>f\"\"</code> f\u00fcr einfache Lesbarkeit und <code>+</code> nur bei wenigen, klaren F\u00e4llen.</p>"},{"location":"python/strings/escape/","title":"\ud83d\udd10 Escape-Sequenzen in Strings","text":"<p>Escape-Sequenzen sind besondere Zeichenkombinationen in Strings, die nicht w\u00f6rtlich ausgegeben, sondern interpretiert werden \u2013 z.\u202fB. als neue Zeile, Tabulator oder Anf\u00fchrungszeichen.</p> <p>Sie beginnen immer mit einem Backslash <code>\\</code>.</p>"},{"location":"python/strings/escape/#warum-braucht-man-escape-sequenzen","title":"\ud83e\udde9 Warum braucht man Escape-Sequenzen?","text":"<ul> <li>Um Sonderzeichen darzustellen</li> <li>Um Zeichen wie <code>\"</code>, <code>'</code> oder <code>\\</code> in einem String zu nutzen</li> <li>Um Steuerzeichen wie <code>\\n</code> oder <code>\\t</code> einzuf\u00fcgen</li> </ul>"},{"location":"python/strings/escape/#haufige-escape-sequenzen","title":"\ud83d\udcdc H\u00e4ufige Escape-Sequenzen","text":"Escape Wirkung Beispiel <code>\\\\</code> Backslash <code>\\</code> <code>\"C:\\\\Users\\\\Florian\"</code> <code>\\'</code> Einfaches Anf\u00fchrungszeichen <code>'It\\'s OK'</code> <code>\\\"</code> Doppeltes Anf\u00fchrungszeichen <code>\"Er sagte: \\\"Hallo\\\"\"</code> <code>\\n</code> Neue Zeile (Linebreak) <code>\"Zeile 1\\nZeile 2\"</code> <code>\\t</code> Tabulator (Einzug) <code>\"Name:\\tFlorian\"</code> <code>\\r</code> Carriage Return (selten) <code>\"Text\\rErsetzt\"</code> <code>\\b</code> Backspace (l\u00f6scht davor) <code>\"Helloo\\b!\"</code> \u2192 <code>\"Hello!\"</code> <code>\\f</code> Seitenvorschub (kaum genutzt) <code>\\a</code> \"Beep\"-Ton (falls unterst\u00fctzt) (historisch) <code>\\v</code> Vertikaler Tabulator (kaum genutzt) <code>\\ooo</code> Oktalwert <code>\"\\101\"</code> \u2192 <code>\"A\"</code> <code>\\xhh</code> Hexadezimalwert <code>\"\\x41\"</code> \u2192 <code>\"A\"</code>"},{"location":"python/strings/escape/#beispiel-escape-von-zeichen","title":"\u270d\ufe0f Beispiel: Escape von Zeichen","text":"<pre><code>text = 'Er sagte: \\'Hallo Welt!\\''\nprint(text)\n# Ausgabe: Er sagte: 'Hallo Welt!'\n</code></pre>"},{"location":"python/strings/escape/#beispiel-pfade","title":"\u270d\ufe0f Beispiel: Pfade","text":"<pre><code>pfad = \"C:\\\\Users\\\\Florian\\\\Desktop\"\nprint(pfad)\n# Ausgabe: C:\\Users\\Florian\\Desktop\n</code></pre>"},{"location":"python/strings/escape/#mehrzeilige-strings-mit-n","title":"\u2705 Mehrzeilige Strings mit <code>\\n</code>","text":"<pre><code>mehrzeilig = \"Zeile 1\\nZeile 2\\nZeile 3\"\nprint(mehrzeilig)\n</code></pre> <p>Ergebnis:</p> <pre><code>Zeile 1\nZeile 2\nZeile 3\n</code></pre>"},{"location":"python/strings/escape/#problem-windows-pfade","title":"\u26d4 Problem: Windows-Pfade","text":"<pre><code>pfad = \"C:\\newfolder\\test.txt\"\n# \u2192 \\n und \\t werden als Steuerzeichen interpretiert\n</code></pre> <p>\u27a1\ufe0f Verwende lieber:</p> <ul> <li>Doppelte Backslashes: <code>\"C:\\\\newfolder\\\\test.txt\"</code></li> <li>Oder: Raw-Strings (siehe unten)</li> </ul>"},{"location":"python/strings/escape/#raw-strings-r","title":"\ud83e\uddf1 Raw-Strings (<code>r\"\"</code>)","text":"<p>Ein Raw-String (<code>r\"...\"</code>) sagt Python, dass keine Escape-Sequenzen verarbeitet werden sollen.</p> <pre><code>raw = r\"C:\\newfolder\\test.txt\"\nprint(raw)  # C:\\newfolder\\test.txt\n</code></pre> <p>N\u00fctzlich f\u00fcr Regul\u00e4re Ausdr\u00fccke, Dateipfade, u.\u202fv.\u202fm.</p>"},{"location":"python/strings/escape/#unicode-zeichen-bonus","title":"\ud83d\udd0d Unicode-Zeichen (Bonus)","text":"<pre><code>print(\"\\u00A9\")     # \u00a9\nprint(\"\\U0001F600\") # \ud83d\ude00 (Emoji)\n</code></pre> Escape Beschreibung <code>\\uXXXX</code> Unicode 4-stellig <code>\\UXXXXXXXX</code> Unicode 8-stellig"},{"location":"python/strings/escape/#zusammenfassung","title":"\ud83e\udde0 Zusammenfassung","text":"Funktion Syntax-Beispiel Anf\u00fchrungszeichen im String <code>\"Er sagte: \\\"Hi\\\"\"</code> Neue Zeile <code>\"Zeile1\\nZeile2\"</code> Tabulator <code>\"Name:\\tWert\"</code> Backslash <code>\"C:\\\\Pfad\"</code> Raw-String <code>r\"C:\\Pfad\"</code> <p>\ud83e\udde9 Tipp: Immer wenn du ein Zeichen brauchst, das in der Tastaturfunktion steckt (z.\u202fB. Enter, Tab, Backslash), brauchst du wahrscheinlich eine Escape-Sequenz!</p>"},{"location":"python/strings/format/","title":"\ud83c\udfa8 Strings formatieren (<code>String Formatting</code>)","text":"<p>String-Formatierung bedeutet, Daten in Texten dynamisch einzusetzen, z.\u202fB. Zahlen, Namen oder Variablen. Python bietet daf\u00fcr mehrere flexible Methoden \u2013 von klassisch bis modern.</p>"},{"location":"python/strings/format/#ubersicht-der-methoden","title":"\ud83e\uddf0 \u00dcbersicht der Methoden","text":"Methode Beschreibung Version <code>f-Strings</code> Moderne, empfohlene Methode Python \u2265 3.6 <code>format()</code> Flexibel &amp; weit verbreitet Python \u2265 2.7 <code>%</code>-Format Alte C-Style-Syntax Python &lt; 3.x"},{"location":"python/strings/format/#methode-1-f-strings-empfohlen","title":"\u2705 Methode 1: <code>f-Strings</code> (empfohlen)","text":"<pre><code>name = \"Florian\"\nalter = 32\nprint(f\"Hallo, ich bin {name} und {alter} Jahre alt.\")\n</code></pre> <ul> <li>Sehr lesbar</li> <li>Unterst\u00fctzt Ausdr\u00fccke &amp; Methoden:</li> </ul> <pre><code>zahl = 7.3456\nprint(f\"Gerundet: {zahl:.2f}\")  # Gerundet: 7.35\n</code></pre>"},{"location":"python/strings/format/#methode-2-format","title":"\u2705 Methode 2: <code>format()</code>","text":"<pre><code>template = \"Hallo {}, du hast {} neue Nachrichten.\"\nprint(template.format(\"Anna\", 3))\n</code></pre> <ul> <li>Platzhalter werden durch <code>.format()</code> ersetzt</li> <li>Du kannst auch Indizes oder Namen verwenden:</li> </ul> <pre><code>s = \"{0} liebt {1}\".format(\"Max\", \"Python\")\nprint(s)\n\ns = \"{name} hat {anzahl} Punkte.\".format(name=\"Lisa\", anzahl=92)\n</code></pre>"},{"location":"python/strings/format/#methode-3-format-alter","title":"\u2705 Methode 3: <code>%</code>-Format (\u00e4lter)","text":"<pre><code>name = \"Tim\"\nalter = 25\nprint(\"Name: %s, Alter: %d\" % (name, alter))\n</code></pre> K\u00fcrzel Typ <code>%s</code> String <code>%d</code> Integer <code>%f</code> Float <p>\u26a0\ufe0f Wird nicht mehr empfohlen \u2013 nur noch in Altcode relevant.</p>"},{"location":"python/strings/format/#zahlen-formatieren","title":"\ud83d\udd22 Zahlen formatieren","text":"<pre><code>wert = 1234.56789\nprint(f\"{wert:.2f}\")       # 1234.57\nprint(f\"{wert:,.2f}\")      # 1,234.57 (mit Tausendertrennung)\nprint(f\"{wert:10.2f}\")     # rechtsb\u00fcndig in 10 Zeichen\n</code></pre> Format Bedeutung <code>:.2f</code> 2 Nachkommastellen <code>:10.2f</code> Feldbreite 10, 2 Nachkommastellen <code>:&gt;10</code> rechtsb\u00fcndig <code>:&lt;10</code> linksb\u00fcndig <code>:^10</code> zentriert"},{"location":"python/strings/format/#beispiel-mit-wahrung","title":"\ud83d\udcb6 Beispiel mit W\u00e4hrung","text":"<pre><code>preis = 4.5\nprint(f\"Preis: {preis:.2f} \u20ac\")  # Preis: 4.50 \u20ac\n</code></pre>"},{"location":"python/strings/format/#tabellenformatierung","title":"\ud83d\uddc2\ufe0f Tabellenformatierung","text":"<pre><code>daten = [\n    (\"Name\", \"Alter\"),\n    (\"Anna\", 22),\n    (\"Ben\", 31),\n    (\"Clara\", 27)\n]\n\nfor name, alter in daten:\n    print(f\"{name:&lt;10} | {alter:&gt;3}\")\n</code></pre> <p>\u27a1\ufe0f Ergibt:</p> <pre><code>Name       | Age\nAnna       |  22\nBen        |  31\nClara      |  27\n</code></pre>"},{"location":"python/strings/format/#formatieren-von-binar-hex-oktal","title":"\ud83d\udd0d Formatieren von Bin\u00e4r, Hex &amp; Oktal","text":"<pre><code>zahl = 42\nprint(f\"Bin\u00e4r: {zahl:b}\")   # 101010\nprint(f\"Hex: {zahl:x}\")     # 2a\nprint(f\"Oktal: {zahl:o}\")   # 52\n</code></pre>"},{"location":"python/strings/format/#format-mit-ausdrucken","title":"\u2728 Format mit Ausdr\u00fccken","text":"<pre><code>a = 5\nb = 10\nprint(f\"{a} + {b} = {a + b}\")  # 5 + 10 = 15\n</code></pre>"},{"location":"python/strings/format/#sicherheits-tipp","title":"\ud83d\udd10 Sicherheits-Tipp","text":"<p>Wenn du Benutzereingaben formatierst, vermeide:</p> <pre><code>user_input = \"{dangerous_code}\"\nprint(f\"{user_input}\")  # \u274c potenzielle Sicherheitsl\u00fccke\n</code></pre> <p>\u2192 Nutze <code>str.format()</code> oder sichere Methoden.</p>"},{"location":"python/strings/format/#zusammenfassung","title":"\u2705 Zusammenfassung","text":"Methode Vorteil Wann verwenden? <code>f\"\"</code> Kurz, schnell, Ausdrucks-f\u00e4hig \u2705 Empfohlen (ab 3.6) <code>.format()</code> Flexibel, kontrolliert Kompatibel, alt + neu <code>%</code> Altcode \u274c Nicht mehr modern <p>\ud83d\udd27 Gute Formatierung macht deinen Code lesbar, professionell und anpassbar!</p>"},{"location":"python/strings/methoden/","title":"\ud83e\uddf0 String-Methoden","text":"<p>Strings in Python sind Objekte und bringen eine Vielzahl an integrierten Methoden mit, mit denen man sie analysieren, umwandeln oder ver\u00e4ndern kann.</p> <p>Alle Methoden liefern neue Strings zur\u00fcck (Strings sind unver\u00e4nderlich!).</p>"},{"location":"python/strings/methoden/#gro-kleinschreibung","title":"\ud83d\udd24 Gro\u00df-/Kleinschreibung","text":"Methode Beschreibung Beispiel <code>lower()</code> Alles klein <code>\"HALLO\".lower()</code> \u2192 <code>\"hallo\"</code> <code>upper()</code> Alles gro\u00df <code>\"hallo\".upper()</code> \u2192 <code>\"HALLO\"</code> <code>capitalize()</code> Erstes Zeichen gro\u00df <code>\"python\".capitalize()</code> \u2192 <code>\"Python\"</code> <code>title()</code> Jedes Wort mit Gro\u00dfbuchstaben <code>\"hello world\".title()</code> \u2192 <code>\"Hello World\"</code> <code>swapcase()</code> Kehrt Gro\u00df-/Kleinschreibung um <code>\"Hallo\".swapcase()</code> \u2192 <code>\"hALLO\"</code>"},{"location":"python/strings/methoden/#uberprufung-boolean-tests","title":"\ud83e\uddea \u00dcberpr\u00fcfung (Boolean-Tests)","text":"Methode Bedeutung Beispiel <code>isalpha()</code> Nur Buchstaben? <code>\"Hallo\".isalpha()</code> \u2192 <code>True</code> <code>isdigit()</code> Nur Ziffern? <code>\"123\".isdigit()</code> \u2192 <code>True</code> <code>isalnum()</code> Buchstaben oder Zahlen? <code>\"ABC123\".isalnum()</code> \u2192 <code>True</code> <code>isspace()</code> Nur Leerzeichen? <code>\"   \".isspace()</code> \u2192 <code>True</code> <code>isupper()</code> Nur Gro\u00dfbuchstaben? <code>\"HALLO\".isupper()</code> \u2192 <code>True</code> <code>islower()</code> Nur Kleinbuchstaben? <code>\"test\".islower()</code> \u2192 <code>True</code> <code>istitle()</code> Titel-Schreibweise? <code>\"Hallo Welt\".istitle()</code> \u2192 <code>True</code>"},{"location":"python/strings/methoden/#suchen-finden","title":"\ud83d\udd0d Suchen &amp; Finden","text":"Methode Beschreibung Beispiel <code>find(sub)</code> Erste Position oder <code>-1</code> <code>\"abcabc\".find(\"b\")</code> \u2192 <code>1</code> <code>rfind(sub)</code> Letzte Position oder <code>-1</code> <code>\"abcabc\".rfind(\"b\")</code> \u2192 <code>4</code> <code>index(sub)</code> Wie <code>find()</code>, aber mit Fehler bei <code>-1</code> <code>\"abc\".index(\"x\")</code> \u2192 <code>ValueError</code> <code>count(sub)</code> Wie oft kommt <code>sub</code> vor? <code>\"banana\".count(\"a\")</code> \u2192 <code>3</code> <code>startswith()</code> Beginnt mit? <code>\"Hallo\".startswith(\"Ha\")</code> \u2192 <code>True</code> <code>endswith()</code> Endet mit? <code>\"Hallo\".endswith(\"lo\")</code> \u2192 <code>True</code>"},{"location":"python/strings/methoden/#ersetzen-andern","title":"\ud83d\udd27 Ersetzen &amp; \u00c4ndern","text":"Methode Bedeutung Beispiel <code>replace(a, b)</code> Ersetze <code>a</code> durch <code>b</code> <code>\"Ich liebe JS\".replace(\"JS\", \"Python\")</code> <code>strip()</code> Entfernt Leerzeichen (links + rechts) <code>\"  Test  \".strip()</code> \u2192 <code>\"Test\"</code> <code>lstrip()</code> Entfernt links <code>\"  Text\".lstrip()</code> \u2192 <code>\"Text\"</code> <code>rstrip()</code> Entfernt rechts <code>\"Text   \".rstrip()</code> \u2192 <code>\"Text\"</code> <code>zfill(n)</code> F\u00fcllt mit Nullen links auf <code>\"7\".zfill(3)</code> \u2192 <code>\"007\"</code> <code>center(n)</code> Zentriert String in <code>n</code> Zeichen <code>\"Hi\".center(6)</code> \u2192 <code>\"  Hi  \"</code> <code>ljust(n)</code> Links ausrichten <code>\"Hi\".ljust(6, \"-\")</code> \u2192 <code>\"Hi----\"</code> <code>rjust(n)</code> Rechts ausrichten <code>\"Hi\".rjust(6, \"-\")</code> \u2192 <code>\"----Hi\"</code>"},{"location":"python/strings/methoden/#aufteilen-zusammenfugen","title":"\ud83e\uddf1 Aufteilen &amp; Zusammenf\u00fcgen","text":"Methode Beschreibung Beispiel <code>split()</code> Teilt bei Leerzeichen <code>\"a b c\".split()</code> \u2192 <code>[\"a\", \"b\", \"c\"]</code> <code>split(\",\")</code> Teilt bei Trennzeichen <code>\"a,b,c\".split(\",\")</code> \u2192 <code>[\"a\", \"b\", \"c\"]</code> <code>rsplit()</code> Von rechts teilen (gleich wie <code>split</code>) <code>partition(\":\")</code> Teilt in 3 Teile (vor, Trenner, nach) <code>\"key:value\".partition(\":\")</code> \u2192 <code>(\"key\", \":\", \"value\")</code> <code>join(list)</code> Liste zu String verbinden <code>\",\".join([\"a\", \"b\"])</code> \u2192 <code>\"a,b\"</code>"},{"location":"python/strings/methoden/#kodierung-unicode","title":"\ud83d\udd10 Kodierung &amp; Unicode","text":"Methode Beschreibung <code>encode()</code> Wandelt in Byte-Objekt um <code>decode()</code> Wandelt Byte zur\u00fcck zu String <pre><code>s = \"Hallo\"\nb = s.encode(\"utf-8\")\nprint(b)         # b'Hallo'\nprint(b.decode())  # Hallo\n</code></pre>"},{"location":"python/strings/methoden/#beispiel-methoden-in-aktion","title":"\ud83d\udcd8 Beispiel: Methoden in Aktion","text":"<pre><code>text = \"   Python ist cool!  \"\nprint(text.strip().upper().replace(\"COOL\", \"fantastisch\"))\n# \u2192 \"PYTHON IST FANTASTISCH!\"\n</code></pre>"},{"location":"python/strings/methoden/#zusammenfassung","title":"\u2705 Zusammenfassung","text":"Bereich Typische Methoden Gro\u00df/Klein <code>lower()</code>, <code>upper()</code>, <code>capitalize()</code> Testen <code>isalpha()</code>, <code>isdigit()</code>, <code>isspace()</code> Suchen <code>find()</code>, <code>startswith()</code>, <code>count()</code> Bearbeiten <code>replace()</code>, <code>strip()</code>, <code>zfill()</code>, <code>center()</code> Trennen/Verbinden <code>split()</code>, <code>join()</code>, <code>partition()</code> <p>\ud83e\udde0 Tipp: Probiere <code>dir(\"dein string\")</code> in Python, um alle verf\u00fcgbaren Methoden zu sehen!</p>"},{"location":"python/strings/modify/","title":"\u270f\ufe0f Strings ver\u00e4ndern (String Modification)","text":"<p>Strings in Python sind unver\u00e4nderlich (immutable) \u2013 das bedeutet: Du kannst den urspr\u00fcnglichen String nicht direkt \u00e4ndern, aber du kannst durch Methoden einen neuen ver\u00e4nderten String zur\u00fcckbekommen.</p>"},{"location":"python/strings/modify/#grundprinzip","title":"\ud83e\uddf1 Grundprinzip","text":"<pre><code>text = \"hallo\"\ntext = text.upper()\nprint(text)  # HALLO\n</code></pre> <p>\u2705 Methoden geben immer neue Strings zur\u00fcck</p>"},{"location":"python/strings/modify/#gro-kleinschreibung","title":"\ud83d\udd24 Gro\u00df-/Kleinschreibung","text":"Methode Beschreibung <code>lower()</code> Alles klein <code>upper()</code> Alles gro\u00df <code>capitalize()</code> Erstes Zeichen gro\u00df, Rest klein <code>title()</code> Jedes Wort gro\u00df <code>swapcase()</code> Gro\u00df \u2194 Klein <pre><code>s = \"heLLo WorLD\"\nprint(s.lower())      # hello world\nprint(s.upper())      # HELLO WORLD\nprint(s.capitalize()) # Hello world\nprint(s.title())      # Hello World\nprint(s.swapcase())   # HEllO wORld\n</code></pre>"},{"location":"python/strings/modify/#entfernen-ersetzen","title":"\u2702\ufe0f Entfernen &amp; Ersetzen","text":"Methode Beschreibung <code>strip()</code> Entfernt Leerzeichen (oder andere Zeichen) vorne &amp; hinten <code>lstrip()</code> Nur links entfernen <code>rstrip()</code> Nur rechts entfernen <code>replace()</code> Ersetzt Teilstring durch anderen <pre><code>t = \"  Python  \"\nprint(t.strip())     # \"Python\"\nprint(t.replace(\"y\", \"i\"))  # \"Pithon\"\n</code></pre>"},{"location":"python/strings/modify/#suchen-finden","title":"\ud83d\udd0e Suchen &amp; Finden","text":"Methode Beschreibung <code>find()</code> Gibt Index des ersten Vorkommens zur\u00fcck (oder -1) <code>rfind()</code> Letztes Vorkommen <code>index()</code> Wie <code>find()</code>, aber Fehler bei Nichtfinden <code>in</code> Gibt <code>True</code> zur\u00fcck, wenn enthalten <pre><code>s = \"programmieren\"\nprint(s.find(\"m\"))     # 6\nprint(s.rfind(\"m\"))    # 7\nprint(\"gram\" in s)     # True\n</code></pre>"},{"location":"python/strings/modify/#ersetzen-mit-replace","title":"\ud83e\udde9 Ersetzen mit <code>replace()</code>","text":"<pre><code>text = \"Das ist gut. Das ist sch\u00f6n.\"\nneu = text.replace(\"Das\", \"Es\")\nprint(neu)  # \"Es ist gut. Es ist sch\u00f6n.\"\n</code></pre>"},{"location":"python/strings/modify/#aufteilen-zusammenfugen","title":"\u2702\ufe0f Aufteilen &amp; Zusammenf\u00fcgen","text":"Methode Beschreibung <code>split()</code> Teilt String in Liste (Standard: Leerzeichen) <code>rsplit()</code> Von rechts aufteilen <code>join()</code> Liste von Strings zu einem String verbinden <pre><code>satz = \"eins zwei drei\"\nliste = satz.split()\nprint(liste)  # ['eins', 'zwei', 'drei']\n\nneu = \"-\".join(liste)\nprint(neu)  # \"eins-zwei-drei\"\n</code></pre>"},{"location":"python/strings/modify/#formatieren","title":"\ud83d\udd10 Formatieren","text":"Methode Beschreibung <code>format()</code> Einf\u00fcgen von Werten <code>f\"\"</code> (f-Strings) Kurzschreibweise ab Python 3.6 <pre><code>name = \"Florian\"\nalter = 32\n\n# klassisch\nprint(\"Name: {}, Alter: {}\".format(name, alter))\n\n# modern\nprint(f\"Name: {name}, Alter: {alter}\")\n</code></pre>"},{"location":"python/strings/modify/#ausrichten-auffullen","title":"\ud83d\udcca Ausrichten &amp; Auff\u00fcllen","text":"Methode Beispiel <code>center(w)</code> Zentrieren <code>ljust(w)</code> Links ausrichten <code>rjust(w)</code> Rechts ausrichten <code>zfill(w)</code> Mit Nullen auff\u00fcllen <pre><code>s = \"42\"\nprint(s.zfill(5))    # 00042\nprint(s.rjust(5))    # \"   42\"\nprint(s.center(7))   # \"  42   \"\n</code></pre>"},{"location":"python/strings/modify/#validierung-prufung","title":"\ud83e\uddea Validierung &amp; Pr\u00fcfung","text":"Methode Beschreibung <code>isalnum()</code> nur Buchstaben/Zahlen? <code>isalpha()</code> nur Buchstaben? <code>isdigit()</code> nur Ziffern? <code>isspace()</code> nur Leerzeichen? <code>startswith()</code> beginnt mit\u2026? <code>endswith()</code> endet mit\u2026? <pre><code>code = \"AB123\"\nprint(code.isalnum())     # True\nprint(code.startswith(\"AB\"))  # True\n</code></pre>"},{"location":"python/strings/modify/#wiederholen-multiplizieren","title":"\ud83d\udd01 Wiederholen &amp; Multiplizieren","text":"<pre><code>print(\"Na\" * 3)  # \"NaNaNa\"\n</code></pre>"},{"location":"python/strings/modify/#zusammenfassung","title":"\u2705 Zusammenfassung","text":"Bereich Methode-Beispiele Gro\u00df/Klein <code>lower()</code>, <code>upper()</code>, <code>title()</code> Entfernen/Ersetzen <code>strip()</code>, <code>replace()</code>, <code>split()</code> Pr\u00fcfen/Suchen <code>find()</code>, <code>startswith()</code>, <code>in</code> Formatieren <code>format()</code>, <code>f\"\"</code>, <code>zfill()</code>, <code>rjust()</code> Kombinieren <code>join()</code>, <code>*</code>"},{"location":"python/strings/slicing/","title":"\u2702\ufe0f String Slicing","text":"<p>Slicing bedeutet: Einen Teilstring (Ausschnitt) aus einem String entnehmen \u2013 \u00e4hnlich wie ein Messer, das einen Text in St\u00fccke schneidet.</p> <p>Python bietet daf\u00fcr eine einfache, aber sehr m\u00e4chtige Syntax.</p>"},{"location":"python/strings/slicing/#grundlagen-der-slicing-syntax","title":"\ud83d\udccc Grundlagen der Slicing-Syntax","text":"<pre><code>text[start:stop:step]\n</code></pre> Teil Bedeutung <code>start</code> Index, bei dem das Slicing beginnt <code>stop</code> Index, vor dem das Slicing endet (ausschlie\u00dfend) <code>step</code> Schrittweite (z.\u202fB. jedes 2. Zeichen) <p>Wichtig: Indexe starten bei 0</p>"},{"location":"python/strings/slicing/#beispiele","title":"\ud83e\uddea Beispiele","text":"<pre><code>wort = \"Python\"\n</code></pre> Ausdruck Ergebnis Erkl\u00e4rung <code>wort[0]</code> <code>\"P\"</code> erstes Zeichen <code>wort[1:4]</code> <code>\"yth\"</code> Zeichen 1 bis 3 (4 wird nicht mitgenommen) <code>wort[:3]</code> <code>\"Pyt\"</code> von Anfang bis Index 3 (exklusiv) <code>wort[2:]</code> <code>\"thon\"</code> von Index 2 bis zum Ende <code>wort[-1]</code> <code>\"n\"</code> letztes Zeichen <code>wort[-3:-1]</code> <code>\"ho\"</code> drittletztes bis zweitletztes <code>wort[::2]</code> <code>\"Pto\"</code> jedes 2. Zeichen <code>wort[::-1]</code> <code>\"nohtyP\"</code> Umkehrung des Strings"},{"location":"python/strings/slicing/#negative-indizes","title":"\ud83e\udde0 Negative Indizes","text":"<p>Python erlaubt negative Indizes:</p> <ul> <li><code>-1</code> = letztes Zeichen</li> <li><code>-2</code> = vorletztes Zeichen</li> <li>usw.</li> </ul> <p>Das ist besonders n\u00fctzlich zum R\u00fcckw\u00e4rtslesen:</p> <pre><code>name = \"Florian\"\nprint(name[-3:])  # \"ian\"\n</code></pre>"},{"location":"python/strings/slicing/#schrittweite-step","title":"\ud83c\udfaf Schrittweite (step)","text":"<pre><code>text = \"abcdefghij\"\nprint(text[::2])   # a c e g i\nprint(text[1::2])  # b d f h j\nprint(text[::-1])  # r\u00fcckw\u00e4rts\nprint(text[::-2])  # jedes 2. Zeichen r\u00fcckw\u00e4rts: j h f d b\n</code></pre>"},{"location":"python/strings/slicing/#grenzen-verhalten","title":"\ud83d\udeab Grenzen &amp; Verhalten","text":"<ul> <li><code>stop</code> ist exklusiv: Das Zeichen an dieser Stelle wird nicht mehr genommen.</li> <li>Ist <code>start &gt; stop</code> und <code>step</code> positiv \u2192 leere Zeichenkette!</li> <li><code>step = 0</code> ergibt Fehler: <code>ValueError: slice step cannot be zero</code></li> </ul>"},{"location":"python/strings/slicing/#praktische-anwendungsbeispiele","title":"\ud83d\udca1 Praktische Anwendungsbeispiele","text":""},{"location":"python/strings/slicing/#1-erste-zeichen-extrahieren","title":"1. Erste Zeichen extrahieren","text":"<pre><code>s = \"Hallo Welt\"\nprint(s[:5])  # \"Hallo\"\n</code></pre>"},{"location":"python/strings/slicing/#2-domain-aus-e-mail","title":"2. Domain aus E-Mail","text":"<pre><code>email = \"user@example.com\"\ndomain = email[email.index(\"@\")+1:]\nprint(domain)  # \"example.com\"\n</code></pre>"},{"location":"python/strings/slicing/#3-string-umdrehen","title":"3. String umdrehen","text":"<pre><code>s = \"abcde\"\nprint(s[::-1])  # \"edcba\"\n</code></pre>"},{"location":"python/strings/slicing/#4-entfernen-von-prefix","title":"4. Entfernen von Prefix","text":"<pre><code>s = \"123-456-789\"\nprint(s[4:])  # \"456-789\"\n</code></pre>"},{"location":"python/strings/slicing/#slicing-mit-variablen","title":"\ud83e\uddea Slicing mit Variablen","text":"<pre><code>text = \"Datenanalyse\"\nstart = 2\nstop = 8\nprint(text[start:stop])  # \"tenana\"\n</code></pre>"},{"location":"python/strings/slicing/#slicing-ist-auch-bei","title":"\ud83e\uddf0 Slicing ist auch bei:","text":"<ul> <li>Listen, Tupel, Byte-Objekten, Ranges, etc. anwendbar</li> <li>Beispiel mit Liste:</li> </ul> <pre><code>zahlen = [0, 1, 2, 3, 4, 5]\nprint(zahlen[1:4])  # [1, 2, 3]\n</code></pre>"},{"location":"python/strings/slicing/#zusammenfassung","title":"\u2705 Zusammenfassung","text":"Funktion Ausdruck Ergebnis Ersten Teil holen <code>s[:n]</code> Anfang bis n-1 Letzten Teil holen <code>s[-n:]</code> Letzte n Zeichen Mitte herausschneiden <code>s[2:5]</code> Index 2\u20134 R\u00fcckw\u00e4rts lesen <code>s[::-1]</code> Umgekehrt Jedes 2. Zeichen <code>s[::2]</code> z.\u202fB. a c e"},{"location":"python/strings/slicing/#tipp","title":"\ud83d\udcd8 Tipp","text":"<p>Du kannst <code>slice(start, stop, step)</code> auch als Objekt verwenden:</p> <pre><code>s = \"Beispieltext\"\nteil = slice(1, 8, 2)\nprint(s[teil])  # \"epit\"\n</code></pre> <p>Slicing ist eine fundamentale Technik, um in Python effizient mit Strings und anderen sequenziellen Datentypen zu arbeiten.</p>"},{"location":"python/tuples/access/","title":"\ud83c\udfaf Tuple Zugriff (Access)","text":"<p>Ein Tuple ist eine geordnete Sammlung. Das bedeutet, dass du \u2013 wie bei Listen \u2013 \u00fcber Indizes (Positionen) auf einzelne Werte zugreifen kannst.  </p> <p>Da Tuples unver\u00e4nderlich (immutable) sind, kannst du Werte lesen, aber nicht \u00e4ndern.</p>"},{"location":"python/tuples/access/#zugriff-uber-index","title":"\ud83e\udde9 Zugriff \u00fcber Index","text":"<pre><code>farben = (\"rot\", \"gr\u00fcn\", \"blau\")\n\nprint(farben[0])  # rot\nprint(farben[1])  # gr\u00fcn\nprint(farben[2])  # blau\n</code></pre> <p>\u2705 Der Index beginnt bei 0, nicht bei 1!</p>"},{"location":"python/tuples/access/#negativer-index-von-hinten-zahlen","title":"\ud83d\udd01 Negativer Index (von hinten z\u00e4hlen)","text":"<pre><code>farben = (\"rot\", \"gr\u00fcn\", \"blau\")\n\nprint(farben[-1])  # blau\nprint(farben[-2])  # gr\u00fcn\n</code></pre> <p>\ud83d\udd01 <code>-1</code> ist das letzte Element, <code>-2</code> das vorletzte usw.</p>"},{"location":"python/tuples/access/#tuple-durchlaufen-iteration","title":"\ud83e\uddf5 Tuple durchlaufen (Iteration)","text":"<pre><code>zahlen = (10, 20, 30)\n\nfor zahl in zahlen:\n    print(zahl)\n</code></pre> <p>\u27a1\ufe0f Ausgabe:</p> <pre><code>10  \n20  \n30\n</code></pre>"},{"location":"python/tuples/access/#lange-ermitteln","title":"\ud83d\udd0d L\u00e4nge ermitteln","text":"<pre><code>zahlen = (1, 2, 3, 4)\nprint(len(zahlen))  # 4\n</code></pre> <p><code>len()</code> z\u00e4hlt, wie viele Elemente im Tuple sind.</p>"},{"location":"python/tuples/access/#element-prufen-mit-in","title":"\ud83d\udd0d Element pr\u00fcfen mit <code>in</code>","text":"<pre><code>tiere = (\"Hund\", \"Katze\", \"Maus\")\n\nprint(\"Katze\" in tiere)   # True\nprint(\"Vogel\" in tiere)   # False\n</code></pre>"},{"location":"python/tuples/access/#warum-nur-zugriff-kein-andern","title":"\ud83e\udde0 Warum nur Zugriff, kein \u00c4ndern?","text":"<p>Tuples sind unver\u00e4nderlich \u2013 das hei\u00dft, du kannst keine neuen Werte einf\u00fcgen, entfernen oder \u00fcberschreiben.</p> <pre><code>farben = (\"rot\", \"gr\u00fcn\", \"blau\")\nfarben[0] = \"gelb\"  # \u274c TypeError!\n</code></pre>"},{"location":"python/tuples/access/#tuple-entpacken","title":"\ud83e\uddea Tuple \"entpacken\"","text":"<pre><code>person = (\"Max\", 25, \"Berlin\")\n\nname, alter, stadt = person\n\nprint(name)   # Max\nprint(alter)  # 25\nprint(stadt)  # Berlin\n</code></pre> <p>Du kannst mehrere Werte aus einem Tuple direkt in einzelne Variablen aufteilen.</p>"},{"location":"python/tuples/access/#zugriff-auf-teilbereiche-slicing","title":"\ud83e\uddee Zugriff auf Teilbereiche (Slicing)","text":"<pre><code>zahlen = (0, 1, 2, 3, 4)\n\nprint(zahlen[1:4])    # (1, 2, 3)\nprint(zahlen[:3])     # (0, 1, 2)\nprint(zahlen[2:])     # (2, 3, 4)\n</code></pre>"},{"location":"python/tuples/access/#in-schleifen-mit-index-enumerate","title":"\ud83d\udd04 In Schleifen mit Index: <code>enumerate()</code>","text":"<pre><code>farben = (\"rot\", \"gr\u00fcn\", \"blau\")\n\nfor index, farbe in enumerate(farben):\n    print(f\"{index}: {farbe}\")\n</code></pre> <p>\u27a1\ufe0f Ausgabe:</p> <pre><code>0: rot  \n1: gr\u00fcn  \n2: blau\n</code></pre>"},{"location":"python/tuples/access/#zusammenfassung","title":"\u2705 Zusammenfassung","text":"Technik Beschreibung <code>tuple[i]</code> Zugriff per Index <code>tuple[-1]</code> Zugriff von hinten <code>len(tuple)</code> L\u00e4nge ermitteln <code>\"x\" in tuple</code> Pr\u00fcfen, ob Element enthalten ist <code>for x in tuple</code> Iteration durch Inhalte <code>a, b = tuple</code> Tuple entpacken <code>tuple[i:j]</code> Teilbereiche per Slice <p>\ud83d\udccc Merksatz: Tuples sind wie Listen \u2013 nur festgefroren \ud83e\uddca. Zugriff ja, \u00e4ndern nein.</p>"},{"location":"python/tuples/einf%C3%BChrung/","title":"\ud83d\udce6 Einf\u00fchrung in Tuple (Tupel)","text":"<p>Ein Tuple ist eine geordnete, unver\u00e4nderbare (immutable) Sammlung von Werten. Es ist vergleichbar mit einer Liste \u2013 aber einmal erstellt, kann ein Tuple nicht ver\u00e4ndert werden (d.h. keine neuen Elemente hinzuf\u00fcgen, entfernen oder \u00e4ndern).</p> <p>\u2705 Gut geeignet f\u00fcr konstante Daten oder wenn Datensicherheit gew\u00fcnscht ist.</p>"},{"location":"python/tuples/einf%C3%BChrung/#tuple-erstellen","title":"\ud83e\udde9 Tuple erstellen","text":"<pre><code># Mit Klammern\nfarben = (\"rot\", \"gr\u00fcn\", \"blau\")\n\n# Ohne Klammern (optional)\nzahlen = 1, 2, 3\n\n# Einzelwert-Tuple (Komma notwendig!)\neinzeltupel = (\"eins\",)\n</code></pre> <p>\u2757 Ohne das Komma w\u00e4re es nur ein String oder eine Zahl \u2013 kein Tuple!</p>"},{"location":"python/tuples/einf%C3%BChrung/#tuple-ausgeben-und-prufen","title":"\ud83d\udd0d Tuple ausgeben und pr\u00fcfen","text":"<pre><code>print(farben[0])       # rot\nprint(len(farben))     # 3\nprint(\"gr\u00fcn\" in farben) # True\n</code></pre>"},{"location":"python/tuples/einf%C3%BChrung/#warum-tuples","title":"\ud83e\udde0 Warum Tuples?","text":"Vorteil Beschreibung \u2705 Unver\u00e4nderlich Schutz vor ungewollter Modifikation \u2705 Schnell &amp; speichereffizient Besser f\u00fcr gro\u00dfe Datenmengen \u2705 Hashbar Kann als Schl\u00fcssel in Dictionaries dienen \u2705 Klarheit im Code \"Das ist ein fester Datensatz\""},{"location":"python/tuples/einf%C3%BChrung/#tuple-zu-liste-anderbar-machen","title":"\ud83d\udd04 Tuple zu Liste (\u00e4nderbar machen)","text":"<pre><code>zahlen = (1, 2, 3)\nzahlen_liste = list(zahlen)\nzahlen_liste.append(4)\nzahlen = tuple(zahlen_liste)\nprint(zahlen)  # (1, 2, 3, 4)\n</code></pre>"},{"location":"python/tuples/einf%C3%BChrung/#tuple-durchlaufen","title":"\ud83d\udd01 Tuple durchlaufen","text":"<pre><code>farben = (\"rot\", \"gr\u00fcn\", \"blau\")\n\nfor farbe in farben:\n    print(farbe)\n</code></pre>"},{"location":"python/tuples/einf%C3%BChrung/#tuple-entpacken-unpacking","title":"\ud83e\uddea Tuple Entpacken (Unpacking)","text":"<pre><code>person = (\"Anna\", 30, \"Entwicklerin\")\n\nname, alter, beruf = person\n\nprint(name)   # Anna\nprint(alter)  # 30\n</code></pre> <p>\ud83d\udca1 Du kannst auch <code>*</code> verwenden:</p> <pre><code>a, *b = (1, 2, 3, 4)\nprint(a)  # 1\nprint(b)  # [2, 3, 4]\n</code></pre>"},{"location":"python/tuples/einf%C3%BChrung/#haufige-methoden","title":"\ud83e\uddfe H\u00e4ufige Methoden","text":"Methode/Funktion Beschreibung <code>len(t)</code> L\u00e4nge ermitteln <code>t.count(x)</code> Anzahl von x z\u00e4hlen <code>t.index(x)</code> Index von x finden <code>in</code> Pr\u00fcfen ob Element enthalten ist <code>for x in t</code> Iteration \u00fcber Elemente <pre><code>zahlen = (1, 2, 2, 3)\nprint(zahlen.count(2))  # 2\nprint(zahlen.index(3))  # 3\n</code></pre>"},{"location":"python/tuples/einf%C3%BChrung/#tuple-vs-liste-unterschiede","title":"\ud83d\udcda Tuple vs. Liste \u2013 Unterschiede","text":"Eigenschaft Liste (<code>list</code>) Tuple (<code>tuple</code>) \u00c4nderbar \u2705 Ja \u274c Nein Syntax <code>[1, 2, 3]</code> <code>(1, 2, 3)</code> Performance \ud83d\udc22 langsamer \u26a1 schneller Speicherplatz \ud83e\udde0 mehr \ud83d\udcbe weniger Hashbar \u274c Nein \u2705 Ja (wenn Inhalt hashbar)"},{"location":"python/tuples/einf%C3%BChrung/#wann-tuple-verwenden","title":"\u2705 Wann Tuple verwenden?","text":"<ul> <li>Wenn Daten fest und unver\u00e4nderlich sind  </li> <li>Als R\u00fcckgabewerte von Funktionen mit mehreren Werten  </li> <li>Wenn du Leistung und Datensicherheit brauchst  </li> <li>F\u00fcr koordinierte Daten (z.\u202fB. <code>(x, y)</code> Punkte)</li> </ul>"},{"location":"python/tuples/einf%C3%BChrung/#beispiel-ruckgabe-mit-mehreren-werten","title":"\ud83e\uddea Beispiel \u2013 R\u00fcckgabe mit mehreren Werten","text":"<pre><code>def teile(x, y):\n    return x // y, x % y\n\nquotient, rest = teile(10, 3)\nprint(quotient, rest)  # 3 1\n</code></pre> <p>\ud83c\udfaf Fazit: Tuples sind leicht, sicher, schnell \u2013 und perfekt f\u00fcr Daten, die sich nicht ver\u00e4ndern sollen.</p>"},{"location":"python/tuples/join/","title":"\ud83d\udd17 Tuple zusammenf\u00fchren (Join/Concat)","text":"<p>Tuples sind unver\u00e4nderlich, aber du kannst sie durch Verkettung (Concatenation) kombinieren. So entsteht ein neues Tuple, das alle Elemente enth\u00e4lt.</p>"},{"location":"python/tuples/join/#zwei-tuples-zusammenfuhren","title":"\u2795 Zwei Tuples zusammenf\u00fchren","text":"<pre><code>a = (1, 2, 3)\nb = (4, 5)\n\nc = a + b\nprint(c)  # (1, 2, 3, 4, 5)\n</code></pre> <p>\u2705 Das Original bleibt unver\u00e4ndert \u2013 <code>+</code> erstellt ein neues Tuple.</p>"},{"location":"python/tuples/join/#mit-leerem-tuple","title":"\u2795 Mit leerem Tuple","text":"<pre><code>zahlen = (1, 2, 3)\nleeres = ()\n\nneu = zahlen + leeres\nprint(neu)  # (1, 2, 3)\n</code></pre>"},{"location":"python/tuples/join/#ein-tuple-mehrfach-wiederholen","title":"\ud83d\udd01 Ein Tuple mehrfach wiederholen","text":"<pre><code>wort = (\"Hey\",)\n\necho = wort * 3\nprint(echo)  # ('Hey', 'Hey', 'Hey')\n</code></pre> <p>\ud83d\udd39 Das <code>*</code>-Symbol multipliziert das Tuple \u2192 n-fache Wiederholung.</p> <p>\u26a0\ufe0f Beachte das Komma bei ein-elementigen Tuples: <code>(\"Hey\",)</code> ist korrekt \u2013 ohne Komma w\u00e4re es nur ein String in Klammern!</p>"},{"location":"python/tuples/join/#mit-variablen-kombinieren","title":"\ud83d\udd00 Mit Variablen kombinieren","text":"<pre><code>vorname = (\"Max\",)\nnachname = (\"Mustermann\",)\n\nvollname = vorname + nachname\nprint(vollname)  # ('Max', 'Mustermann')\n</code></pre>"},{"location":"python/tuples/join/#auch-mit-schleife-zusammenfugen-dynamisch","title":"\ud83e\udde0 Auch mit Schleife zusammenf\u00fcgen (dynamisch)","text":"<pre><code>teile = [(1, 2), (3,), (4, 5)]\n\nergebnis = ()\nfor t in teile:\n    ergebnis += t\n\nprint(ergebnis)  # (1, 2, 3, 4, 5)\n</code></pre> <p>\u2705 Praktisch, wenn du mehrere Tuples aus einer Liste dynamisch verketten m\u00f6chtest.</p>"},{"location":"python/tuples/join/#zusammenfassung","title":"\ud83d\udccc Zusammenfassung","text":"Aktion Syntax Zwei Tuples verbinden <code>a + b</code> Wiederholen eines Tuples <code>a * n</code> Leeres Tuple anh\u00e4ngen <code>a + ()</code> Dynamisch kombinieren Mit Schleife: <code>result += t</code>"},{"location":"python/tuples/join/#bonus-strings-joinen-nicht-mit-tuples-verwechseln","title":"\ud83d\udd25 Bonus: Strings joinen \u2013 Nicht mit Tuples verwechseln","text":"<p>Du kannst Tuples nicht direkt mit <code>join()</code> verketten \u2013 das funktioniert nur bei Strings.</p> <pre><code>teile = (\"Max\", \"Mustermann\")\n\n# Nur m\u00f6glich, wenn alles Strings sind\nprint(\" \".join(teile))  # Max Mustermann\n</code></pre> <p>\u2705 Verwende <code>+</code> und <code>*</code>, um Tuples zu verbinden oder zu wiederholen.</p> <p>\u274c Methoden wie <code>.append()</code> oder <code>.extend()</code> funktionieren nicht \u2013 Tuples sind unver\u00e4nderbar.</p>"},{"location":"python/tuples/loop/","title":"\ud83d\udd01 Loop \u00fcber Tuples","text":"<p>Auch wenn Tuples unver\u00e4nderlich (immutable) sind, kannst du sie problemlos durchlaufen, z.\u202fB. mit einer <code>for</code>-Schleife. So kannst du auf jedes Element zugreifen \u2013 genau wie bei Listen.</p>"},{"location":"python/tuples/loop/#einfaches-durchlaufen-mit-for","title":"\ud83e\udde9 Einfaches Durchlaufen mit <code>for</code>","text":"<pre><code>farben = (\"rot\", \"gr\u00fcn\", \"blau\")\n\nfor farbe in farben:\n    print(farbe)\n</code></pre> <p>\u27a1\ufe0f Ausgabe:</p> <pre><code>rot  \ngr\u00fcn  \nblau\n</code></pre>"},{"location":"python/tuples/loop/#mit-index-range-len","title":"\ud83d\udd22 Mit Index (<code>range</code> + <code>len()</code>)","text":"<p>Wenn du Index und Wert brauchst:</p> <pre><code>farben = (\"rot\", \"gr\u00fcn\", \"blau\")\n\nfor i in range(len(farben)):\n    print(f\"Index {i}: {farben[i]}\")\n</code></pre> <p>\u27a1\ufe0f Ausgabe:</p> <pre><code>Index 0: rot  \nIndex 1: gr\u00fcn  \nIndex 2: blau\n</code></pre>"},{"location":"python/tuples/loop/#enumerate-index-und-wert-gleichzeitig","title":"\ud83e\udde0 <code>enumerate()</code> \u2013 Index und Wert gleichzeitig","text":"<pre><code>farben = (\"rot\", \"gr\u00fcn\", \"blau\")\n\nfor index, farbe in enumerate(farben):\n    print(f\"{index}: {farbe}\")\n</code></pre> <p>\u27a1\ufe0f Ausgabe:</p> <pre><code>0: rot  \n1: gr\u00fcn  \n2: blau\n</code></pre>"},{"location":"python/tuples/loop/#tuple-von-tuples-durchlaufen","title":"\ud83d\udd04 Tuple von Tuples durchlaufen","text":"<pre><code>personen = ((\"Anna\", 30), (\"Ben\", 25), (\"Clara\", 28))\n\nfor name, alter in personen:\n    print(f\"{name} ist {alter} Jahre alt\")\n</code></pre> <p>\u27a1\ufe0f Ausgabe:</p> <pre><code>Anna ist 30 Jahre alt  \nBen ist 25 Jahre alt  \nClara ist 28 Jahre alt\n</code></pre>"},{"location":"python/tuples/loop/#auch-mit-while-schleife","title":"\ud83d\udd00 Auch mit <code>while</code>-Schleife","text":"<pre><code>farben = (\"rot\", \"gr\u00fcn\", \"blau\")\ni = 0\n\nwhile i &lt; len(farben):\n    print(farben[i])\n    i += 1\n</code></pre>"},{"location":"python/tuples/loop/#typische-anwendungsfalle","title":"\ud83d\udccc Typische Anwendungsf\u00e4lle","text":"Anwendung Technik Alle Werte ausgeben <code>for x in tuple:</code> Index und Wert <code>enumerate()</code> verwenden Zugriff per Index <code>range(len(tuple))</code> Entpackung in Schleife <code>for a, b in tuple_of_tuples:</code>"},{"location":"python/tuples/loop/#achtung-tuple-ist-nicht-veranderbar","title":"\ud83d\udeab Achtung: Tuple ist nicht ver\u00e4nderbar","text":"<p>Obwohl du die Werte lesen kannst, darfst du sie nicht \u00e4ndern:</p> <pre><code>farben[0] = \"gelb\"  # \u274c TypeError!\n</code></pre>"},{"location":"python/tuples/loop/#zusammenfassung","title":"\u2705 Zusammenfassung","text":"Schleife Zweck <code>for x in t</code> Alle Werte nacheinander lesen <code>for i in range()</code> Indexbasiertes Durchlaufen <code>enumerate()</code> Index &amp; Wert kombiniert <code>while</code> Falls komplexere Bedingungen n\u00f6tig <p>\ud83d\udca1 Tuples sind perfekt f\u00fcr fixe Datens\u00e4tze, die du durchlaufen aber nicht \u00e4ndern willst.</p>"},{"location":"python/tuples/methoden/","title":"\ud83e\uddf0 Tuple-Methoden","text":"<p>Tuples sind unver\u00e4nderliche (immutable) Datenstrukturen. Deshalb gibt es nur zwei eingebaute Methoden, die du direkt auf Tuples anwenden kannst:</p> <ul> <li><code>count()</code> \u2192 Z\u00e4hlt, wie oft ein Element vorkommt  </li> <li><code>index()</code> \u2192 Gibt die Position eines Elements zur\u00fcck</li> </ul>"},{"location":"python/tuples/methoden/#count-vorkommen-zahlen","title":"\ud83d\udd22 <code>count()</code> \u2013 Vorkommen z\u00e4hlen","text":""},{"location":"python/tuples/methoden/#zweck","title":"\ud83d\udd39 Zweck:","text":"<p>Z\u00e4hlt, wie oft ein bestimmter Wert im Tuple vorkommt.</p> <pre><code>zahlen = (1, 2, 2, 3, 4, 2)\n\nanzahl = zahlen.count(2)\nprint(anzahl)  # 3\n</code></pre> <p>\u2705 Gibt die Anzahl zur\u00fcck \u274c Gibt <code>0</code> zur\u00fcck, wenn das Element nicht existiert</p>"},{"location":"python/tuples/methoden/#index-position-eines-werts-finden","title":"\ud83d\udd0d <code>index()</code> \u2013 Position eines Werts finden","text":""},{"location":"python/tuples/methoden/#zweck_1","title":"\ud83d\udd39 Zweck:","text":"<p>Liefert den Index des ersten Vorkommens eines Werts.</p> <pre><code>farben = (\"rot\", \"gr\u00fcn\", \"blau\", \"gr\u00fcn\")\n\npos = farben.index(\"gr\u00fcn\")\nprint(pos)  # 1\n</code></pre> <p>\u26a0\ufe0f Wenn der Wert nicht gefunden wird, wirft Python einen <code>ValueError</code>.</p>"},{"location":"python/tuples/methoden/#optional-start-endposition-angeben","title":"\ud83e\udde0 Optional: Start- &amp; Endposition angeben","text":"<p><code>index()</code> kann mit zwei weiteren Parametern genutzt werden:</p> <pre><code>zahlen = (1, 2, 3, 2, 4, 2)\n\n# Suche ab Index 2\nprint(zahlen.index(2, 2))  # 3\n\n# Suche zwischen Index 2 und 5\nprint(zahlen.index(2, 2, 5))  # 3\n</code></pre>"},{"location":"python/tuples/methoden/#methoden-die-tuples-nicht-haben","title":"\ud83d\udd27 Methoden, die Tuples nicht haben:","text":"Methode Warum nicht verf\u00fcgbar? <code>.append()</code> Nur f\u00fcr Listen \u2013 Tuple ist unver\u00e4nderlich <code>.remove()</code> Tuple kann nicht bearbeitet werden <code>.sort()</code> Tuple ist nicht ver\u00e4nderbar <code>.reverse()</code> Siehe oben <code>.extend()</code> Nur f\u00fcr Listen <p>Wenn du solche \u00c4nderungen brauchst \u2192 in Liste umwandeln:</p> <pre><code>farben = (\"rot\", \"gr\u00fcn\", \"blau\")\nfarben_liste = list(farben)\nfarben_liste.append(\"gelb\")\nfarben = tuple(farben_liste)\n</code></pre>"},{"location":"python/tuples/methoden/#zusammenfassung","title":"\u2705 Zusammenfassung","text":"Methode Beschreibung <code>count(x)</code> Wie oft kommt <code>x</code> im Tuple vor? <code>index(x)</code> An welcher Stelle steht <code>x</code> im Tuple? <p>\ud83e\udde0 Tuples sind kompakt, schnell und stabil \u2013 ideal f\u00fcr feste Daten. Brauchst du mehr Flexibilit\u00e4t \u2192 nutze Listen!</p>"},{"location":"python/tuples/unpack/","title":"\ud83d\udce6 Tuple Unpacking (Entpacken von Tuples)","text":"<p>Mit Tuple Unpacking kannst du die einzelnen Werte eines Tuples direkt in eigene Variablen speichern. Das macht den Code sauber, lesbar und elegant.</p>"},{"location":"python/tuples/unpack/#einfaches-unpacking","title":"\ud83e\udde9 Einfaches Unpacking","text":"<pre><code>person = (\"Max\", 30, \"Berlin\")\n\nname, alter, stadt = person\n\nprint(name)   # Max\nprint(alter)  # 30\nprint(stadt)  # Berlin\n</code></pre> <p>\u2705 Die Anzahl der Variablen muss genau zur Anzahl der Tuple-Werte passen.</p>"},{"location":"python/tuples/unpack/#zu-viele-oder-zu-wenige-variablen","title":"\u26a0\ufe0f Zu viele oder zu wenige Variablen","text":"<pre><code>daten = (\"Anna\", 25)\n\n# \u274c Fehler \u2013 3 Variablen, aber nur 2 Werte\n# name, alter, stadt = daten\n# \u2192 ValueError: not enough values to unpack\n\n# \u2705 Korrekt\nname, alter = daten\n</code></pre>"},{"location":"python/tuples/unpack/#mit-schleifen","title":"\ud83d\udd04 Mit Schleifen","text":"<pre><code>personen = [\n    (\"Max\", 30),\n    (\"Lisa\", 28),\n    (\"Tom\", 25)\n]\n\nfor name, alter in personen:\n    print(f\"{name} ist {alter} Jahre alt\")\n</code></pre> <p>\u27a1\ufe0f Ausgabe:</p> <pre><code>Max ist 30 Jahre alt  \nLisa ist 28 Jahre alt  \nTom ist 25 Jahre alt\n</code></pre>"},{"location":"python/tuples/unpack/#unpacking-mit-_-ignorieren-von-werten","title":"\ud83c\udf1f Unpacking mit <code>_</code> (Ignorieren von Werten)","text":"<pre><code>person = (\"Laura\", 32, \"M\u00fcnchen\")\n\nname, _, stadt = person\nprint(name)   # Laura\nprint(stadt)  # M\u00fcnchen\n</code></pre> <p>Das <code>_</code> ist eine Konvention f\u00fcr: \u201eWert wird nicht gebraucht\u201c</p>"},{"location":"python/tuples/unpack/#erweiterte-variante-fur-den-rest","title":"\u2728 Erweiterte Variante: <code>*</code> f\u00fcr den Rest","text":"<pre><code>zahlen = (1, 2, 3, 4, 5)\n\na, b, *rest = zahlen\nprint(a)      # 1\nprint(b)      # 2\nprint(rest)   # [3, 4, 5]\n</code></pre> <pre><code>*anfang, ende = (10, 20, 30, 40)\nprint(anfang)  # [10, 20, 30]\nprint(ende)    # 40\n</code></pre> <p>Das <code>*</code> erlaubt es, mehrere Werte als Liste zu sammeln.</p>"},{"location":"python/tuples/unpack/#nested-tuples-entpacken","title":"\ud83d\udd00 Nested Tuples entpacken","text":"<pre><code>daten = (\"Anna\", (1990, \"Berlin\"))\n\nname, (jahr, stadt) = daten\n\nprint(name)  # Anna\nprint(jahr)  # 1990\nprint(stadt) # Berlin\n</code></pre>"},{"location":"python/tuples/unpack/#zusammenfassung","title":"\u2705 Zusammenfassung","text":"Technik Beschreibung <code>a, b = tuple</code> Einfaches Unpacking <code>a, _, c = tuple</code> Mittlerer Wert ignorieren <code>a, *b = tuple</code> Rest in Liste sammeln <code>*a, b = tuple</code> Anfang als Liste, letzter separat Nested: <code>(a, (b, c)) = \u2026</code> Verschachtelte Tuples entpacken"},{"location":"python/tuples/unpack/#merksatz","title":"\ud83d\udccc Merksatz","text":"<p>Unpacking ist wie Geschenke auspacken \ud83c\udf81 \u2013 Du wei\u00dft genau, was drin ist und legst es sauber ab.</p>"},{"location":"python/tuples/update/","title":"\ud83d\udd04 Tuple \"Update\" (\u00c4ndern von Inhalten)","text":""},{"location":"python/tuples/update/#vorab-tuples-sind-immutable","title":"\u2757 Vorab: Tuples sind immutable","text":"<p>Ein Tuple kann nach seiner Erstellung nicht direkt ver\u00e4ndert werden. Das hei\u00dft:</p> <ul> <li>Du kannst keine Elemente hinzuf\u00fcgen</li> <li>Du kannst keine Elemente l\u00f6schen</li> <li>Du kannst keine Elemente ersetzen</li> </ul> <pre><code>farben = (\"rot\", \"gr\u00fcn\", \"blau\")\nfarben[0] = \"gelb\"  # \u274c TypeError: 'tuple' object does not support item assignment\n</code></pre>"},{"location":"python/tuples/update/#aber-wie-kann-man-trotzdem-etwas-andern","title":"\ud83e\udde9 Aber wie kann man trotzdem \u201eetwas \u00e4ndern\u201c?","text":"<p>Wenn du dennoch ein Tuple ver\u00e4ndern m\u00f6chtest, musst du es in eine Liste umwandeln, die \u00c4nderung vornehmen und danach wieder ein Tuple erstellen.</p>"},{"location":"python/tuples/update/#beispiel-wert-andern","title":"\ud83d\udd01 Beispiel: Wert \u00e4ndern","text":"<pre><code>farben = (\"rot\", \"gr\u00fcn\", \"blau\")\n\n# In Liste umwandeln\nfarben_liste = list(farben)\n\n# \u00c4nderung vornehmen\nfarben_liste[0] = \"gelb\"\n\n# Zur\u00fcck in Tuple\nfarben = tuple(farben_liste)\n\nprint(farben)  # ('gelb', 'gr\u00fcn', 'blau')\n</code></pre>"},{"location":"python/tuples/update/#beispiel-element-hinzufugen","title":"\u2795 Beispiel: Element hinzuf\u00fcgen","text":"<pre><code>zahlen = (1, 2, 3)\n\nzahlen_liste = list(zahlen)\nzahlen_liste.append(4)\n\nzahlen = tuple(zahlen_liste)\nprint(zahlen)  # (1, 2, 3, 4)\n</code></pre>"},{"location":"python/tuples/update/#beispiel-element-entfernen","title":"\u2796 Beispiel: Element entfernen","text":"<pre><code>tiere = (\"Hund\", \"Katze\", \"Maus\")\n\ntiere_liste = list(tiere)\ntiere_liste.remove(\"Katze\")\n\ntiere = tuple(tiere_liste)\nprint(tiere)  # ('Hund', 'Maus')\n</code></pre>"},{"location":"python/tuples/update/#alternativ-neue-tuples-zusammenfugen","title":"\ud83e\udde0 Alternativ: Neue Tuples zusammenf\u00fcgen","text":"<p>Manchmal ist es praktischer, gleich neue Tuples zu erzeugen, statt zu \"\u00e4ndern\":</p> <pre><code>zahlen = (1, 2, 3)\nzahlen_neu = zahlen + (4, 5)\nprint(zahlen_neu)  # (1, 2, 3, 4, 5)\n</code></pre> <p>Du kannst Tuples addieren (konkatenieren) oder mit <code>*</code> vervielfachen.</p>"},{"location":"python/tuples/update/#zusammenfassung","title":"\u2705 Zusammenfassung","text":"Aktion Tuple-Ansatz Element \u00e4ndern \u2192 in Liste umwandeln, \u00e4ndern, zur\u00fcck zu Tuple Element hinzuf\u00fcgen \u2192 <code>.append()</code> auf Liste, dann wieder Tuple Element l\u00f6schen \u2192 <code>.remove()</code> auf Liste, dann wieder Tuple Tuple erweitern \u2192 <code>tuple1 + tuple2</code> Tuple verdoppeln \u2192 <code>tuple * 2</code>"},{"location":"python/tuples/update/#merksatz","title":"\ud83d\udccc Merksatz","text":"<p>Tuples selbst \u00e4ndern geht nicht \u2013 aber mit einem kleinen Trick \u00fcber Listen klappt\u2019s trotzdem!</p>"},{"location":"scraping/einf%C3%BChrung/","title":"Hier wird bald alles \u00fcber Scraping stehen!","text":""},{"location":"software/cleancode/","title":"\ud83e\uddfc Clean Code \u2013 Sauber programmieren","text":"<p>Clean Code bedeutet: klarer, verst\u00e4ndlicher, wartbarer und zuverl\u00e4ssiger Code. Es ist kein eigener Code-Stil, sondern ein Konzept guter Softwareentwicklung.</p> <p>Der Begriff wurde besonders durch das Buch Clean Code von Robert C. Martin (Uncle Bob) bekannt.</p>"},{"location":"software/cleancode/#ziel-von-clean-code","title":"\ud83c\udfaf Ziel von Clean Code","text":"Ziel Warum es wichtig ist Lesbarkeit Andere (oder du selbst) verstehen den Code sp\u00e4ter schneller Wartbarkeit Code l\u00e4sst sich leichter anpassen oder erweitern Testbarkeit Sauberer Code ist einfacher zu testen Fehlervermeidung Klare Strukturen verhindern Bugs Teamf\u00e4higkeit Gemeinsames Arbeiten wird produktiver"},{"location":"software/cleancode/#grundprinzipien","title":"\ud83e\udde0 Grundprinzipien","text":""},{"location":"software/cleancode/#1-sag-was-du-meinst-gute-namen","title":"1. Sag, was du meinst \u2013 gute Namen","text":"<p>\u2705 Gute Namen sagen aus, was etwas macht oder enth\u00e4lt:</p> <pre><code>// \u274c Schlecht\nlet x = 3;\n\n// \u2705 Besser\nlet anzahlArtikelImWarenkorb = 3;\n</code></pre> <p>Regeln:</p> <ul> <li>Variablennamen sind aussagekr\u00e4ftig</li> <li>Keine Abk\u00fcrzungen wie <code>btn1</code>, <code>x</code>, <code>tmp</code></li> <li>Funktionen mit Verb: <code>berechneSumme()</code>, <code>ladeBenutzer()</code></li> </ul>"},{"location":"software/cleancode/#2-eine-funktion-eine-aufgabe","title":"2. Eine Funktion = eine Aufgabe","text":"<p>Jede Funktion soll nur EINE Sache tun:</p> <pre><code>// \u274c Schlecht: tut mehrere Dinge\nfunction bestellungAbschicken() {\n  datenValidieren();\n  datenSpeichern();\n  emailSenden();\n}\n\n// \u2705 Besser: klar getrennt\nfunction validiereBestellung() {}\nfunction speichereBestellung() {}\nfunction sendeBestaetigung() {}\n</code></pre>"},{"location":"software/cleancode/#3-saubere-struktur-einruckung","title":"3. Saubere Struktur &amp; Einr\u00fcckung","text":"<p>Code sollte wie ein gut strukturiertes Dokument aussehen:</p> <pre><code>function pruefeAlter(alter) {\n  if (alter &gt;= 18) {\n    return \"Erwachsen\";\n  } else {\n    return \"Minderj\u00e4hrig\";\n  }\n}\n</code></pre> <p>\u27a1\ufe0f Einheitlicher Stil macht Code lesbar wie Text.</p>"},{"location":"software/cleancode/#4-vermeide-magische-zahlen-strings","title":"4. Vermeide magische Zahlen &amp; Strings","text":"<p>\u2705 Keine \u201egeheimen\u201c Werte mitten im Code:</p> <pre><code>// \u274c\nif (wert &gt; 42) { ... }\n\n// \u2705\nconst HOECHSTWERT = 42;\nif (wert &gt; HOECHSTWERT) { ... }\n</code></pre>"},{"location":"software/cleancode/#5-kommentare-nur-wenn-notig","title":"5. Kommentare nur wenn n\u00f6tig","text":"<ul> <li>Besser: sprechender Code</li> <li>Kommentare nicht zur Entschuldigung von schlechtem Code</li> <li>Gute Kommentare erkl\u00e4ren das Warum, nicht das Wie</li> </ul> <pre><code>// \u274c Schlecht\n// Pr\u00fcfe, ob Benutzer eingeloggt ist\nif (user.loggedIn === true) { ... }\n\n// \u2705 Besser\nif (user.istEingeloggt()) { ... }\n</code></pre>"},{"location":"software/cleancode/#6-kurze-funktionen","title":"6. Kurze Funktionen","text":"<ul> <li>Ideal: 5\u201320 Zeilen</li> <li>Jede Funktion sollte kontextunabh\u00e4ngig testbar sein</li> </ul>"},{"location":"software/cleancode/#7-fehlerbehandlung-nicht-ignorieren","title":"7. Fehlerbehandlung nicht ignorieren","text":"<pre><code>// \u274c Schlecht\ntry {\n  ladeDaten();\n} catch (e) {\n  // nichts\n}\n\n// \u2705 Besser\ntry {\n  ladeDaten();\n} catch (e) {\n  console.error(\"Fehler beim Laden der Daten:\", e.message);\n}\n</code></pre>"},{"location":"software/cleancode/#best-practices","title":"\ud83d\udee0 Best Practices","text":"Regel Warum wichtig? Schreibe erst funktionierenden Code, dann refactor Qualit\u00e4t Schritt f\u00fcr Schritt verbessern Schreibe Tests Tests zeigen Bugs und helfen beim Refactoring DRY \u2013 Don't Repeat Yourself Vermeide Dopplungen \u2013 nutze Funktionen KISS \u2013 Keep It Simple, Stupid Einfach ist besser als clever YAGNI \u2013 You Ain\u2019t Gonna Need It Bau nur, was wirklich gebraucht wird"},{"location":"software/cleancode/#refactoring-beispiel","title":"\ud83d\udd01 Refactoring-Beispiel","text":"<p>Vorher:</p> <pre><code>if (user.age &gt; 18) {\n  console.log(\"Darf teilnehmen\");\n} else {\n  console.log(\"Darf nicht teilnehmen\");\n}\n</code></pre> <p>Nachher (sauberer, testbarer):</p> <pre><code>function istErwachsen(user) {\n  return user.age &gt;= 18;\n}\n\nif (istErwachsen(user)) {\n  console.log(\"Darf teilnehmen\");\n} else {\n  console.log(\"Darf nicht teilnehmen\");\n}\n</code></pre>"},{"location":"software/cleancode/#clean-code-checkliste","title":"\u2705 Clean Code Checkliste","text":"<ul> <li>[ ] Haben Variablen &amp; Funktionen gute Namen?</li> <li>[ ] Macht jede Funktion nur EINE Sache?</li> <li>[ ] Ist der Code lesbar &amp; gut einger\u00fcckt?</li> <li>[ ] Gibt es duplizierten Code?</li> <li>[ ] Ist unn\u00f6tiger Code gel\u00f6scht?</li> <li>[ ] Ist die Fehlerbehandlung vorhanden und sinnvoll?</li> <li>[ ] Werden magische Werte vermieden?</li> </ul>"},{"location":"software/modular/","title":"\ud83e\udde9 Modularit\u00e4t in der Softwareentwicklung","text":"<p>Modularit\u00e4t bedeutet, ein Programm in kleine, unabh\u00e4ngige und wiederverwendbare Bausteine zu zerlegen. Jeder dieser Module erf\u00fcllt eine klar definierte Aufgabe.</p> <p>Dieses Prinzip hilft dabei, komplexe Software verst\u00e4ndlich, testbar und wartbar zu halten.</p>"},{"location":"software/modular/#warum-modular-entwickeln","title":"\ud83c\udfaf Warum modular entwickeln?","text":"Vorteil Erkl\u00e4rung \ud83d\udd01 Wiederverwendbarkeit Ein Modul kann in mehreren Projekten oder Bereichen genutzt werden \ud83e\uddea Testbarkeit Kleine Module lassen sich leichter einzeln testen \ud83d\udd27 Wartbarkeit \u00c4nderungen an einem Modul beeinflussen andere nicht \ud83d\udc65 Teamarbeit Mehrere Entwickler k\u00f6nnen unabh\u00e4ngig an einzelnen Modulen arbeiten \ud83d\udce6 Austauschbarkeit Module lassen sich leichter durch bessere Varianten ersetzen"},{"location":"software/modular/#was-ist-ein-modul","title":"\ud83e\udde0 Was ist ein Modul?","text":"<p>Ein Modul ist eine Einheit von Code, z.\u202fB.:</p> <ul> <li>Eine Datei in JavaScript/Python</li> <li>Eine Klasse oder Funktion</li> <li>Ein wiederverwendbarer Baustein wie ein Button oder ein Formular</li> </ul> <p>Beispiel (JavaScript ES6):</p> <pre><code>// datei: mathe.js\nexport function addiere(a, b) {\n  return a + b;\n}\n</code></pre> <pre><code>// datei: app.js\nimport { addiere } from \"./mathe.js\";\nconsole.log(addiere(2, 3)); // 5\n</code></pre> <p>\u27a1\ufe0f Die Funktion <code>addiere</code> ist modularisiert.</p>"},{"location":"software/modular/#so-baust-du-modularen-code","title":"\ud83d\udd27 So baust du modularen Code","text":""},{"location":"software/modular/#1-ein-modul-eine-aufgabe","title":"\u2705 1. Ein Modul = eine Aufgabe","text":"<p>Beispiel: Statt <code>utils.js</code> mit 100 Funktionen \u2192 lieber:</p> <ul> <li><code>rechnung.js</code> \u2192 enth\u00e4lt Rechenfunktionen</li> <li><code>benutzer.js</code> \u2192 verwaltet Benutzerlogik</li> <li><code>validierung.js</code> \u2192 enth\u00e4lt Pr\u00fcfungen f\u00fcr Formulare</li> </ul>"},{"location":"software/modular/#2-explizite-schnittstellen-apis","title":"\u2705 2. Explizite Schnittstellen (APIs)","text":"<p>Ein Modul sollte nur das nach au\u00dfen geben, was andere brauchen.</p> <pre><code>// Nur bestimmte Funktionen exportieren\nexport function berechneMwst() { ... }\nexport function berechneRabatt() { ... }\n// interne Hilfsfunktion bleibt privat\nfunction loggeZahl() { ... }\n</code></pre>"},{"location":"software/modular/#3-keine-globalen-variablen","title":"\u2705 3. Keine globalen Variablen!","text":"<p>Jedes Modul sollte seinen eigenen Scope haben und keine globale Umwelt ver\u00e4ndern.</p>"},{"location":"software/modular/#4-unabhangigkeit","title":"\u2705 4. Unabh\u00e4ngigkeit","text":"<p>Module sollten nicht gegenseitig abh\u00e4ngig sein. Verwende Entkopplung:</p> <ul> <li>Callbacks</li> <li>Events</li> <li>Dependency Injection</li> </ul>"},{"location":"software/modular/#modulsysteme-in-verschiedenen-sprachen","title":"\ud83d\udce6 Modulsysteme in verschiedenen Sprachen","text":"Sprache Modulsystem JavaScript CommonJS (Node.js), ES Modules Python Module (Dateien mit Funktionen/Klassen) Java Packages PHP <code>require</code>, <code>include</code>, Namespaces C# Namespaces &amp; Assemblies"},{"location":"software/modular/#beispiel-in-python","title":"\ud83d\udd01 Beispiel in Python","text":"<pre><code># datei: tools.py\ndef begruessen(name):\n    return f\"Hallo, {name}!\"\n\n# datei: app.py\nfrom tools import begruessen\n\nprint(begruessen(\"Florian\"))\n</code></pre>"},{"location":"software/modular/#best-practices-fur-modularitat","title":"\ud83e\udde0 Best Practices f\u00fcr Modularit\u00e4t","text":"Regel Warum? Schreibe kleine, fokussierte Module Klarer Zweck \u2013 bessere Wiederverwendung Verwende sprechende Dateinamen <code>mathUtils.js</code> statt <code>script1.js</code> Nur exportieren, was n\u00f6tig ist Weniger Kopplung, mehr Kontrolle Nutze Ordner f\u00fcr Gruppierungen z.\u202fB. <code>components/</code>, <code>services/</code>, <code>utils/</code> Teste Module isoliert Schnellere Fehlersuche"},{"location":"software/modular/#modularitat-in-der-praxis-beispiel-mit-frontend-komponenten","title":"\ud83e\uddf1 Modularit\u00e4t in der Praxis (Beispiel mit Frontend-Komponenten)","text":"<p>Struktur f\u00fcr z.\u202fB. eine React/Vue/JS-Web-App:</p> <pre><code>/components\n  \u251c\u2500\u2500 Button.js\n  \u251c\u2500\u2500 Input.js\n  \u2514\u2500\u2500 Modal.js\n\n/utils\n  \u2514\u2500\u2500 formatDate.js\n\n/services\n  \u2514\u2500\u2500 api.js\n</code></pre> <p>\u27a1\ufe0f Jedes Modul hat nur einen Zweck \u27a1\ufe0f Wird bei Bedarf importiert</p>"},{"location":"software/modular/#fazit","title":"\ud83d\udcd8 Fazit","text":"<p>Modularer Code ist wie ein LEGO-Baukasten: Du kannst komplexe Dinge bauen \u2013 aber alles bleibt verst\u00e4ndlich, testbar und austauschbar.</p> <ul> <li>Besser 5 kleine Dateien als 1 gro\u00dfe</li> <li>Jedes Modul sollte getestet, lesbar und unabh\u00e4ngig sein</li> <li>Modularit\u00e4t ist der Schl\u00fcssel zu skalierbarer Softwareentwicklung</li> </ul>"},{"location":"software/solid/","title":"\ud83e\uddf1 SOLID \u2013 Die 5 Prinzipien guter objektorientierter Softwareentwicklung","text":"<p>SOLID ist ein Akronym f\u00fcr f\u00fcnf Grundprinzipien, die helfen, flexiblen, wartbaren und fehlerarmen Code zu schreiben \u2013 besonders im objektorientierten Paradigma.</p> <p>Entwickelt wurde das Konzept unter anderem von Robert C. Martin (Uncle Bob).</p>"},{"location":"software/solid/#warum-solid","title":"\ud83e\udde0 Warum SOLID?","text":"Vorteil Bedeutung \ud83d\udee0 Weniger Bugs Bessere Struktur = weniger versteckte Fehlerquellen \ud83d\udd01 Leicht erweiterbar Neue Features lassen sich einfacher integrieren \ud83d\udc68\u200d\ud83d\udd27 Bessere Wartbarkeit Klar getrennte Zust\u00e4ndigkeiten \ud83d\udd0d Testbarkeit Isolierte Einheiten lassen sich einfacher testen \ud83d\udd04 Wiederverwendbarkeit Module k\u00f6nnen in anderen Projekten genutzt werden"},{"location":"software/solid/#was-bedeutet-solid","title":"\ud83e\udde9 Was bedeutet SOLID?","text":"Buchstabe Prinzip Deutsch S Single Responsibility Principle Einzelverantwortungsprinzip O Open/Closed Principle Offen f\u00fcr Erweiterung, geschlossen f\u00fcr \u00c4nderung L Liskov Substitution Principle Ersetzbarkeit durch Subklassen I Interface Segregation Principle Schnittstellenaufteilung D Dependency Inversion Principle Abh\u00e4ngigkeitsumkehr"},{"location":"software/solid/#s-single-responsibility-principle-srp","title":"\ud83d\udd39 S \u2013 Single Responsibility Principle (SRP)","text":"<p>Eine Klasse sollte nur einen Grund zur \u00c4nderung haben.</p>"},{"location":"software/solid/#schlechter-stil","title":"\u274c Schlechter Stil:","text":"<pre><code>class User {\n  saveToDatabase() { ... }\n  renderProfileHTML() { ... }\n}\n</code></pre> <p>\u27a1\ufe0f Diese Klasse hat zwei Verantwortungen: Daten + UI</p>"},{"location":"software/solid/#besser","title":"\u2705 Besser:","text":"<pre><code>class User {\n  // nur Datenlogik\n}\n\nclass UserRenderer {\n  renderProfileHTML(user) { ... }\n}\n</code></pre>"},{"location":"software/solid/#o-openclosed-principle-ocp","title":"\ud83d\udd39 O \u2013 Open/Closed Principle (OCP)","text":"<p>Softwaremodule sollen offen f\u00fcr Erweiterung, aber geschlossen f\u00fcr \u00c4nderung sein.</p>"},{"location":"software/solid/#schlechter-stil_1","title":"\u274c Schlechter Stil:","text":"<pre><code>function berechnePreis(typ, betrag) {\n  if (typ === \"standard\") return betrag;\n  if (typ === \"premium\") return betrag * 0.9;\n}\n</code></pre> <p>\u27a1\ufe0f Jeder neue Typ \u00e4ndert den Code.</p>"},{"location":"software/solid/#besser_1","title":"\u2705 Besser:","text":"<pre><code>class Preisregel {\n  berechne(betrag) { return betrag; }\n}\n\nclass PremiumRegel extends Preisregel {\n  berechne(betrag) { return betrag * 0.9; }\n}\n</code></pre> <p>\u27a1\ufe0f Neue Logik = neue Klasse, kein Code \u00e4ndern</p>"},{"location":"software/solid/#l-liskov-substitution-principle-lsp","title":"\ud83d\udd39 L \u2013 Liskov Substitution Principle (LSP)","text":"<p>Subklassen sollen sich wie ihre Elternklassen verhalten \u2013 ohne Fehler zu erzeugen.</p>"},{"location":"software/solid/#problematisch","title":"\u274c Problematisch:","text":"<pre><code>class Rechteck {\n  setBreite(b) { ... }\n  setH\u00f6he(h) { ... }\n}\n\nclass Quadrat extends Rechteck {\n  // H\u00f6he und Breite m\u00fcssen immer gleich bleiben \u21d2 LSP verletzt\n}\n</code></pre>"},{"location":"software/solid/#losung","title":"\u2705 L\u00f6sung:","text":"<ul> <li>Quadrat sollte nicht von Rechteck erben</li> <li>Statt Vererbung: eigene Klasse oder Komposition</li> </ul>"},{"location":"software/solid/#i-interface-segregation-principle-isp","title":"\ud83d\udd39 I \u2013 Interface Segregation Principle (ISP)","text":"<p>Lieber viele kleine, spezialisierte Schnittstellen statt einer gro\u00dfen.</p>"},{"location":"software/solid/#schlechter-stil_2","title":"\u274c Schlechter Stil:","text":"<pre><code>interface Tier {\n  laufen();\n  fliegen();\n}\nclass Hund implements Tier {\n  laufen() {}\n  fliegen() {} // Unsinn!\n}\n</code></pre>"},{"location":"software/solid/#besser_2","title":"\u2705 Besser:","text":"<pre><code>interface L\u00e4ufer {\n  laufen();\n}\ninterface Flieger {\n  fliegen();\n}\nclass Hund implements L\u00e4ufer { ... }\n</code></pre> <p>\u27a1\ufe0f Nur das implementieren, was gebraucht wird</p>"},{"location":"software/solid/#d-dependency-inversion-principle-dip","title":"\ud83d\udd39 D \u2013 Dependency Inversion Principle (DIP)","text":"<p>High-Level-Module sollten nicht von Low-Level-Modulen abh\u00e4ngen. Beide sollten von Abstraktionen abh\u00e4ngen.</p>"},{"location":"software/solid/#schlechter-stil_3","title":"\u274c Schlechter Stil:","text":"<pre><code>class MySQL {\n  speichereDaten(daten) { ... }\n}\n\nclass NutzerService {\n  constructor() {\n    this.db = new MySQL();\n  }\n}\n</code></pre> <p>\u27a1\ufe0f Direkt abh\u00e4ngig von konkreter Datenbank</p>"},{"location":"software/solid/#besser_3","title":"\u2705 Besser:","text":"<pre><code>class NutzerService {\n  constructor(datenbank) {\n    this.db = datenbank;\n  }\n}\n</code></pre> <p>\u27a1\ufe0f <code>MySQL</code>, <code>MongoDB</code>, <code>InMemory</code> \u2013 beliebig austauschbar \u27a1\ufe0f Perfekt f\u00fcr Tests (z.\u202fB. Mocking m\u00f6glich)</p>"},{"location":"software/solid/#zusammenfassung","title":"\u2705 Zusammenfassung","text":"Prinzip Merksatz S Eine Klasse = eine Aufgabe O Erweitern ohne Code zu \u00e4ndern L Subklassen verhalten sich wie Eltern I Nur Schnittstellen nutzen, die man braucht D Abh\u00e4ngigkeiten umdrehen \u2013 auf Abstraktion setzen"},{"location":"software/solid/#ressourcen","title":"\ud83d\udcd8 Ressourcen","text":"<ul> <li>\ud83d\udcd6 Clean Code \u2013 Robert C. Martin</li> <li>\ud83d\udcd6 Agile Softwareentwicklung: Prinzipien, Muster und Praktiken \u2013 Martin &amp; Martin</li> <li>https://solidjs.com (nicht zu verwechseln mit dem JS-Framework gleichen Namens \ud83d\ude09)</li> </ul>"},{"location":"software/solid/#fazit","title":"\ud83d\udca1 Fazit","text":"<p>\u201eGuter Code ist nicht der, der l\u00e4uft \u2013 sondern der, der verstanden, ge\u00e4ndert und wiederverwendet werden kann.\u201c</p> <ul> <li>Die SOLID-Prinzipien helfen dir, nachhaltig guten Code zu schreiben</li> <li>Sie sind nicht zwingend, aber empfohlen \u2013 besonders bei gr\u00f6\u00dferen Projekten</li> <li>Auch in nicht-objektorientierten Sprachen wie JavaScript oder Python anwendbar</li> </ul>"}]}